/*
 * Copyright 2005-2007 The Kuali Foundation.
 * 
 * Licensed under the Educational Community License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.core.service;

import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.kuali.core.bo.Parameter;

/**
 * This interface defines methods that a KualiConfiguration Service must provide. Provides methods for getting string resources.
 */
public interface KualiConfigurationService {
    /**
     * Given a property name (key), returns the value associated with that key, or null if none is available.
     * 
     * @param key
     * @return String associated with the given key
     * @throws IllegalArgumentException if the key is null
     */
    public String getPropertyString(String key);

    /**
     * Given a property name (key), returns the "booleanized" value associated with that key.  
     * 
     * true, yes, on, or 1 are translated into <b>true</b> - all other values result in <b>false</b> 
     * 
     * @param key
     * @return String associated with the given key
     * @throws IllegalArgumentException if the key is null
     */
    public boolean getPropertyAsBoolean(String key);
    
    /**
     * @return Properties instance containing all (key,value) pairs known to the service
     */
    public Properties getAllProperties();

    /**
     * Returns whether this instance is production based on the configuration options.
     */
    public boolean isProductionEnvironment();
    
    /**
     * Returns all parameters which match the given criteria.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     */
    public List<Parameter> getParameters( Map<String,String> criteria );

    /**
     * Returns all parameters which match the given criteria.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     */
    public Map<String,Parameter> getParametersAsMap( Map<String,String> criteria );

    /**
     * Get the <code>{@link Parameter}</code> identified by the given parameters.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     */
    public Parameter getParameter( String namespaceCode, String parameterDetailTypeCode, String parameterName );
    /**
     * Get an application parameter that is a single value set to Y/N.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     * @return true for Y, false for anything else.
     */
    public boolean getIndicatorParameter( String namespaceCode, String parameterDetailTypeCode, String parameterName );
    /**
     * Checks whether a parameter is in the database. This is useful for parameters that are optional or identified dynamically. It
     * does not guarantee the success of the other methods in this service; they can fail for other reasons.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     * @return whether the specified parameter is in the database.
     */
    public boolean parameterExists( String namespaceCode, String parameterDetailTypeCode, String parameterName );

    /**
     * This method will return a parameter value. This is used to access the Application Parameter component which allows for
     * externalizing constants. It does not return null.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     * @return the value of the parameter, may be blank, but not null
     */
    public String getParameterValue( String namespaceCode, String parameterDetailTypeCode, String parameterName );

    /**
     * This method will return a list of parameter values, each as its own String in an array. This is used to access the
     * Application Parameter component which allows for externalizing constants as a list of values. The list is generated by
     * splitting the value in the database on the semicolon character. It does not return null.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     * @return an array of one or more Strings, possibly empty or blank, but not null.
     */
    public String[] getParameterValues( String namespaceCode, String parameterDetailTypeCode, String parameterName );
    
    /**
     * This method will return a list of parameter values, each as its own String in a List.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     * @return A List of one or more Strings, possibly empty, but not null.
     */
    public List<String> getParameterValuesAsList( String namespaceCode, String parameterDetailTypeCode, String parameterName );
    
    /**
     * This method will return a set of parameter values, each as its own String in a Set.
     * 
     * @param namespaceCode A unique identifier for grouping parameters together.
     * @param parameterName The name of the parameter unique to the namespace.
     * @return A Set of one or more Strings, possibly empty, but not null.
     */
    public Set<String> getParameterValuesAsSet( String namespaceCode, String parameterDetailTypeCode, String parameterName );    

    /**
     * This method will return a list of parameter values, each as its own String in an array.
     * 
     * @param parameter A parameter from which to extract the parameter values.
     * @return an array of one or more Strings, possibly empty or blank, but not null.
     */
    public String[] getParameterValues( Parameter parameter );

    /**
     * This method will return a list of parameter values, each as its own String in a List.
     * 
     * @param parameter A parameter from which to extract the parameter values.
     * @return an array of one or more Strings, possibly empty or blank, but not null.
     */
    public List<String> getParameterValuesAsList( Parameter parameter );

    /**
     * This method will return a set of parameter values, each as its own String in a Set.
     * 
     * @param parameter A parameter from which to extract the parameter values.
     * @return an array of one or more Strings, possibly empty or blank, but not null.
     */
    public Set<String> getParameterValuesAsSet( Parameter parameter );

    /**
     * Generates a String with the parameter values formatted prettily, with a comma and space between each value for multivalued
     * param values.
     * 
     * NOTE: order of original values may not be preserved (parse parameterText instead).
     * 
     * For example: value "2;3;4" would be formatted as "2, 3, 4"
     * 
     * @return a pretty string
     */
    public String getPrettyParameterValueString( Parameter parameter );
    
    /**
     * Checks a given value against the rule based on the following guidelines: 1) If rule is inactive, the rule always passes 2) If
     * ruleOperator is 'A' If value is in set, rule passes else rule fails 3) If ruleOperator is 'D' if value is in set, rule fails
     * else rule passes
     * 
     * @param value - value to check
     * 
     * @return boolean indicating the rule success
     */
    public boolean failsRule( String namespaceCode, String parameterDetailTypeCode, String parameterName, String value );

    /**
     * This method is a convenience method for getting the inverse of failsRule(value). It returns the opposite of whatever
     * failsRule returns for the same value.
     * 
     * @param value - a value to check
     * 
     * @return inverse of failsRule
     */
    public boolean succeedsRule( String namespaceCode, String parameterDetailTypeCode, String parameterName, String value );

    /**
     * This method is a convenience method for getting the inverse of failsRule(value). It returns the opposite of whatever
     * failsRule returns for the same value.
     * 
     * @param value - a value to check
     * 
     * @return inverse of failsRule
     */
    public boolean succeedsRule(Parameter parameter, String value);

    /**
     * Checks a given value against the rule based on the following guidelines: 1) If rule is inactive, the rule always passes 2) If
     * ruleOperator is 'A' If value is in set, rule passes else rule fails 3) If ruleOperator is 'D' if value is in set, rule fails
     * else rule passes
     * 
     * @param value - value to check
     * 
     * @return boolean indicating the rule success
     */
    public boolean failsRule(Parameter parameter, String value);

    /**
     * @return the error key for the operator
     */
    public String getErrorMessageKey( Parameter parameter );
    
    /**
     * Creates a rule that is the logical AND of the given rules. The created rule succeeds where all of the given rules would
     * succeed, and fails where any of the given rules would fail. Using this single equivalent rule can provide the user with a
     * friendly, consistent error message, instead of inconsistent error messages from applying multiple separate rules to the same
     * property. The name lists the component rules, to help with maintenance.
     * 
     * @param parameters
     * @return a single equivalent rule
     */
    public Parameter mergeParameters( Parameter...parameters );
    public boolean isUsable( Parameter parameter );
    /**
     * @return whether ruleOperator is 'A'
     */
    public boolean isAllowedRule( Parameter parameter );
    /**
     * @return whether ruleOperator is 'D'
     */
    public boolean isDeniedRule( Parameter parameter );
    
    public List<Parameter> getParametersByDetailType( String namespaceCode, String parameterDetailTypeCode );
    public Map<String,Parameter> getParametersByDetailTypeAsMap( String namespaceCode, String parameterDetailTypeCode );

    /**
     * Evaluates a constrained parameter.  This is a parameter whose value looks like:
     * <code>B=1234,5678;C=ABCD,DEFG</code>
     * It parses the string and checks if the value matches the set of values cooresponding to the constrainingValue.  
     * (I.e., in the example above, if the constrainingValue was "B", then the value would have to be either "1234" or "5678" 
     * 
     * @param constraint Parameter object acting as a constraint.
     * @param constrainingValue The value to test against which will determine the portion of the parameter against which to test the value.
     * @param value The value to be tested against the constraint.
     * @return
     */
    public boolean evaluateConstrainedParameter( Parameter constraint, String constrainingValue, String value );    
    

    public boolean evaluateConstrainedParameter( String namespaceCode, String parameterDetailTypeCode, String parameterName, String constrainingValue, String value );
    public boolean evaluateConstrainedParameter( String namespaceCode, String parameterDetailTypeCode, String allowedValuesParameterName, String disallowedValuesParameterName, String constrainingValue, String value );
    public boolean evaluateConstrainedParameter( Parameter allowedValuesParameter, Parameter disallowedValuesParameter, String constrainingValue, String value );
    
    /**
     * Gets the list of values within a constraint parameter for the given constraining value.  See the 
     * evaluateConstrainedParameter method for more information.
     * 
     * @param constraint
     * @param constrainingValue
     * @return
     */
    public List<String>getConstrainedValues( Parameter constraint, String constrainingValue );
    public List<String>getConstrainedValues( String namespaceCode, String parameterDetailTypeCode, String parameterName, String constrainingValue );
    
    
}
