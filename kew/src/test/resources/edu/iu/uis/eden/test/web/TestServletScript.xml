<!-- Test script for script framework testing purposes.
     It simply GETs an initial page from the TestServlet, sending some params,
     then POSTs to that page using some of the values it retrieved from the initial
     response -->
<script>
  <!-- load the expected output -->
  <variable name="AFTER_GET" value="res:/edu/iu/uis/eden/test/web/TestServletAfterGet.html" filters="CANONICALIZE"/>
  <variable name="AFTER_POST" value="res:/edu/iu/uis/eden/test/web/TestServletAfterPost.html" filters="CANONICALIZE"/>

  <user>quickstart</user>

  <!-- get the initial page -->

  <!-- set parameters for our next request -->
  <parameters>
    <param name="color">green</param>
    <param name="shape">square</param>
  </parameters>

  <submit/>

  <!-- print the response output -->
  <echo variable="RESPONSE.OUTPUT"/>
  <!-- verify that it is what we expected -->
  <assert actual="RESPONSE.FILTERED_OUTPUT" expected="var:AFTER_GET"/>

  <!-- test that certain meta data are defined in the response
       (in this case, namely, the ones we sent in the request) -->
  <assert actual="RESPONSE.color" expected="green"/>
  <assert actual="RESPONSE.shape" expected="square"/>
  <assert actual="RESPONSE.persist_num" regex="[0-9]+"/>

  <!-- now let's define a (local) variable from the value in the response -->
  <variable name="TheRandomNumber" value="var:RESPONSE.random_number"/>
  <!-- ... and print it out -->
  <echo variable="TheRandomNumber"/>

  <!-- let's also grab the field we want to persist -->
  <variable name="persist_num" value="var:RESPONSE.persist_num"/>
  <!-- ... and print it out -->
  <echo variable="persist_num"/>


  <!-- set parameters for our next request -->
  <!-- if we had specified retain="true" here, we'd have to
       explicitly use overwrite="true" to overwrite parameters we did not want to append new values on, but
       instead overwrite.  By default retain is false, and the map is cleared, so we don't have to be concerned
       about this.  Retain is most useful when you want to keep parameters you have already defined so that
       you don't have to tediously define them all again on each request.  -->
  <parameters>
    <param name="color">red</param>
    <param name="shape">triangle</param>
    <!-- you may have noticed we've used several names for this value.  that is to demonstrate it is
         possible.  Setting a local variable with a variable parsed from the response is not strictly
         necessary as the response variables are all accessible through RESPONSE.<variablename>.  We
         could have simply put variable="RESPONSE.random_number" here. -->
    <param name="TheRandomNumberWeGotFromTheInitialRequest" variable="TheRandomNumber"/>
    <param name="persist_num" variable="persist_num"/>
  </parameters>

  <!-- ok so now we've "edited" the color and shape fields, and have sent along the initial random number
       as well as the field we want to persist.  Let's use POST method.  This really doesn't make any difference
       since our servlet is so trivial, but it "simulates" actually submitting a form through POST -->
  <submit method="POST"/>

  <!-- print the response output -->
  <echo variable="RESPONSE.OUTPUT"/>
  <!-- verify that it is what we expected -->
  <assert actual="RESPONSE.FILTERED_OUTPUT" expected="var:AFTER_POST"/>

  <!-- now let's check some of that meta data again -->
  <assert actual="RESPONSE.color" expected="red"/>
  <assert actual="RESPONSE.shape" expected="triangle"/>
  <!-- verify that the 'persist_num' we got back was the one we retrieved from the
       initial response, and sent on the second response! (hence, it was persistent accross requests) -->
  <assert actual="RESPONSE.persist_num" expected="var:persist_num"/>
  <!-- also verify that the custom param we sent based on the initial random number got echoed back -->
  <assert actual="RESPONSE.TheRandomNumberWeGotFromTheInitialRequest" expected="var:TheRandomNumber"/>

  <!-- that's all folks -->
</script>