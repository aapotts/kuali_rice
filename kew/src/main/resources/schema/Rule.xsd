<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:c="ns:workflow/common"
        xmlns:rc="ns:workflow/Rule"
        targetNamespace="ns:workflow/Rule"
        attributeFormDefault="unqualified"
        elementFormDefault="qualified">

  <annotation>
    <documentation>
      Copyright 2005-2006 The Kuali Foundation.
 

      Licensed under the Educational Community License, Version 1.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
      http://www.opensource.org/licenses/ecl1.php
 
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    </documentation>
  </annotation>

  <annotation>
    <documentation xml:lang="en">
      Rule Content schema
    </documentation>
  </annotation>

  <import namespace="ns:workflow/common" schemaLocation="resource:common"/>

  <element name="rules">
    <complexType>
      <sequence>
      	<element name="routeGroup" type="boolean" minOccurs="0" maxOccurs="1">
      		<annotation>
      			<documentation>
      			 The user or workgroup has been assigned to the routing path.
      			</documentation>
      		</annotation>
      	</element>
        <element name="rule" type="rc:RuleType" minOccurs="0" maxOccurs="unbounded">
        	<annotation>
        		<documentation>
        		 A set of rule(s).
        		</documentation>
        	</annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <!-- Rule type is used both at the top level, and within delegations.  It seems like
       it is fully recursive, but I don't see any examples of delagate rules themselves
       having delegates.  Delegate rules have an additional "delegationType" element -->
  <complexType name="RuleType">
    <!-- samples show different ordering, so just using 'all' here -->
    <sequence>
      <element name="name" type="c:ShortStringType" minOccurs="0"/>
      <element name="documentType" type="c:ShortStringType">
      	<annotation>
      		<documentation>
      		 Name of the document type under the rule.
      		</documentation>
      	</annotation>
      </element>
      <element name="ruleTemplate" type="c:ShortStringType">
      	<annotation>
      		<documentation>
      		 The rule template applies to the routing nodes.
      		</documentation>
      	</annotation>
      </element>
	  
	  <element name="description" type="c:LongStringType">
	  	<annotation>
	  		<documentation>
	  		 Define the functions of the rule type.
	  		</documentation>
	  	</annotation>
	  </element>
	        
      <element name="ignorePrevious" type="boolean" minOccurs="0">
      	<annotation>
      		<documentation>
      		 An indicator to define if previous routing for approval will be ignored.
      		</documentation>
      	</annotation>
      </element>
      
      <element name="ruleExtensions" type="rc:RuleExtensionsType" minOccurs="0">
      	<annotation>
      		<documentation>
      		 An added in definition of a rule template that extend beyond the base attributes to differentiate the template.
      		</documentation>
      	</annotation>
      </element>

      <element name="responsibilities" type="rc:ResponsibilitiesType">
      	<annotation>
      		<documentation>
      		 Must have at least one responsibility assign to a user or workgroup.
      		</documentation>
      	</annotation>
      </element>
    </sequence>
  </complexType>

<!-- I guess you don't really need to have a definition in the ruleExtensions element
           	 whether container elements should be allowed to be empty or just not specified at all
           	 I guess is a stylistic issue.     -->
  <complexType name="RuleExtensionsType">
    <sequence>
      <element name="ruleExtension" type="rc:RuleExtensionType" minOccurs="0" maxOccurs="unbounded">
      	<annotation>
      		<documentation>
      		 A modifiable rule extension parameter in the system.		
      		</documentation>
      	</annotation>
      </element>
    </sequence>
  </complexType>

  <complexType name="RuleExtensionType">
    <sequence>
      <element name="attribute" type="c:ShortStringType">
      	<annotation>
      		<documentation>
      		 The name of the RuleAttribute from which this extension is derived.
      		</documentation>
      	</annotation>
      </element>
      <element name="ruleTemplate" type="c:ShortStringType">
      	<annotation>
      		<documentation>
      		  The rule template applies to the routing nodes.
      		</documentation>
      	</annotation>
      </element>
      <!-- TODO: maybe consolidate some common idioms accross all schemas, like:
           <param><param-name/><param-value/></param>... -->
      <element name="ruleExtensionValues" type="rc:RuleExtensionValuesType" minOccurs="0">
      	<annotation>
      		<documentation>
      		 A modifiable rule extension value parameter in the syste..
      		</documentation>
      	</annotation>
      </element>
      
    </sequence>
  </complexType>

  <complexType name="RuleExtensionValuesType">
    <sequence>
      <element name="ruleExtensionValue" type="rc:RuleExtensionValueType" minOccurs="0" maxOccurs="unbounded">
      	<annotation>
      		<documentation>
      		 A modifiable rule extension value pararmeter in the system.
      		</documentation>
      	</annotation>
      </element>
    </sequence>
  </complexType>

  <complexType name="RuleExtensionValueType">
    <sequence>
      <element name="key" type="c:ShortStringType">
      	<annotation>
      		<documentation>
      		 The key of the rule extension value which identifies the extension data.
      		</documentation>
      	</annotation>
      </element>
      <element name="value" type="c:MayBeEmptyShortStringType">
      	<annotation>
      		<documentation>
      		 Value of the rule extension value type.
      		</documentation>
      	</annotation>
      </element>
    </sequence>
  </complexType>

  <simpleType name="DelegationType">
    <restriction base="string">
      <!-- Primary -->
      <enumeration value="P"/>
      <!-- Secondary -->
      <enumeration value="S"/>
    </restriction>
  </simpleType>

  <complexType name="DelegateRuleType">
    <complexContent>
      <extension base="rc:RuleType">
        <sequence>
          <element name="delegationType" type="rc:DelegationType" minOccurs="1">
          	<annotation>
          		<documentation>
  				 The RuleType subclass used only under delegations, which adds
       			 a 'delegationType' element.          
          		</documentation>
          	</annotation>
          </element>
        </sequence>
      </extension>
    </complexContent>
  </complexType>

  <complexType name="ResponsibilitiesType">

    <sequence>
      <element name="responsibility" type="rc:ResponsibilityType" minOccurs="1" maxOccurs="unbounded">
      	<annotation>
      		<documentation>
      	     Must have at least one responsibility.
      		</documentation>
      	</annotation>
      </element>
    </sequence>
  </complexType>

  <simpleType name="ApprovePolicy">
    <restriction base="string">
      <!-- first -->
      <enumeration value="F"/>
      <!-- all -->
      <enumeration value="A"/>
    </restriction>
  </simpleType>

  <simpleType name="ActionRequestedType">
    <restriction base="string">
      <!-- acknowledge -->
      <enumeration value="K"/>
      <!-- FYI -->
      <enumeration value="F"/>
      <!-- approve -->
      <enumeration value="A"/>
      <!-- complete -->
      <enumeration value="C"/>
    </restriction>
  </simpleType>

  <complexType name="ResponsibilityType">
    <sequence>
      <choice>
        <element name="user" type="c:ShortStringType">
        	<annotation>
        		<documentation>
        		 Assign the responsibility to one of user.
        		</documentation>
        	</annotation>
        </element>
        
        <element name="workgroup" type="c:ShortStringType">
            <annotation>
        		<documentation>
        		 Assign the responsibility to one of workgroup.
        		</documentation>
        	</annotation>
        </element>
        
        <element name="role" type="c:ShortStringType">
           	<annotation>
        		<documentation>
        		 Assign the responsibility to one of the role.
        		</documentation>
        	</annotation>
        </element>
      </choice>
      
      <element name="approvePolicy" type="rc:ApprovePolicy" default="F" minOccurs="0">
      	<annotation>
      		<documentation>
      	     Service implementation uses F(FYI) as default, so match that here.
      		</documentation>
      	</annotation>
      </element>
      <!-- XXX: actionRequested and priority appear to be semantically, not syntactically,
           enforced, depending on delegation (not clear on how this works from the code:
           they are inherited FROM the delegates not BY the delegates right?) -->
      <element name="actionRequested" type="rc:ActionRequestedType" minOccurs="0"/>
      <element name="priority" type="integer" minOccurs="0"/>
      <!-- is this fully recursive, or only applicable to the top-level ResponsibilityType? -->
      <element name="delegations" type="rc:DelegationsType" minOccurs="0"/>
    </sequence>
  </complexType>

<!-- I guess you don't really need to have a definition in the delegations element
           	 whether container elements should be allowed to be empty or just not specified at all
           	 I guess is a stylistic issue. -->
  <complexType name="DelegationsType">
    <sequence>
      <element name="rule" type="rc:DelegateRuleType" minOccurs="0" maxOccurs="unbounded">
      	<annotation>
      		<documentation>
      		 A set of rule(s) apply for the delegations type.
          	</documentation>
      	</annotation>
      </element>
    </sequence>
  </complexType>
</schema>