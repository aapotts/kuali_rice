<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2013 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<xsd:schema xmlns="http://www.kuali.org/krad/schema" xmlns:spring="http://www.springframework.org/schema/beans"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            attributeFormDefault="unqualified" elementFormDefault="qualified"
            targetNamespace="http://www.kuali.org/krad/schema"
            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
  <xsd:import namespace="http://www.springframework.org/schema/beans"/>
  <xsd:include schemaLocation="krad-baseTypes.xsd"/>
  <xsd:complexType name="verticalCheckboxesControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldsetClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Get fieldsetClasses which are the classes that will be applied to this component's fieldset when generated]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="options">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.core.api.util.KeyValue">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="delimiter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Delimiter string to be rendered between the checkbox group options

 
 defaults to none.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldsetClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
              <![CDATA[Get fieldsetClasses which are the classes that will be applied to this component's fieldset when generated]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="delimiter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en"><![CDATA[Delimiter string to be rendered between the checkbox group options

 
 defaults to none.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxGroupControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="iFrame-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="frameborder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[The IFrame's frame border]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="height" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[The IFrame's height]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="source" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[The IFrame's source]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="frameborder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
              <![CDATA[The IFrame's frame border]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="height">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
              <![CDATA[The IFrame's height]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="source">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Iframe" xml:lang="en">
              <![CDATA[The IFrame's source]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="accordionGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="accordionWidget"
                       type="org.kuali.rice.krad.uif.widget.Accordion">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Gets the widget which contains any configuration for the accordion widget component used to render
 this AccordionGroup]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="accordionWidget">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Gets the widget which contains any configuration for the accordion widget component used to render
 this AccordionGroup]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.AccordionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="conditionalCollectionFilter-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="expression" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.ELCollectionFilter" xml:lang="en"><![CDATA[Expression that will be evaluated for each line to determine whether the line should be filtered

 
 If expression passes, the line will remain in the collection, otherwise be filtered out. The expression given
 should evaluate to a boolean
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="expression">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.ELCollectionFilter" xml:lang="en"><![CDATA[Expression that will be evaluated for each line to determine whether the line should be filtered

 
 If expression passes, the line will remain in the collection, otherwise be filtered out. The expression given
 should evaluate to a boolean
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="space-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Space" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tabs-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tabs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="action-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Client side javascript to be executed when this actionField is clicked

 
 This overrides the default action for this Action so the method
 called must explicitly submit, navigate, etc. through js, if necessary.
 In addition, this js occurs AFTER onClickScripts set on this field, it
 will be the last script executed by the click event. Sidenote: This js is
 always called after hidden actionParameters and methodToCall methods are
 written by the js to the html form.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="errorCallback" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the script which will be invoked when the action fails due to problems in the ajax call or
 the return of an incident report

 
 The errorCallback can carry out custom logic after a failed ajax submission. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleFailedUpdate(responseContents);'
 

 
 The errorCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionImage" type="org.kuali.rice.krad.uif.element.Image">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Image to use for the action

 
 When the action image component is set (and render is true) the image will be
 used to present the action as opposed to the default (input submit). For
 action link templates the image is used for the link instead of the
 action link text
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Label text for the action

 
 The label text is used by the template renderers to give a human readable
 label for the action. For buttons this generally is the button text,
 while for an action link it would be the links displayed text
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionImagePlacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="focusOnIdAfterSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The element to place focus on in the new page after the new page
 is retrieved.

 The following are allowed:
 
 
-A valid element id
 
-"FIRST" will focus on the first visible input element on the form
 
-"SELF" will result in this Action being focused (action bean defaults to "SELF")
 
-"LINE_FIRST" will result in the first input of the collection line to be focused (if available)
 
-"NEXT_INPUT" will result in the next available input that exists after this Action to be focused
 (only if this action still exists on the page)
 
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ajaxSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[When this property is set to true it will submit the form using Ajax instead of the browser submit. Will default
 to updating the page contents]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="successCallback" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the script which will be invoked on a successful ajax call

 
 The successCallback can carry out custom logic after a successful ajax submission has been made. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleSuccessfulUpdate(responseContents);'
 

 
 The successCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="loadingMessageText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Gets the loading message used by action's blockUI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="jumpToIdAfterSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preSubmitCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the script which needs to be invoked before the form is submitted

 
 The preSubmitCall can carry out custom logic for the action before the submit occurs. The value should
 be given as one or more lines of script and should return a boolean. If false is returned from the call,
 the submit is not carried out. Furthermore, the preSubmitCall can refer to the request object through the
 variable 'kradRequest' or 'this'. This gives full access over the request for doing such things as
 adding additional data
 

 
 Examples 'return doFunction(kradRequest);', 'var valid=true;return valid;'
 

 
 The preSubmit call will be invoked both for ajax and non-ajax submits
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="performClientSideValidation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the form data should be validated on the client side

 return true if validation should occur, false otherwise]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ajaxReturnType" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the return type for the ajax call

 
 The ajax return type indicates how the response content will be handled in the client. Typical
 examples include updating a component, the page, or doing a redirect.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Id for the component that should be refreshed after the action completes

 
 Either refresh id or refresh property name can be set to configure the component that should
 be refreshed after the action completes. If both are blank, the page will be refreshed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[If the action field is disabled, gives a reason for why which will be displayed as a tooltip
 on the action field (button)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Property name for the org.kuali.rice.krad.uif.field.DataField that should be refreshed after the action
 completes

 
 Either refresh id or refresh property name can be set to configure the component that should
 be refreshed after the action completes. If both are blank, the page will be refreshed
 

 
 Property name will be adjusted to use the default binding path unless it contains the form prefix
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="jumpToNameAfterSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The name to jump to in the next page, the element with this name will be
 jumped to automatically when the new page is retrieved after a submit.
 Passing in nothing for both jumpToIdAfterSubmit and jumpToNameAfterSubmit
 will result in this Action being jumped to by default if it is
 present on the new page. WARNING: jumpToIdAfterSubmit always takes
 precedence over jumpToNameAfterSubmit, if set.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigateToPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[For an Action that is part of a
 NavigationGroup</code, the navigate to page id can be set to
 configure the page that should be navigated to when the action is
 selected

 
 Support exists in the UifControllerBase for handling
 navigation between pages
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionParameters">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Parameters that should be sent when the action is invoked

 
 Action renderer will decide how the parameters are sent for the action
 (via script generated hiddens, or script parameters, ...)
 

 
 Can be set by other components such as the CollectionGroup
 to provide the context the action is in (such as the collection name and
 line the action applies to)
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayResponseInLightBox" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Indicates if the action response should be displayed in a lightbox]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableBlocking" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether blocking for the action should be disabled

 
 By default when an action is invoked part of the page or the entire window is blocked until
 the action completes. If this property is set to true the blocking will not be displayed.
 

 
 Currently if an action returns a file download, this property should be set to true. If not, the blocking
 will never get unblocked (because the page does not get notification a file was downloaded)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionEvent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Name of the event that will be set when the action is invoked

 
 Action events can be looked at by the view or components in order to render differently depending on
 the action requested.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Name of the method that should be called when the action is selected

 
 For a server side call (clientSideCall is false), gives the name of the
 method in the mapped controller that should be invoked when the action is
 selected. For client side calls gives the name of the script function
 that should be invoked when the action is selected
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalSubmitData">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Map of additional data that will be posted when the action is invoked

 
 Each entry in this map will be sent as a request parameter when the action is chosen. Note this in
 addition to the form data that is sent. For example, suppose the model contained a property named
 number and a boolean named showActive, we can send values for this properties by adding the following
 entries to this map:
 {'number':'a13', 'showActive', 'true'}
 

 
 The additionalSubmitData map is different from the actionParameters map. All name/value pairs given as
 actionParameters populated the form map actionParameters. While name/value pair given in additionalSubmitData
 populate different form (model) properties
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="performDirtyValidation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[Indicates whether the action (input or button) is disabled (doesn't allow interaction)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="actionScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Client side javascript to be executed when this actionField is clicked

 
 This overrides the default action for this Action so the method
 called must explicitly submit, navigate, etc. through js, if necessary.
 In addition, this js occurs AFTER onClickScripts set on this field, it
 will be the last script executed by the click event. Sidenote: This js is
 always called after hidden actionParameters and methodToCall methods are
 written by the js to the html form.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errorCallback">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the script which will be invoked when the action fails due to problems in the ajax call or
 the return of an incident report

 
 The errorCallback can carry out custom logic after a failed ajax submission. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleFailedUpdate(responseContents);'
 

 
 The errorCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionImage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Image to use for the action

 
 When the action image component is set (and render is true) the image will be
 used to present the action as opposed to the default (input submit). For
 action link templates the image is used for the link instead of the
 action link text
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Label text for the action

 
 The label text is used by the template renderers to give a human readable
 label for the action. For buttons this generally is the button text,
 while for an action link it would be the links displayed text
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionImagePlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="focusOnIdAfterSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The element to place focus on in the new page after the new page
 is retrieved.

 The following are allowed:
 
 
-A valid element id
 
-"FIRST" will focus on the first visible input element on the form
 
-"SELF" will result in this Action being focused (action bean defaults to "SELF")
 
-"LINE_FIRST" will result in the first input of the collection line to be focused (if available)
 
-"NEXT_INPUT" will result in the next available input that exists after this Action to be focused
 (only if this action still exists on the page)
 
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ajaxSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[When this property is set to true it will submit the form using Ajax instead of the browser submit. Will default
 to updating the page contents]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="successCallback">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the script which will be invoked on a successful ajax call

 
 The successCallback can carry out custom logic after a successful ajax submission has been made. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleSuccessfulUpdate(responseContents);'
 

 
 The successCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="loadingMessageText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
              <![CDATA[Gets the loading message used by action's blockUI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jumpToIdAfterSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preSubmitCall">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the script which needs to be invoked before the form is submitted

 
 The preSubmitCall can carry out custom logic for the action before the submit occurs. The value should
 be given as one or more lines of script and should return a boolean. If false is returned from the call,
 the submit is not carried out. Furthermore, the preSubmitCall can refer to the request object through the
 variable 'kradRequest' or 'this'. This gives full access over the request for doing such things as
 adding additional data
 

 
 Examples 'return doFunction(kradRequest);', 'var valid=true;return valid;'
 

 
 The preSubmit call will be invoked both for ajax and non-ajax submits
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="performClientSideValidation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether the form data should be validated on the client side

 return true if validation should occur, false otherwise]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ajaxReturnType">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Gets the return type for the ajax call

 
 The ajax return type indicates how the response content will be handled in the client. Typical
 examples include updating a component, the page, or doing a redirect.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Id for the component that should be refreshed after the action completes

 
 Either refresh id or refresh property name can be set to configure the component that should
 be refreshed after the action completes. If both are blank, the page will be refreshed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[If the action field is disabled, gives a reason for why which will be displayed as a tooltip
 on the action field (button)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Property name for the org.kuali.rice.krad.uif.field.DataField that should be refreshed after the action
 completes

 
 Either refresh id or refresh property name can be set to configure the component that should
 be refreshed after the action completes. If both are blank, the page will be refreshed
 

 
 Property name will be adjusted to use the default binding path unless it contains the form prefix
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jumpToNameAfterSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[The name to jump to in the next page, the element with this name will be
 jumped to automatically when the new page is retrieved after a submit.
 Passing in nothing for both jumpToIdAfterSubmit and jumpToNameAfterSubmit
 will result in this Action being jumped to by default if it is
 present on the new page. WARNING: jumpToIdAfterSubmit always takes
 precedence over jumpToNameAfterSubmit, if set.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigateToPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[For an Action that is part of a
 NavigationGroup</code, the navigate to page id can be set to
 configure the page that should be navigated to when the action is
 selected

 
 Support exists in the UifControllerBase for handling
 navigation between pages
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionParameters">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Parameters that should be sent when the action is invoked

 
 Action renderer will decide how the parameters are sent for the action
 (via script generated hiddens, or script parameters, ...)
 

 
 Can be set by other components such as the CollectionGroup
 to provide the context the action is in (such as the collection name and
 line the action applies to)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayResponseInLightBox">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
              <![CDATA[Indicates if the action response should be displayed in a lightbox]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableBlocking">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Indicates whether blocking for the action should be disabled

 
 By default when an action is invoked part of the page or the entire window is blocked until
 the action completes. If this property is set to true the blocking will not be displayed.
 

 
 Currently if an action returns a file download, this property should be set to true. If not, the blocking
 will never get unblocked (because the page does not get notification a file was downloaded)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionEvent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Name of the event that will be set when the action is invoked

 
 Action events can be looked at by the view or components in order to render differently depending on
 the action requested.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="methodToCall">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Name of the method that should be called when the action is selected

 
 For a server side call (clientSideCall is false), gives the name of the
 method in the mapped controller that should be invoked when the action is
 selected. For client side calls gives the name of the script function
 that should be invoked when the action is selected
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalSubmitData">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"><![CDATA[Map of additional data that will be posted when the action is invoked

 
 Each entry in this map will be sent as a request parameter when the action is chosen. Note this in
 addition to the form data that is sent. For example, suppose the model contained a property named
 number and a boolean named showActive, we can send values for this properties by adding the following
 entries to this map:
 {'number':'a13', 'showActive', 'true'}
 

 
 The additionalSubmitData map is different from the actionParameters map. All name/value pairs given as
 actionParameters populated the form map actionParameters. While name/value pair given in additionalSubmitData
 populate different form (model) properties
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="performDirtyValidation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Action" xml:lang="en">
              <![CDATA[Indicates whether the action (input or button) is disabled (doesn't allow interaction)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="datePicker-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.DatePicker" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="accordion-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="active" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The active option determines which accordion item is open by default.  Set "false" as the string for
 no item open, use zero-based index to select an item to be open by default.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="active">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Accordion" xml:lang="en"><![CDATA[The active option determines which accordion item is open by default.  Set "false" as the string for
 no item open, use zero-based index to select an item to be open by default.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="workflowProperty-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="path" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowProperty" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="path">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowProperty" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="maskFormatteSubString-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="maskCharacter" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterSubString" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="maskLength" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterSubString" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="maskCharacter">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterSubString" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="maskLength">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterSubString" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="lightBox-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="height" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addAppParms" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[Indicates that the light box link should have application parameters added to it.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lookupReturnByScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="height">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addAppParms">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en">
              <![CDATA[Indicates that the light box link should have application parameters added to it.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lookupReturnByScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.LightBox" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="fixedPointPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="scale" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="precision" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowNegative" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                  xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="scale">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="precision">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowNegative">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.FixedPointPatternConstraint"
                           xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="dropdownControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Vertical size of the control. This determines how many options can be
 seen without using the control scoll bar. Defaults to 1]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="multiple" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether multiple values can be selected. Defaults to false
 
 If multiple is set to true, the underlying property must be of Array type
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="options">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.core.api.util.KeyValue">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Vertical size of the control. This determines how many options can be
 seen without using the control scoll bar. Defaults to 1]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="multiple">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en"><![CDATA[Indicates whether multiple values can be selected. Defaults to false
 
 If multiple is set to true, the underlying property must be of Array type
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SelectControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="integerPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="onlyNegative" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowNegative" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="omitZero" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="onlyNegative">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowNegative">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="omitZero">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.IntegerPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="documentValuePathGroup-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="documentValues" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="documentCollectionPath" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="documentValues">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="documentCollectionPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DocumentValuePathGroup" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="keyValuesFinder-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="addBlankOption" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase" xml:lang="en">
            <![CDATA[Indicates whether a blank option should be included as a valid option]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="addBlankOption">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase" xml:lang="en">
          <![CDATA[Indicates whether a blank option should be included as a valid option]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="textAreaControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cols" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Number of columns the control should span (vertical length)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rows" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Number of rows the control should span (horizontal length)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="textExpand" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="watermarkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="cols">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
              <![CDATA[Number of columns the control should span (vertical length)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="rows">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
              <![CDATA[Number of rows the control should span (horizontal length)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="textExpand">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="watermarkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextAreaControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="fieldGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[List of Component instances contained in the nested group

 
 Convenience method for configuration to get the items List from the
 field's nested group
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="group" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[Group instance that is contained within in the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="group">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldGroup" xml:lang="en">
              <![CDATA[Group instance that is contained within in the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tree-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tree" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="labelSeparator-modifier-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="runPhase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="runCondition" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="runPhase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="runCondition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="order">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.LabelSeparateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="collectionDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.CollectionDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="componentConverter-modifier-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="runPhase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="runCondition" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentReplacementPrototype"
                   type="org.kuali.rice.krad.uif.component.Component">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en"><![CDATA[Prototype for the component replacement

 
 Each time the type to replace if found a new instance of the component
 prototype will be created and set as the new property value
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentTypeToReplace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en"><![CDATA[Type of component that should be replaced with an instance of the
 component prototype]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="runPhase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="runCondition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="order">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentReplacementPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en"><![CDATA[Prototype for the component replacement

 
 Each time the type to replace if found a new instance of the component
 prototype will be created and set as the new property value
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentTypeToReplace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en"><![CDATA[Type of component that should be replaced with an instance of the
 component prototype]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComponentConvertModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="stateMapping-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="stateNameMessageKeyMap">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="customClientSideValidationStates">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="statePropertyName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="stateNameMessageKeyMap">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="customClientSideValidationStates">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="statePropertyName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.state.StateMappingBase" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="alphaPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBrackets" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="lowerCase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowEquals" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowApostrophe" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPlus" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBackslash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowParenthesis" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowExclaimation" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPeriod" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAmpersand" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowComma" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPercent" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPound" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowQuestionMark" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="upperCase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowCurlyBraces" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowLessThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowGreaterThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAll" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAsterisk" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDoubleQuote" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAtSign" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowSemiColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowForwardSlash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowUnderscore" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDollar" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="allowBrackets">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowColon">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="lowerCase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowEquals">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowApostrophe">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPlus">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowBackslash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowParenthesis">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowExclaimation">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPeriod">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAmpersand">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowComma">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPercent">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPound">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowQuestionMark">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="upperCase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowCurlyBraces">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowLessThan">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowGreaterThan">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAll">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAsterisk">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDoubleQuote">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAtSign">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowSemiColon">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowForwardSlash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowUnderscore">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDollar">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="nodePrototype-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="labelPrototype" type="org.kuali.rice.krad.uif.element.Message">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataGroupPrototype" type="org.kuali.rice.krad.uif.container.Group">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="labelPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataGroupPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.NodePrototype" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="charsetPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="validChars" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="validChars">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                           xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CharsetPatternConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="quickFinder-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="multipleValuesSelect" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[Indicates whether a multi-values lookup should be requested]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="referencesToRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[List of property names on the model that should be refreshed when the lookup returns

 
 Note this is only relevant when the return by script option is not enabled (meaning the server will be invoked
 on the lookup return call)
 

 
 When a lookup return call is made (to return a result value) the controller refresh method will be invoked. If
 refresh properties are configured, a call to refresh those references from the database will be made. This is
 useful if the lookup returns a foreign key field and the related record is needed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lookupCriteriaEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the lookup criteria (search group) should be enabled on the invoked lookup view

 
 Setting the this to false will not display the lookup criteria but only the results. Therefore this is only
 useful when setting #getAutoSearch() to true and passing in criteria
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="quickfinderAction"
                       type="org.kuali.rice.krad.uif.element.Action">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Action component that is used to rendered for the field for invoking the quickfinder action (bringin up the
 lookup)

 
 Through the action configuration the image (or link, button) rendered for the quickfinder can be modified. In
 addition to other action component settings
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldConversions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Map that determines what properties from a result lookup row (if selected) will be returned to properties on
 the calling view

 
 The purpose of using the lookup is to search for a particular value and return that value to the form being
 completed. In order for the lookup framework to return the field back to us, we must specify the name of the
 field on the data object class whose value we need, and the name of the field on the calling view. Furthermore,
 we can choose to have the lookup return additional fields that populate other form fields or informational
 properties (see ‘Field Queries and Informational Properties’). These pairs of fields are known as
 ‘field conversions’.
 

 
 The fieldConversions property is a Map. Each entry represents a field that will be returned back from the
 lookup, with the entry key being the field name on the data object class, and the entry value being the field
 name on the calling view. It is helpful to think of this as a from-to mapping. Pulling from the data object
 field (map key) to the calling view field (map value).
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSearchButtons" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[TODO: not implemented currently]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lookupCollectionName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[For the case of multi-value lookup, indicates the collection that should be populated with
 the return results

 
 Note when the quickfinder is associated with a CollectionGroup, this property is
 set automatically from the collection name associated with the group
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lightBoxLookup" type="org.kuali.rice.krad.uif.widget.LightBox">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[LightBoxLookup widget for the field

 
 The light box lookup widget will change the lookup behaviour to open the
 lookup in a light box.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="autoSearch" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the search should be executed when first rendering the lookup view

 
 By default the lookup view is rendered, the user enters search values and executes the results. This flag can
 be set to true to indicate the search should be performed before showing the screen to the user. This is
 generally used when search criteria is being passed in as well
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lookupParameters">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Map that determines what properties from a calling view will be sent to properties on that are rendered
 for the lookup view's search fields (they can be hidden)

 
 When invoking a lookup view, we can pre-populate search fields on the lookup view with data from the view
 that called the lookup. The user can then perform the search with these values, or (if edited is allowed or
 the fields are not hidden) change the passed in values. When the lookup is invoked, the values for the
 properties configured within the lookup parameters Map will be pulled and passed along as values for the
 lookup view properties
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hideReturnLink" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the return links for lookup results should be rendered

 
 A lookup view can be invoked to allow the user to select a value (or set of values) to return back to the
 calling view. For single value lookups this is done with a return link that is rendered for each row. This
 return link can be disabled by setting this property to true
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClassName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Full class name the lookup should be provided for

 
 This is passed on to the lookup request for the data object the lookup should be rendered for. This is then
 used by the lookup framework to select the lookup view (if more than one lookup view exists for the same
 data object class name, the #getViewName() property should be specified to select the view to render).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="baseLookupUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Returns the URL for the lookup for which parameters will be added

 
 The base URL includes the domain, context, and controller mapping for the lookup invocation. Parameters are
 then added based on configuration to complete the URL. This is generally defaulted to the application URL and
 internal KRAD servlet mapping, but can be changed to invoke another application such as the Rice standalone
 server
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerBarEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[TODO: not implemented currently]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showMaintenanceLinks" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the maintenance action links should be rendered for the invoked lookup view

 
 If a maintenance view exists for the data object associated with the lookup view, the framework will add
 links to initiate a new maintenance document. This flag can be used to disable the rendering of these links
 

 
 Note this serves similar purpose to #getSuppressActions() but the intent is to only remove the
 maintenance links in this situation, not the complete actions column TODO: this is not in place!
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="suppressActions" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the maintenance actions (or others) are rendered on the invoked lookup view

 
 By default a lookup view will add an actions column for the result table that display maintenance links (in
 addition to a new link at the top of the page) if a maintenance action is available. Custom links can also be
 added to the action column as necessary. This flag can be set to true to suppress the rendering of the actions
 for the lookup call.
 

 
 An example of when this might be useful is when invoking a lookup to return a value to a value. Generally in
 these cases you don't want to the user going off to another view (such as the maintenance view)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supplementalActionsEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[TODO: not implemented currently]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlySearchFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Comma delimited String of property names on the lookup view that should be read only

 
 When requesting a lookup view, property names for fields that are rendered as search criteria can be marked
 as read-only. This is usually done when a lookup parameter for that property is sent in and the user should
 not be allowed to change the value
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[When multiple target lookup views exists for the same data object class, the view name can be set to
 determine which one to use

 
 When creating multiple lookup views for the same data object class, the view name can be specified for the
 different versions (for example 'simple' and 'advanced'). When multiple lookup views exist the view name must
 be sent with the data object class for the request. Note the view id can be alternatively used to uniquely
 identify the lookup view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="multipleValuesSelect">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
              <![CDATA[Indicates whether a multi-values lookup should be requested]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="referencesToRefresh">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[List of property names on the model that should be refreshed when the lookup returns

 
 Note this is only relevant when the return by script option is not enabled (meaning the server will be invoked
 on the lookup return call)
 

 
 When a lookup return call is made (to return a result value) the controller refresh method will be invoked. If
 refresh properties are configured, a call to refresh those references from the database will be made. This is
 useful if the lookup returns a foreign key field and the related record is needed.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lookupCriteriaEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the lookup criteria (search group) should be enabled on the invoked lookup view

 
 Setting the this to false will not display the lookup criteria but only the results. Therefore this is only
 useful when setting #getAutoSearch() to true and passing in criteria
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="quickfinderAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Action component that is used to rendered for the field for invoking the quickfinder action (bringin up the
 lookup)

 
 Through the action configuration the image (or link, button) rendered for the quickfinder can be modified. In
 addition to other action component settings
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldConversions">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Map that determines what properties from a result lookup row (if selected) will be returned to properties on
 the calling view

 
 The purpose of using the lookup is to search for a particular value and return that value to the form being
 completed. In order for the lookup framework to return the field back to us, we must specify the name of the
 field on the data object class whose value we need, and the name of the field on the calling view. Furthermore,
 we can choose to have the lookup return additional fields that populate other form fields or informational
 properties (see ‘Field Queries and Informational Properties’). These pairs of fields are known as
 ‘field conversions’.
 

 
 The fieldConversions property is a Map. Each entry represents a field that will be returned back from the
 lookup, with the entry key being the field name on the data object class, and the entry value being the field
 name on the calling view. It is helpful to think of this as a from-to mapping. Pulling from the data object
 field (map key) to the calling view field (map value).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableSearchButtons">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
              <![CDATA[TODO: not implemented currently]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lookupCollectionName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[For the case of multi-value lookup, indicates the collection that should be populated with
 the return results

 
 Note when the quickfinder is associated with a CollectionGroup, this property is
 set automatically from the collection name associated with the group
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lightBoxLookup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[LightBoxLookup widget for the field

 
 The light box lookup widget will change the lookup behaviour to open the
 lookup in a light box.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="autoSearch">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the search should be executed when first rendering the lookup view

 
 By default the lookup view is rendered, the user enters search values and executes the results. This flag can
 be set to true to indicate the search should be performed before showing the screen to the user. This is
 generally used when search criteria is being passed in as well
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lookupParameters">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Map that determines what properties from a calling view will be sent to properties on that are rendered
 for the lookup view's search fields (they can be hidden)

 
 When invoking a lookup view, we can pre-populate search fields on the lookup view with data from the view
 that called the lookup. The user can then perform the search with these values, or (if edited is allowed or
 the fields are not hidden) change the passed in values. When the lookup is invoked, the values for the
 properties configured within the lookup parameters Map will be pulled and passed along as values for the
 lookup view properties
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="hideReturnLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the return links for lookup results should be rendered

 
 A lookup view can be invoked to allow the user to select a value (or set of values) to return back to the
 calling view. For single value lookups this is done with a return link that is rendered for each row. This
 return link can be disabled by setting this property to true
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataObjectClassName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Full class name the lookup should be provided for

 
 This is passed on to the lookup request for the data object the lookup should be rendered for. This is then
 used by the lookup framework to select the lookup view (if more than one lookup view exists for the same
 data object class name, the #getViewName() property should be specified to select the view to render).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="baseLookupUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Returns the URL for the lookup for which parameters will be added

 
 The base URL includes the domain, context, and controller mapping for the lookup invocation. Parameters are
 then added based on configuration to complete the URL. This is generally defaulted to the application URL and
 internal KRAD servlet mapping, but can be changed to invoke another application such as the Rice standalone
 server
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerBarEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
              <![CDATA[TODO: not implemented currently]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="showMaintenanceLinks">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the maintenance action links should be rendered for the invoked lookup view

 
 If a maintenance view exists for the data object associated with the lookup view, the framework will add
 links to initiate a new maintenance document. This flag can be used to disable the rendering of these links
 

 
 Note this serves similar purpose to #getSuppressActions() but the intent is to only remove the
 maintenance links in this situation, not the complete actions column TODO: this is not in place!
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="suppressActions">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Indicates whether the maintenance actions (or others) are rendered on the invoked lookup view

 
 By default a lookup view will add an actions column for the result table that display maintenance links (in
 addition to a new link at the top of the page) if a maintenance action is available. Custom links can also be
 added to the action column as necessary. This flag can be set to true to suppress the rendering of the actions
 for the lookup call.
 

 
 An example of when this might be useful is when invoking a lookup to return a value to a value. Generally in
 these cases you don't want to the user going off to another view (such as the maintenance view)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supplementalActionsEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en">
              <![CDATA[TODO: not implemented currently]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlySearchFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[Comma delimited String of property names on the lookup view that should be read only

 
 When requesting a lookup view, property names for fields that are rendered as search criteria can be marked
 as read-only. This is usually done when a lookup parameter for that property is sent in and the user should
 not be allowed to change the value
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.QuickFinder" xml:lang="en"><![CDATA[When multiple target lookup views exists for the same data object class, the view name can be set to
 determine which one to use

 
 When creating multiple lookup views for the same data object class, the view name can be specified for the
 different versions (for example 'simple' and 'advanced'). When multiple lookup views exist the view name must
 be sent with the data object class for the request. Note the view id can be alternatively used to uniquely
 identify the lookup view
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="documentView-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader"
                       type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="documentClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Gets the document class]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayTopicFieldInNotes" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="page" type="org.kuali.rice.krad.uif.container.PageGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateServerSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathToConcreteClassMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitleDisplayOption" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="attachmentTypesValuesFinderClass" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formPostUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Namespace code the view should be associated with

 
 The namespace code is used within the framework in such places as permission checks and parameter
 retrieval
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Provide a list of dialog groups associated with this view]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitlePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuLink" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                       type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewIndex" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI"
                       type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderForm" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteFYI" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateClientSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController"
                       type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter"
                       type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteAttachments" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderBreadcrumbsInView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbs" type="org.kuali.rice.krad.uif.widget.BreadCrumbs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preloadPoolSize" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuGroupName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="applicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="documentClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Gets the document class]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayTopicFieldInNotes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperService">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="page">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateServerSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectPathToConcreteClassMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionFlags">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitleDisplayOption">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="attachmentTypesValuesFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formPostUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="authorizer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitlePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="theme">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigationBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderForm">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteFYI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateClientSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="presentationController">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteAttachments">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderBreadcrumbsInView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editModes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growls">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preloadPoolSize">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuGroupName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.DocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="inputField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="attributeQuery"
                       type="org.kuali.rice.krad.uif.field.AttributeQuery">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Attribute query instance configured for this field to dynamically pull information back for
 updates other fields or providing messages

 
 If field attribute query is not null, associated event script will be generated to trigger the
 query from the UI. This will invoke the AttributeQueryService to
 execute the query and return an instance of AttributeQueryResult that is then
 read by the script to update the UI. Typically used to update informational property values or
 other field values
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validCharactersConstraint"
                       type="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[The ValidCharactersConstraint that applies to this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Returns the alternate display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Help configuration object for the datafield

 
 External help information can be configured for the datafield. The
 Help object can the configuration for rendering a link to
 that help information.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Returns the additional display value.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValues">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="constraintText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Text that display a restriction on the value a field can hold

 
 For example when the value must be a valid format (phone number, email), certain length, min/max value and
 so on this text can be used to indicate the constraint to the user. Generally displays with the control so
 it is visible when the user tabs to the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Get the class of the optionsFinder being used by this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryObjectEntry" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[List of MustOccurConstraint that apply to this InputField]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="constraintMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Message field that displays constraint text

 
 This message field can be configured to for adjusting how the constrain text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="suggest" type="org.kuali.rice.krad.uif.widget.Suggest">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Suggest box widget for the input field

 
 If enabled (by render flag), as the user inputs data into the
 fields control a dynamic query is performed to provide the user
 suggestions on values which they can then select
 

 
 Note the Suggest widget is only valid when using a standard TextControl
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalHiddenPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinder"
                       type="org.kuali.rice.krad.keyvalues.KeyValuesFinder">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Instance of KeyValuesFinder that should be invoked to
 provide a List of values the field can have. Generally used to provide
 the options for a multi-value control or to validate the submitted field
 value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Instructional text that display an explanation of the field usage

 
 Text explaining how to use the field, including things like what values should be selected
 in certain cases and so on (instructions)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="escapeHtmlInPropertyValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Field that contains the messages (errors) for the input field. The
 ValidationMessages holds configuration on associated messages along
 with information on rendering the messages in the user interface]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="quickfinder" type="org.kuali.rice.krad.uif.widget.QuickFinder">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Lookup finder widget for the field

 
 The quickfinder widget places a small icon next to the field that allows
 the user to bring up a search screen for finding valid field values. The
 Widget instance can be configured to point to a certain
 LookupView, or the framework will attempt to associate the
 field with a lookup based on its metadata (in particular its
 relationships in the model)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyNamesForAdditionalDisplay" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Maximum number of characters the input field value is allowed to have

 
 The maximum length determines the maximum allowable length of the value
 for data entry editing purposes.  The maximum length is inclusive and can
 be smaller or longer than the actual control size.  The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 maximum length constraint in which digits and symbols are counted).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacementPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inclusiveMax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The inclusive maximum value for numeric or date field.

 
 The inclusiveMax element determines the maximum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyMask" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addHiddenWhenReadOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inquiry" type="org.kuali.rice.krad.uif.widget.Inquiry">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Inquiry widget for the field

 
 The inquiry widget will render a link for the field value when read-only
 that points to the associated inquiry view for the field. The inquiry can
 be configured to point to a certain InquiryView, or the
 framework will attempt to associate the field with a inquiry based on its
 metadata (in particular its relationships in the model)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpSummary" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Summary help text for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value (if set)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="control" type="org.kuali.rice.krad.uif.control.Control">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Control instance that should be used to input data for the
 field

 
 When the field is editable, the control will be rendered so the user can
 input a value(s). Controls typically are part of a Form and render
 standard HTML control elements such as text input, select, and checkbox
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffixPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyEditor" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="simpleConstraint"
                       type="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Simple constraints for the input field

 
 A simple constraint which store the values for constraints such as required,
 min/max length, and min/max value.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipOfComponent" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValueFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maskFormatter"
                       type="org.kuali.rice.krad.datadictionary.mask.MaskFormatter">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Minimum number of characters the input field value needs to be

 
 The minimum length determines the minimum required length of the value for
 data entry editing purposes.  The minimum length is inclusive. The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 minimum length requirement in which digits and symbols are counted).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="uppercaseValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Perform uppercase flag for this field to force input to uppercase.

 
 It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'
 which will automatically change any text input into the field to uppercase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dependencyConstraints">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[List of PrerequisiteConstraint that apply to this InputField]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="caseConstraint"
                       type="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[The CaseConstraint that applies to this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="exclusiveMin" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The exclusive minimum value for numeric or date field.

 
 The exclusiveMin element determines the minimum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataType" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Gets the DataType of this InputField, note that DataType set to be date
 when this field is using a date picker with a TextControl and has not otherwise been
 explicitly set.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo"
                       type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryAttributeName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Message field that displays instructional text

 
 This message field can be configured to for adjusting how the instructional text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="attributeQuery">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Attribute query instance configured for this field to dynamically pull information back for
 updates other fields or providing messages

 
 If field attribute query is not null, associated event script will be generated to trigger the
 query from the UI. This will invoke the AttributeQueryService to
 execute the query and return an instance of AttributeQueryResult that is then
 read by the script to update the UI. Typically used to update informational property values or
 other field values
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validCharactersConstraint">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[The ValidCharactersConstraint that applies to this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Returns the alternate display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Help configuration object for the datafield

 
 External help information can be configured for the datafield. The
 Help object can the configuration for rendering a link to
 that help information.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Returns the additional display value.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="constraintText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Text that display a restriction on the value a field can hold

 
 For example when the value must be a valid format (phone number, email), certain length, min/max value and
 so on this text can be used to indicate the constraint to the user. Generally displays with the control so
 it is visible when the user tabs to the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optionsFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Get the class of the optionsFinder being used by this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryObjectEntry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="constraintMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Message field that displays constraint text

 
 This message field can be configured to for adjusting how the constrain text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="suggest">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Suggest box widget for the input field

 
 If enabled (by render flag), as the user inputs data into the
 fields control a dynamic query is performed to provide the user
 suggestions on values which they can then select
 

 
 Note the Suggest widget is only valid when using a standard TextControl
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalHiddenPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optionsFinder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Instance of KeyValuesFinder that should be invoked to
 provide a List of values the field can have. Generally used to provide
 the options for a multi-value control or to validate the submitted field
 value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Instructional text that display an explanation of the field usage

 
 Text explaining how to use the field, including things like what values should be selected
 in certain cases and so on (instructions)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="escapeHtmlInPropertyValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Field that contains the messages (errors) for the input field. The
 ValidationMessages holds configuration on associated messages along
 with information on rendering the messages in the user interface]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="quickfinder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Lookup finder widget for the field

 
 The quickfinder widget places a small icon next to the field that allows
 the user to bring up a search screen for finding valid field values. The
 Widget instance can be configured to point to a certain
 LookupView, or the framework will attempt to associate the
 field with a lookup based on its metadata (in particular its
 relationships in the model)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyNamesForAdditionalDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Maximum number of characters the input field value is allowed to have

 
 The maximum length determines the maximum allowable length of the value
 for data entry editing purposes.  The maximum length is inclusive and can
 be smaller or longer than the actual control size.  The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 maximum length constraint in which digits and symbols are counted).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacementPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inclusiveMax">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The inclusive maximum value for numeric or date field.

 
 The inclusiveMax element determines the maximum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyMask">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addHiddenWhenReadOnly">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inquiry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Inquiry widget for the field

 
 The inquiry widget will render a link for the field value when read-only
 that points to the associated inquiry view for the field. The inquiry can
 be configured to point to a certain InquiryView, or the
 framework will attempt to associate the field with a inquiry based on its
 metadata (in particular its relationships in the model)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helpSummary">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Summary help text for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value (if set)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="control">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Control instance that should be used to input data for the
 field

 
 When the field is editable, the control will be rendered so the user can
 input a value(s). Controls typically are part of a Form and render
 standard HTML control elements such as text input, select, and checkbox
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffixPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyEditor">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="simpleConstraint">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Simple constraints for the input field

 
 A simple constraint which store the values for constraints such as required,
 min/max length, and min/max value.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tooltipOfComponent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValueFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maskFormatter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Minimum number of characters the input field value needs to be

 
 The minimum length determines the minimum required length of the value for
 data entry editing purposes.  The minimum length is inclusive. The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 minimum length requirement in which digits and symbols are counted).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="uppercaseValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Perform uppercase flag for this field to force input to uppercase.

 
 It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'
 which will automatically change any text input into the field to uppercase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="caseConstraint">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[The CaseConstraint that applies to this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="exclusiveMin">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[The exclusive minimum value for numeric or date field.

 
 The exclusiveMin element determines the minimum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataType">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Gets the DataType of this InputField, note that DataType set to be date
 when this field is using a date picker with a TextControl and has not otherwise been
 explicitly set.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bindingInfo">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryAttributeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.InputField" xml:lang="en"><![CDATA[Message field that displays instructional text

 
 This message field can be configured to for adjusting how the instructional text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="routingAttribute-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="qualificationAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="qualificationAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RoutingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="componentBase-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentBase" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="spinnerControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="datePicker" type="org.kuali.rice.krad.uif.widget.DatePicker">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="spinner" type="org.kuali.rice.krad.uif.widget.Spinner">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Spinner widget that should decorate the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="textExpand" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="watermarkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="datePicker">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="spinner">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
              <![CDATA[Spinner widget that should decorate the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="textExpand">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="watermarkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.SpinnerControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="checkboxControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The value that will be submitted when the checkbox control is checked

 
 Value can be left blank, in which case the checkbox will submit a boolean value that
 will populate a boolean property. In cases where the checkbox needs to submit another value (for
 instance possibly in the checkbox group) the value can be set which will override the default.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="checkboxLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Returns the label text for this checkbox]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Gets the inlineComponents used by index in the checkboxLabel that has rich message component index tags]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richLabelMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the label if labelText is using rich message tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="value">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[The value that will be submitted when the checkbox control is checked

 
 Value can be left blank, in which case the checkbox will submit a boolean value that
 will populate a boolean property. In cases where the checkbox needs to submit another value (for
 instance possibly in the checkbox group) the value can be set which will override the default.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="checkboxLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
              <![CDATA[Returns the label text for this checkbox]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="richLabelMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the label if labelText is using rich message tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.CheckboxControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="fileControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.FileControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="reorderGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="reorderer" type="org.kuali.rice.krad.uif.widget.Reorderer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[Widget that will perform the reordering of the group's items client side]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="reorderer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[Widget that will perform the reordering of the group's items client side]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.ReorderingGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="growls-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="timeShown" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[The time growls are shown in milliseconds]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="position" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The position for the growls to appear in the window
 There are five options available: top-left, top-right, bottom-left, bottom-right, center.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sticky" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[If true, the growl will stick to the page until the user dismisses it]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="timeShown">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
              <![CDATA[The time growls are shown in milliseconds]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="position">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en"><![CDATA[The position for the growls to appear in the window
 There are five options available: top-left, top-right, bottom-left, bottom-right, center.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="sticky">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Growls" xml:lang="en">
              <![CDATA[If true, the growl will stick to the page until the user dismisses it]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="numericPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBrackets" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowEquals" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowApostrophe" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPlus" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBackslash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowParenthesis" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowExclaimation" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPeriod" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAmpersand" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowComma" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPercent" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPound" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowQuestionMark" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowCurlyBraces" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowLessThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowGreaterThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAll" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAsterisk" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDoubleQuote" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAtSign" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowSemiColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowForwardSlash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowUnderscore" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDollar" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="allowBrackets">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowColon">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowEquals">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowApostrophe">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPlus">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowBackslash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowParenthesis">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowExclaimation">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPeriod">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAmpersand">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowComma">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPercent">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPound">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowQuestionMark">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowCurlyBraces">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowLessThan">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowGreaterThan">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAll">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAsterisk">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDoubleQuote">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAtSign">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowSemiColon">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowForwardSlash">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowUnderscore">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDollar">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.NumericPatternConstraint"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="controlBase-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.ControlBase" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="groupValidationMessages-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayHeaderMessageSummary" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="errors" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The list of error messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalKeysToMatch" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[AdditionalKeysToMatch is an additional list of keys outside of the
 default keys that will be matched when messages are returned after a form
 is submitted. These keys are only used for displaying messages generated
 by the server and have no effect on client side validation error display.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[If true, error, warning, and info messages will be displayed (provided
 they are also set to display). Otherwise, no messages for this
 ValidationMessages container will be displayed (including ones set to display).
 This is a global display on/off switch for all messages.

 Other areas of the screen react to
 a display flag being turned off at a certain level, if display is off for a field, the next
 level up will display that fields full message text, and if display is off at a section the
 next section up will display those messages nested in a sublist.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="collapseAdditionalFieldLinkMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[When collapseAdditionalFieldLinkMessages is set to true, the messages generated on field links will be
 summarized to limit the space they take up with an appendage similar to [+n message type] appended for
 additional
 messages that are omitted.  When this flag is false, all messages will be part of the link separated by
 a comma.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="infos" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The list of info messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="warnings" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The list of warning messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayFieldLabelWithMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[If true, the error messages will display the an InputField's title
 alongside the error, warning, and info messages related to it. This
 setting has no effect on messages which do not relate directly to a
 single InputField.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
                <![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="displayHeaderMessageSummary">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errors">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[The list of error messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalKeysToMatch">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[AdditionalKeysToMatch is an additional list of keys outside of the
 default keys that will be matched when messages are returned after a form
 is submitted. These keys are only used for displaying messages generated
 by the server and have no effect on client side validation error display.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[If true, error, warning, and info messages will be displayed (provided
 they are also set to display). Otherwise, no messages for this
 ValidationMessages container will be displayed (including ones set to display).
 This is a global display on/off switch for all messages.

 Other areas of the screen react to
 a display flag being turned off at a certain level, if display is off for a field, the next
 level up will display that fields full message text, and if display is off at a section the
 next section up will display those messages nested in a sublist.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="collapseAdditionalFieldLinkMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[When collapseAdditionalFieldLinkMessages is set to true, the messages generated on field links will be
 summarized to limit the space they take up with an appendage similar to [+n message type] appended for
 additional
 messages that are omitted.  When this flag is false, all messages will be part of the link separated by
 a comma.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="infos">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[The list of info messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="warnings">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[The list of warning messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayFieldLabelWithMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.GroupValidationMessages" xml:lang="en"><![CDATA[If true, the error messages will display the an InputField's title
 alongside the error, warning, and info messages related to it. This
 setting has no effect on messages which do not relate directly to a
 single InputField.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="collectionGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addViaLightBox" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Indicates that a add action should be rendered and that the add group be displayed in a lightbox]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="newItemsCssClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[The css style class that will be added on new items]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showInactiveLines" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether inactive collections lines should be displayed

 
 Setting only applies when the collection line type implements the
 Inactivatable interface. If true and showInactive is
 set to false, the collection will be filtered to remove any items
 whose active status returns false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addLineLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Label instance for the add line label]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderLineActions" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Indicates whether the action column for the collection should be rendered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="includeLineSelectionField" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether lines of the collection group should be selected by rendering a
 field for each line that will allow selection

 
 For example, having the select field enabled could allow selecting multiple lines from a search
 to return (multi-value lookup)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lineActions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Action fields that should be rendered for each collection line. Example
 line action is the delete action]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.element.Action">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderInactiveToggleButton" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="filters">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[List of CollectionFilter instances that should be invoked to filter the collection before
 displaying]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.CollectionFilter">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addLinePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Name of the property that contains an instance for the add line. If set
 this is used with the binding info to create the path to the add line.
 Can be left blank in which case the framework will manage the add line
 instance in a generic map.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="highlightAddItem" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Indicates whether the add item group or row should be styled with the #addItemCssClass]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderAddBlankLineButton" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates that a button will be rendered that allows the user to add blank lines to the collection

 
 The button will be added separately from the collection items. The default add line wil not be rendered. The
 action of the button will call the controller, add the blank line to the collection and do a component refresh.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="activeCollectionFilter"
                       type="org.kuali.rice.krad.uif.container.CollectionFilter">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Collection filter instance for filtering the collection data when the
 showInactive flag is set to false]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addLineItems">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[List of Component instances that should be rendered for the
 collection add line (if enabled). If not set, the default group's items
 list will be used]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addLineBindingInfo"
                       type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[BindingInfo instance for the add line property used to
 determine the full binding path. If add line name given
 #getAddLabel then it is set as the binding name on the
 binding info. Add line label and binding info are not required, in which
 case the framework will manage the new add line instances through a
 generic map (model must extend UifFormBase)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lineSelectPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[When #isIncludeLineSelectionField() is true, gives the name of the property the select field
 should bind to

 
 Note if no prefix is given in the property name, such as 'form.', it is assumed the property is
 contained on the collection line. In this case the binding path to the collection line will be
 appended. In other cases, it is assumed the property is a list or set of String that will hold the
 selected identifier strings
 

 
 This property is not required. If not the set the framework will use a property contained on
 UifFormBase
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayCollectionSize" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[The number of records to display for a collection]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addItemCssClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[The css style class that will be added on the add item group or row]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="collectionObjectClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Object class the collection maintains. Used to get dictionary information
 in addition to creating new instances for the collection when necessary]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="highlightNewItems" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Indicates whether new items should be styled with the #newItemsCssClass]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="collectionGroupBuilder" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[CollectionGroupBuilder instance that will build the
 components dynamically for the collection instance]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addBlankLineAction"
                       type="org.kuali.rice.krad.uif.element.Action">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[The add blank line Action field rendered when renderAddBlankLineButton is true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addViaLightBoxAction"
                       type="org.kuali.rice.krad.uif.element.Action">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[The Action that will be displayed that will open the add line group in a lightbox]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addLinePlacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates the add line placement

 
 Valid values are 'TOP' or 'BOTTOM'. The default is 'TOP'. When the value is 'BOTTOM' the blank line will be
 added
 to the end of the collection.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addLineActions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Action fields that should be rendered for the add line. This is generally
 the add action (button) but can be configured to contain additional
 actions]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.element.Action">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderAddLine" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Indicates whether an add line should be rendered for the collection]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderSaveLineActions" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[Indicates whether the save line actions should be rendered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo"
                       type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Determines the binding path for the collection. Used to get the
 collection value from the model in addition to setting the binding path
 for the collection attributes]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="collectionLookup"
                       type="org.kuali.rice.krad.uif.widget.QuickFinder">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Instance of the QuickFinder widget that configures a multi-value lookup for the collection

 
 If the collection lookup is enabled (by the render property of the quick finder),  #getCollectionObjectClass() will be used as the data object class for the lookup (if not set). Field
 conversions need to be set as usual and will be applied for each line returned
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="subCollections">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[List of CollectionGroup instances that are sub-collections
 of the collection represented by this collection group]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.CollectionGroup">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="addViaLightBox">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Indicates that a add action should be rendered and that the add group be displayed in a lightbox]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="newItemsCssClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[The css style class that will be added on new items]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="showInactiveLines">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether inactive collections lines should be displayed

 
 Setting only applies when the collection line type implements the
 Inactivatable interface. If true and showInactive is
 set to false, the collection will be filtered to remove any items
 whose active status returns false
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addLineLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Label instance for the add line label]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderLineActions">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Indicates whether the action column for the collection should be rendered]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="includeLineSelectionField">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates whether lines of the collection group should be selected by rendering a
 field for each line that will allow selection

 
 For example, having the select field enabled could allow selecting multiple lines from a search
 to return (multi-value lookup)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderInactiveToggleButton">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addLinePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Name of the property that contains an instance for the add line. If set
 this is used with the binding info to create the path to the add line.
 Can be left blank in which case the framework will manage the add line
 instance in a generic map.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="highlightAddItem">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Indicates whether the add item group or row should be styled with the #addItemCssClass]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderAddBlankLineButton">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates that a button will be rendered that allows the user to add blank lines to the collection

 
 The button will be added separately from the collection items. The default add line wil not be rendered. The
 action of the button will call the controller, add the blank line to the collection and do a component refresh.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="activeCollectionFilter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Collection filter instance for filtering the collection data when the
 showInactive flag is set to false]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addLineBindingInfo">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[BindingInfo instance for the add line property used to
 determine the full binding path. If add line name given
 #getAddLabel then it is set as the binding name on the
 binding info. Add line label and binding info are not required, in which
 case the framework will manage the new add line instances through a
 generic map (model must extend UifFormBase)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lineSelectPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[When #isIncludeLineSelectionField() is true, gives the name of the property the select field
 should bind to

 
 Note if no prefix is given in the property name, such as 'form.', it is assumed the property is
 contained on the collection line. In this case the binding path to the collection line will be
 appended. In other cases, it is assumed the property is a list or set of String that will hold the
 selected identifier strings
 

 
 This property is not required. If not the set the framework will use a property contained on
 UifFormBase
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayCollectionSize">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[The number of records to display for a collection]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addItemCssClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[The css style class that will be added on the add item group or row]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="collectionObjectClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Object class the collection maintains. Used to get dictionary information
 in addition to creating new instances for the collection when necessary]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="highlightNewItems">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Indicates whether new items should be styled with the #newItemsCssClass]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="collectionGroupBuilder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[CollectionGroupBuilder instance that will build the
 components dynamically for the collection instance]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addBlankLineAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[The add blank line Action field rendered when renderAddBlankLineButton is true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addViaLightBoxAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[The Action that will be displayed that will open the add line group in a lightbox]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addLinePlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Indicates the add line placement

 
 Valid values are 'TOP' or 'BOTTOM'. The default is 'TOP'. When the value is 'BOTTOM' the blank line will be
 added
 to the end of the collection.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderAddLine">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Indicates whether an add line should be rendered for the collection]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderSaveLineActions">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[Indicates whether the save line actions should be rendered]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bindingInfo">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Determines the binding path for the collection. Used to get the
 collection value from the model in addition to setting the binding path
 for the collection attributes]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="collectionLookup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Instance of the QuickFinder widget that configures a multi-value lookup for the collection

 
 If the collection lookup is enabled (by the render property of the quick finder),  #getCollectionObjectClass() will be used as the data object class for the lookup (if not set). Field
 conversions need to be set as usual and will be applied for each line returned
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="view-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader"
                       type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="page" type="org.kuali.rice.krad.uif.container.PageGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathToConcreteClassMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitleDisplayOption" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Namespace code the view should be associated with

 
 The namespace code is used within the framework in such places as permission checks and parameter
 retrieval
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Provide a list of dialog groups associated with this view]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitlePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuLink" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                       type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewIndex" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI"
                       type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController"
                       type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter"
                       type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderBreadcrumbsInView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbs" type="org.kuali.rice.krad.uif.widget.BreadCrumbs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preloadPoolSize" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuGroupName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="applicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperService">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="page">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectPathToConcreteClassMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionFlags">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitleDisplayOption">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="authorizer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitlePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="theme">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigationBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="presentationController">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderBreadcrumbsInView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editModes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growls">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preloadPoolSize">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuGroupName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.View" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="workflowProperties-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="workflowPropertyGroups">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowProperties" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.WorkflowPropertyGroup">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="stackedCollectionLayout-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="addLineGroup" type="org.kuali.rice.krad.uif.container.Group">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Group instance that will be used for the add line

 
 Add line fields and actions configured on the
 CollectionGroup will be set onto the add line group (if add
 line is enabled). If the add line group is not configured, a new instance
 of the line group prototype will be used for the add line.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="stackedGroups">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[Final List of Groups to render for the collection]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="subCollectionFieldGroupPrototype"
                   type="org.kuali.rice.krad.uif.field.FieldGroup">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Field group instance that is used as a prototype for creating the
 sub-collection field groups. For each sub-collection a copy of the
 prototype is made and the list will be passed to the layout manager
 buildLine method]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="summaryTitle" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Text to appears in the header for each collection lines Group. Used in
 conjunction with #getSummaryFields() to build up the final header
 text]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="wrapperGroup" type="org.kuali.rice.krad.uif.container.Group">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Group that will 'wrap' the generated collection lines so that they have a different layout from the general
 stacked layout

 
 By default (when the wrapper group is null), each collection line will become a group and the groups are
 rendered one after another. If the wrapper group is configured, the generated groups will be inserted as the
 items for the wrapper group, and the layout manager configured for the wrapper group will determine how they
 are rendered. For example, the layout manager could be a grid layout configured for three columns, which would
 layout the first three lines horizontally then break to a new row.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="context">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="summaryFields" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[List of attribute names from the collection line class that should be
 used to build the line summary. To build the summary the value for each
 attribute is retrieved from the line instance. All the values are then
 placed together with a separator.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="lineGroupPrototype" type="org.kuali.rice.krad.uif.container.Group">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Group instance that is used as a prototype for creating the collection
 line groups. For each line a copy of the prototype is made and then
 adjusted as necessary]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="selectFieldPrototype" type="org.kuali.rice.krad.uif.field.Field">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Field instance that serves as a prototype for creating the select field on each line when
 org.kuali.rice.krad.uif.container.CollectionGroup#isIncludeLineSelectionField() is true

 
 This prototype can be used to set the control used for the select field (generally will be a checkbox control)
 in addition to styling and other setting. The binding path will be formed with using the
 org.kuali.rice.krad.uif.container.CollectionGroup#getLineSelectPropertyName() or if not set the
 framework
 will use org.kuali.rice.krad.web.form.UifFormBase#getSelectedCollectionLines()
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="template">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="templateName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="addLineGroup">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Group instance that will be used for the add line

 
 Add line fields and actions configured on the
 CollectionGroup will be set onto the add line group (if add
 line is enabled). If the add line group is not configured, a new instance
 of the line group prototype will be used for the add line.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="style">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="subCollectionFieldGroupPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Field group instance that is used as a prototype for creating the
 sub-collection field groups. For each sub-collection a copy of the
 prototype is made and the list will be passed to the layout manager
 buildLine method]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="summaryTitle">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Text to appears in the header for each collection lines Group. Used in
 conjunction with #getSummaryFields() to build up the final header
 text]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="wrapperGroup">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Group that will 'wrap' the generated collection lines so that they have a different layout from the general
 stacked layout

 
 By default (when the wrapper group is null), each collection line will become a group and the groups are
 rendered one after another. If the wrapper group is configured, the generated groups will be inserted as the
 items for the wrapper group, and the layout manager configured for the wrapper group will determine how they
 are rendered. For example, the layout manager could be a grid layout configured for three columns, which would
 layout the first three lines horizontally then break to a new row.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="context">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="summaryFields">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[List of attribute names from the collection line class that should be
 used to build the line summary. To build the summary the value for each
 attribute is retrieved from the line instance. All the values are then
 placed together with a separator.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="lineGroupPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Group instance that is used as a prototype for creating the collection
 line groups. For each line a copy of the prototype is made and then
 adjusted as necessary]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="selectFieldPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en"><![CDATA[Field instance that serves as a prototype for creating the select field on each line when
 org.kuali.rice.krad.uif.container.CollectionGroup#isIncludeLineSelectionField() is true

 
 This prototype can be used to set the control used for the select field (generally will be a checkbox control)
 in addition to styling and other setting. The binding path will be formed with using the
 org.kuali.rice.krad.uif.container.CollectionGroup#getLineSelectPropertyName() or if not set the
 framework
 will use org.kuali.rice.krad.web.form.UifFormBase#getSelectedCollectionLines()
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="cssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.StackedLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="componentSecurity-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.ComponentSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="compareFieldCreate-modifier-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="runPhase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="runCondition" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="generateCompareHeaders" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[Indicates whether a HeaderField should be created for each
 group of comparison fields

 
 If set to true, for each group of comparison fields a header field will
 be created using the headerFieldPrototype configured on the modifier with
 the headerText property of the comparable
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="comparables">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[List of ComparableInfo instances the compare fields should
 be generated for

 
 For each comparable, a copy of the fields configured for the
 Group will be created for the comparison view
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComparableInfo">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="defaultOrderSequence" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[Indicates the starting integer sequence value to use for
 ComparableInfo instances that do not have the order property
 set]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="headerFieldPrototype"
                   type="org.kuali.rice.krad.uif.element.Header">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[Prototype instance to use for creating the HeaderField for
 each group of comparison fields (if generateCompareHeaders is true)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="runPhase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="runCondition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="generateCompareHeaders">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en"><![CDATA[Indicates whether a HeaderField should be created for each
 group of comparison fields

 
 If set to true, for each group of comparison fields a header field will
 be created using the headerFieldPrototype configured on the modifier with
 the headerText property of the comparable
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="order">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="defaultOrderSequence">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en"><![CDATA[Indicates the starting integer sequence value to use for
 ComparableInfo instances that do not have the order property
 set]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="headerFieldPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en"><![CDATA[Prototype instance to use for creating the HeaderField for
 each group of comparison fields (if generateCompareHeaders is true)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.CompareFieldCreateModifier" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="caseConstriant-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en">
            <![CDATA[gets the property name for the attribute to which the case constraint is applied to]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="caseSensitive" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en">
            <![CDATA[checks whether string comparison will be carried out in a case sensitive fashion]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="whenConstraint">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en">
            <![CDATA[get the WhenConstraint's defined by this case constraint]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.WhenConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="operator" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                             xml:lang="en">
            <![CDATA[specifies the kind of relationship to be checked between the actual value and the ones defined in the  #getWhenConstraint()]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="propertyName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en">
          <![CDATA[gets the property name for the attribute to which the case constraint is applied to]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="caseSensitive">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en">
          <![CDATA[checks whether string comparison will be carried out in a case sensitive fashion]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="operator">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                           xml:lang="en">
          <![CDATA[specifies the kind of relationship to be checked between the actual value and the ones defined in the  #getWhenConstraint()]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="lookupCriteriaInputField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="attributeQuery"
                       type="org.kuali.rice.krad.uif.field.AttributeQuery">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Attribute query instance configured for this field to dynamically pull information back for
 updates other fields or providing messages

 
 If field attribute query is not null, associated event script will be generated to trigger the
 query from the UI. This will invoke the AttributeQueryService to
 execute the query and return an instance of AttributeQueryResult that is then
 read by the script to update the UI. Typically used to update informational property values or
 other field values
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validCharactersConstraint"
                       type="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[The ValidCharactersConstraint that applies to this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Returns the alternate display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Help configuration object for the datafield

 
 External help information can be configured for the datafield. The
 Help object can the configuration for rendering a link to
 that help information.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Returns the additional display value.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValues">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="constraintText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Text that display a restriction on the value a field can hold

 
 For example when the value must be a valid format (phone number, email), certain length, min/max value and
 so on this text can be used to indicate the constraint to the user. Generally displays with the control so
 it is visible when the user tabs to the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Get the class of the optionsFinder being used by this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryObjectEntry" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[List of MustOccurConstraint that apply to this InputField]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="constraintMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Message field that displays constraint text

 
 This message field can be configured to for adjusting how the constrain text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="suggest" type="org.kuali.rice.krad.uif.widget.Suggest">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Suggest box widget for the input field

 
 If enabled (by render flag), as the user inputs data into the
 fields control a dynamic query is performed to provide the user
 suggestions on values which they can then select
 

 
 Note the Suggest widget is only valid when using a standard TextControl
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalHiddenPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinder"
                       type="org.kuali.rice.krad.keyvalues.KeyValuesFinder">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Instance of KeyValuesFinder that should be invoked to
 provide a List of values the field can have. Generally used to provide
 the options for a multi-value control or to validate the submitted field
 value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Instructional text that display an explanation of the field usage

 
 Text explaining how to use the field, including things like what values should be selected
 in certain cases and so on (instructions)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="escapeHtmlInPropertyValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Field that contains the messages (errors) for the input field. The
 ValidationMessages holds configuration on associated messages along
 with information on rendering the messages in the user interface]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="quickfinder" type="org.kuali.rice.krad.uif.widget.QuickFinder">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Lookup finder widget for the field

 
 The quickfinder widget places a small icon next to the field that allows
 the user to bring up a search screen for finding valid field values. The
 Widget instance can be configured to point to a certain
 LookupView, or the framework will attempt to associate the
 field with a lookup based on its metadata (in particular its
 relationships in the model)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyNamesForAdditionalDisplay" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Maximum number of characters the input field value is allowed to have

 
 The maximum length determines the maximum allowable length of the value
 for data entry editing purposes.  The maximum length is inclusive and can
 be smaller or longer than the actual control size.  The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 maximum length constraint in which digits and symbols are counted).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacementPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inclusiveMax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The inclusive maximum value for numeric or date field.

 
 The inclusiveMax element determines the maximum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyMask" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addHiddenWhenReadOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inquiry" type="org.kuali.rice.krad.uif.widget.Inquiry">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Inquiry widget for the field

 
 The inquiry widget will render a link for the field value when read-only
 that points to the associated inquiry view for the field. The inquiry can
 be configured to point to a certain InquiryView, or the
 framework will attempt to associate the field with a inquiry based on its
 metadata (in particular its relationships in the model)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpSummary" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Summary help text for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value (if set)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="control" type="org.kuali.rice.krad.uif.control.Control">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Control instance that should be used to input data for the
 field

 
 When the field is editable, the control will be rendered so the user can
 input a value(s). Controls typically are part of a Form and render
 standard HTML control elements such as text input, select, and checkbox
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffixPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyEditor" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addControlSelectAllOption" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the option for all values (blank key, 'All' label) should be added to the lookup
 field, note this is only supported for org.kuali.rice.krad.uif.control.MultiValueControl instance]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="simpleConstraint"
                       type="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Simple constraints for the input field

 
 A simple constraint which store the values for constraints such as required,
 min/max length, and min/max value.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipOfComponent" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValueFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableWildcardsAndOperators" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maskFormatter"
                       type="org.kuali.rice.krad.datadictionary.mask.MaskFormatter">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Minimum number of characters the input field value needs to be

 
 The minimum length determines the minimum required length of the value for
 data entry editing purposes.  The minimum length is inclusive. The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 minimum length requirement in which digits and symbols are counted).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="uppercaseValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Perform uppercase flag for this field to force input to uppercase.

 
 It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'
 which will automatically change any text input into the field to uppercase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dependencyConstraints">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[List of PrerequisiteConstraint that apply to this InputField]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="caseConstraint"
                       type="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[The CaseConstraint that applies to this InputField]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="exclusiveMin" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The exclusive minimum value for numeric or date field.

 
 The exclusiveMin element determines the minimum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataType" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Gets the DataType of this InputField, note that DataType set to be date
 when this field is using a date picker with a TextControl and has not otherwise been
 explicitly set.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo"
                       type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryAttributeName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Message field that displays instructional text

 
 This message field can be configured to for adjusting how the instructional text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="attributeQuery">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Attribute query instance configured for this field to dynamically pull information back for
 updates other fields or providing messages

 
 If field attribute query is not null, associated event script will be generated to trigger the
 query from the UI. This will invoke the AttributeQueryService to
 execute the query and return an instance of AttributeQueryResult that is then
 read by the script to update the UI. Typically used to update informational property values or
 other field values
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validCharactersConstraint">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[The ValidCharactersConstraint that applies to this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Returns the alternate display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Help configuration object for the datafield

 
 External help information can be configured for the datafield. The
 Help object can the configuration for rendering a link to
 that help information.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Returns the additional display value.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="constraintText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Text that display a restriction on the value a field can hold

 
 For example when the value must be a valid format (phone number, email), certain length, min/max value and
 so on this text can be used to indicate the constraint to the user. Generally displays with the control so
 it is visible when the user tabs to the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optionsFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Get the class of the optionsFinder being used by this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryObjectEntry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="constraintMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Message field that displays constraint text

 
 This message field can be configured to for adjusting how the constrain text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="suggest">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Suggest box widget for the input field

 
 If enabled (by render flag), as the user inputs data into the
 fields control a dynamic query is performed to provide the user
 suggestions on values which they can then select
 

 
 Note the Suggest widget is only valid when using a standard TextControl
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalHiddenPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="optionsFinder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Instance of KeyValuesFinder that should be invoked to
 provide a List of values the field can have. Generally used to provide
 the options for a multi-value control or to validate the submitted field
 value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Instructional text that display an explanation of the field usage

 
 Text explaining how to use the field, including things like what values should be selected
 in certain cases and so on (instructions)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="escapeHtmlInPropertyValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Field that contains the messages (errors) for the input field. The
 ValidationMessages holds configuration on associated messages along
 with information on rendering the messages in the user interface]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="quickfinder">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Lookup finder widget for the field

 
 The quickfinder widget places a small icon next to the field that allows
 the user to bring up a search screen for finding valid field values. The
 Widget instance can be configured to point to a certain
 LookupView, or the framework will attempt to associate the
 field with a lookup based on its metadata (in particular its
 relationships in the model)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyNamesForAdditionalDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Maximum number of characters the input field value is allowed to have

 
 The maximum length determines the maximum allowable length of the value
 for data entry editing purposes.  The maximum length is inclusive and can
 be smaller or longer than the actual control size.  The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 maximum length constraint in which digits and symbols are counted).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacementPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inclusiveMax">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The inclusive maximum value for numeric or date field.

 
 The inclusiveMax element determines the maximum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyMask">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addHiddenWhenReadOnly">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inquiry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Inquiry widget for the field

 
 The inquiry widget will render a link for the field value when read-only
 that points to the associated inquiry view for the field. The inquiry can
 be configured to point to a certain InquiryView, or the
 framework will attempt to associate the field with a inquiry based on its
 metadata (in particular its relationships in the model)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helpSummary">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Summary help text for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value (if set)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="control">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Control instance that should be used to input data for the
 field

 
 When the field is editable, the control will be rendered so the user can
 input a value(s). Controls typically are part of a Form and render
 standard HTML control elements such as text input, select, and checkbox
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffixPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyEditor">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="addControlSelectAllOption">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the option for all values (blank key, 'All' label) should be added to the lookup
 field, note this is only supported for org.kuali.rice.krad.uif.control.MultiValueControl instance]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="simpleConstraint">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Simple constraints for the input field

 
 A simple constraint which store the values for constraints such as required,
 min/max length, and min/max value.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tooltipOfComponent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValueFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disableWildcardsAndOperators">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maskFormatter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Minimum number of characters the input field value needs to be

 
 The minimum length determines the minimum required length of the value for
 data entry editing purposes.  The minimum length is inclusive. The constraint
 is enforced on all data types (e.g. a numeric data type needs to meet the
 minimum length requirement in which digits and symbols are counted).
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="uppercaseValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Perform uppercase flag for this field to force input to uppercase.

 
 It this flag is set to true the 'text-transform' style on the field will be set to 'uppercase'
 which will automatically change any text input into the field to uppercase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="caseConstraint">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[The CaseConstraint that applies to this InputField]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="exclusiveMin">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[The exclusive minimum value for numeric or date field.

 
 The exclusiveMin element determines the minimum allowable value for data
 entry editing purposes. This constrain is supported for numeric and
 date fields and to be used in conjunction with the appropriate
 ValidCharactersConstraint.

 For numeric constraint the value can be an integer or decimal such as -.001 or 99.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataType">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Gets the DataType of this InputField, note that DataType set to be date
 when this field is using a date picker with a TextControl and has not otherwise been
 explicitly set.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bindingInfo">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryAttributeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LookupInputField" xml:lang="en"><![CDATA[Message field that displays instructional text

 
 This message field can be configured to for adjusting how the instructional text will display. Generally
 the styleClasses property will be of most interest
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="imageField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="height" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets the height of the image]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cutlineText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets the cutline text]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cutline" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets the cutline]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets the width of the image]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="captionHeaderText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets the caption header text]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="image" type="org.kuali.rice.krad.uif.element.Image">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Retrieves the Image element wrapped by this field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="captionHeader" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets the caption header]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="captionHeaderAboveImage" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Gets boolen of whether the caption header is above the image]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="source" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Retrieves the URL the image wrapped by this field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="altText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Provides alternate information for the image element

 The altText property specifies an alternate text for an image. It is displayed by the browser
 if the image cannot be displayed.  This is especially important for accessibility, because screen
 readers can't understand images, but rather will read aloud the alternative text assigned to them.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="height">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Gets the height of the image]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cutlineText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Gets the cutline text]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cutline">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Gets the cutline]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="captionHeaderText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Gets the caption header text]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="image">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Retrieves the Image element wrapped by this field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="captionHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Gets the caption header]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="captionHeaderAboveImage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Gets boolen of whether the caption header is above the image]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="source">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Retrieves the URL the image wrapped by this field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="altText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ImageField" xml:lang="en"><![CDATA[Provides alternate information for the image element

 The altText property specifies an alternate text for an image. It is displayed by the browser
 if the image cannot be displayed.  This is especially important for accessibility, because screen
 readers can't understand images, but rather will read aloud the alternative text assigned to them.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="supportAttributeDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sourceName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="targetName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="identifier" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sourceName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="targetName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="identifier">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="spinner-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Spinner" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="attributeSecurity-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="maskFormatter"
                   type="org.kuali.rice.krad.datadictionary.mask.MaskFormatter">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="hide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="partialMask" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="partialMaskFormatter"
                   type="org.kuali.rice.krad.datadictionary.mask.MaskFormatter">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mask" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="maskFormatter">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="readOnly">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="hide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="partialMask">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="partialMaskFormatter">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="mask">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="actionField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Client side javascript to be executed when this actionField is clicked

 
 This overrides the default action for this Action so the method
 called must explicitly submit, navigate, etc. through js, if necessary.
 In addition, this js occurs AFTER onClickScripts set on this field, it
 will be the last script executed by the click event. Sidenote: This js is
 always called after hidden actionParameters and methodToCall methods are
 written by the js to the html form.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="errorCallback" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Gets the script which will be invoked when the action fails due to problems in the ajax call or
 the return of an incident report

 
 The errorCallback can carry out custom logic after a failed ajax submission. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleFailedUpdate(responseContents);'
 

 
 The errorCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionImage" type="org.kuali.rice.krad.uif.element.Image">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Image to use for the action

 
 When the action image component is set (and render is true) the image will be
 used to present the action as opposed to the default (input submit). For
 action link templates the image is used for the link instead of the
 action link text
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="action" type="org.kuali.rice.krad.uif.element.Action">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Nested action component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Label text for the action

 
 The label text is used by the template renderers to give a human readable
 label for the action. For buttons this generally is the button text,
 while for an action link it would be the links displayed text
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionImagePlacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="focusOnIdAfterSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The element to place focus on in the new page after the new page
 is retrieved.

 The following are allowed:
 
 
-A valid element id
 
-"FIRST" will focus on the first visible input element on the form
 
-"SELF" will result in this Action being focused (action bean defaults to "SELF")
 
-"LINE_FIRST" will result in the first input of the collection line to be focused (if available)
 
-"NEXT_INPUT" will result in the next available input that exists after this Action to be focused
 (only if this action still exists on the page)
 
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ajaxSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[When this property is set to true it will submit the form using Ajax instead of the browser submit. Will default
 to updating the page contents]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="successCallback" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Gets the script which will be invoked on a successful ajax call

 
 The successCallback can carry out custom logic after a successful ajax submission has been made. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleSuccessfulUpdate(responseContents);'
 

 
 The successCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="jumpToIdAfterSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preSubmitCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Gets the script which needs to be invoked before the form is submitted

 
 The preSubmitCall can carry out custom logic for the action before the submit occurs. The value should
 be given as one or more lines of script and should return a boolean. If false is returned from the call,
 the submit is not carried out. Furthermore, the preSubmitCall can refer to the request object through the
 variable 'kradRequest' or 'this'. This gives full access over the request for doing such things as
 adding additional data
 

 
 Examples 'return doFunction(kradRequest);', 'var valid=true;return valid;'
 

 
 The preSubmit call will be invoked both for ajax and non-ajax submits
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="performClientSideValidation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the form data should be validated on the client side

 return true if validation should occur, false otherwise]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[If the action field is disabled, gives a reason for why which will be displayed as a tooltip
 on the action field (button)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="jumpToNameAfterSubmit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The name to jump to in the next page, the element with this name will be
 jumped to automatically when the new page is retrieved after a submit.
 Passing in nothing for both jumpToIdAfterSubmit and jumpToNameAfterSubmit
 will result in this Action being jumped to by default if it is
 present on the new page. WARNING: jumpToIdAfterSubmit always takes
 precedence over jumpToNameAfterSubmit, if set.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionParameters">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Parameters that should be sent when the action is invoked

 
 Action renderer will decide how the parameters are sent for the action
 (via script generated hiddens, or script parameters, ...)
 

 
 Can be set by other components such as the CollectionGroup
 to provide the context the action is in (such as the collection name and
 line the action applies to)
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigateToPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[For an Action that is part of a
 NavigationGroup</code, the navigate to page id can be set to
 configure the page that should be navigated to when the action is
 selected

 
 Support exists in the UifControllerBase for handling
 navigation between pages
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionEvent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Name of the event that will be set when the action is invoked

 
 Action events can be looked at by the view or components in order to render differently depending on
 the action requested.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Name of the method that should be called when the action is selected

 
 For a server side call (clientSideCall is false), gives the name of the
 method in the mapped controller that should be invoked when the action is
 selected. For client side calls gives the name of the script function
 that should be invoked when the action is selected
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="performDirtyValidation" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[Indicates whether the action (input or button) is disabled (doesn't allow interaction)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="actionScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Client side javascript to be executed when this actionField is clicked

 
 This overrides the default action for this Action so the method
 called must explicitly submit, navigate, etc. through js, if necessary.
 In addition, this js occurs AFTER onClickScripts set on this field, it
 will be the last script executed by the click event. Sidenote: This js is
 always called after hidden actionParameters and methodToCall methods are
 written by the js to the html form.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errorCallback">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Gets the script which will be invoked when the action fails due to problems in the ajax call or
 the return of an incident report

 
 The errorCallback can carry out custom logic after a failed ajax submission. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleFailedUpdate(responseContents);'
 

 
 The errorCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionImage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Image to use for the action

 
 When the action image component is set (and render is true) the image will be
 used to present the action as opposed to the default (input submit). For
 action link templates the image is used for the link instead of the
 action link text
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="action">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
              <![CDATA[Nested action component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Label text for the action

 
 The label text is used by the template renderers to give a human readable
 label for the action. For buttons this generally is the button text,
 while for an action link it would be the links displayed text
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionImagePlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="focusOnIdAfterSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The element to place focus on in the new page after the new page
 is retrieved.

 The following are allowed:
 
 
-A valid element id
 
-"FIRST" will focus on the first visible input element on the form
 
-"SELF" will result in this Action being focused (action bean defaults to "SELF")
 
-"LINE_FIRST" will result in the first input of the collection line to be focused (if available)
 
-"NEXT_INPUT" will result in the next available input that exists after this Action to be focused
 (only if this action still exists on the page)
 
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ajaxSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[When this property is set to true it will submit the form using Ajax instead of the browser submit. Will default
 to updating the page contents]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="successCallback">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Gets the script which will be invoked on a successful ajax call

 
 The successCallback can carry out custom logic after a successful ajax submission has been made. The
 value can contain one or more script statements. In addition, the response contents can be accessed
 through the variable 'responseContents'
 

 
 Examples 'handleSuccessfulUpdate(responseContents);'
 

 
 The successCallback may only be specified when #isAjaxSubmit() is true
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jumpToIdAfterSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preSubmitCall">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Gets the script which needs to be invoked before the form is submitted

 
 The preSubmitCall can carry out custom logic for the action before the submit occurs. The value should
 be given as one or more lines of script and should return a boolean. If false is returned from the call,
 the submit is not carried out. Furthermore, the preSubmitCall can refer to the request object through the
 variable 'kradRequest' or 'this'. This gives full access over the request for doing such things as
 adding additional data
 

 
 Examples 'return doFunction(kradRequest);', 'var valid=true;return valid;'
 

 
 The preSubmit call will be invoked both for ajax and non-ajax submits
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="performClientSideValidation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the form data should be validated on the client side

 return true if validation should occur, false otherwise]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[If the action field is disabled, gives a reason for why which will be displayed as a tooltip
 on the action field (button)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="jumpToNameAfterSubmit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[The name to jump to in the next page, the element with this name will be
 jumped to automatically when the new page is retrieved after a submit.
 Passing in nothing for both jumpToIdAfterSubmit and jumpToNameAfterSubmit
 will result in this Action being jumped to by default if it is
 present on the new page. WARNING: jumpToIdAfterSubmit always takes
 precedence over jumpToNameAfterSubmit, if set.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionParameters">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Parameters that should be sent when the action is invoked

 
 Action renderer will decide how the parameters are sent for the action
 (via script generated hiddens, or script parameters, ...)
 

 
 Can be set by other components such as the CollectionGroup
 to provide the context the action is in (such as the collection name and
 line the action applies to)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigateToPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[For an Action that is part of a
 NavigationGroup</code, the navigate to page id can be set to
 configure the page that should be navigated to when the action is
 selected

 
 Support exists in the UifControllerBase for handling
 navigation between pages
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionEvent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Name of the event that will be set when the action is invoked

 
 Action events can be looked at by the view or components in order to render differently depending on
 the action requested.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="methodToCall">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Name of the method that should be called when the action is selected

 
 For a server side call (clientSideCall is false), gives the name of the
 method in the mapped controller that should be invoked when the action is
 selected. For client side calls gives the name of the script function
 that should be invoked when the action is selected
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="performDirtyValidation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.ActionField" xml:lang="en">
              <![CDATA[Indicates whether the action (input or button) is disabled (doesn't allow interaction)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="verticalRadioControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldsetClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Get fieldsetClasses which are the classes that will be applied to this component's fieldset when generated]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="options">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.core.api.util.KeyValue">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="delimiter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Delimiter string to be rendered between the radio group options, defaults
 to none]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldsetClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
              <![CDATA[Get fieldsetClasses which are the classes that will be applied to this component's fieldset when generated]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="delimiter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en"><![CDATA[Delimiter string to be rendered between the radio group options, defaults
 to none]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.RadioGroupControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="bindingInfo-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="bindingObjectPath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[For attribute fields that do not belong to the default form object (given
 by the view), this field specifies the path to the object (on the form)
 the attribute does belong to.

 
 e.g. Say we have an attribute field with property name 'number', that
 belongs to the object given by the 'account' property on the form. The
 form object path would therefore be set to 'account'. If the property
 belonged to the object given by the 'document.header' property of the
 form, the binding object path would be set to 'document.header'. Note if
 the binding object path is not set for an attribute field (or any
 DataBinding component), the binding object path configured
 on the View will be used (unless bindToForm is set to true,
 where is assumed the property is directly available from the form).
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="bindToMap" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Indicates whether the parent object for the property that we are binding
 to is a Map. If true the binding path will be adjusted to use the map key
 syntax]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="bindingPath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Path to the property on the model the component binds to. Uses standard
 dot notation for nested properties. If the binding path was manually set
 it will be returned as it is, otherwise the path will be formed by using
 the binding object path and the bind prefix

 
 e.g. Property name 'foo' on a model would have binding path "foo", while
 property name 'name' of the nested model property 'account' would have
 binding path "account.name"
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="bindByNamePrefix" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Prefix that will be used to form the binding path from the component
 name. Typically used for nested collection properties]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="bindToForm" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Indicates whether the component binds directly to the form (that is its
 bindingName gives a property available through the form), or whether is
 binds through a nested form object. If bindToForm is false, it is assumed
 the component binds to the object given by the form property whose path
 is configured by bindingObjectPath.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="bindingName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Gives the name of the property that the component binds to. The name can
 be nested but not the full path, just from the parent object or in the
 case of binding directly to the form from the form object

 
 If blank this will be set from the name field of the component
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="bindingObjectPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[For attribute fields that do not belong to the default form object (given
 by the view), this field specifies the path to the object (on the form)
 the attribute does belong to.

 
 e.g. Say we have an attribute field with property name 'number', that
 belongs to the object given by the 'account' property on the form. The
 form object path would therefore be set to 'account'. If the property
 belonged to the object given by the 'document.header' property of the
 form, the binding object path would be set to 'document.header'. Note if
 the binding object path is not set for an attribute field (or any
 DataBinding component), the binding object path configured
 on the View will be used (unless bindToForm is set to true,
 where is assumed the property is directly available from the form).
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="bindToMap">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Indicates whether the parent object for the property that we are binding
 to is a Map. If true the binding path will be adjusted to use the map key
 syntax]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="bindingPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Path to the property on the model the component binds to. Uses standard
 dot notation for nested properties. If the binding path was manually set
 it will be returned as it is, otherwise the path will be formed by using
 the binding object path and the bind prefix

 
 e.g. Property name 'foo' on a model would have binding path "foo", while
 property name 'name' of the nested model property 'account' would have
 binding path "account.name"
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="bindByNamePrefix">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Prefix that will be used to form the binding path from the component
 name. Typically used for nested collection properties]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="bindToForm">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Indicates whether the component binds directly to the form (that is its
 bindingName gives a property available through the form), or whether is
 binds through a nested form object. If bindToForm is false, it is assumed
 the component binds to the object given by the form property whose path
 is configured by bindingObjectPath.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="bindingName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.BindingInfo" xml:lang="en"><![CDATA[Gives the name of the property that the component binds to. The name can
 be nested but not the full path, just from the parent object or in the
 case of binding directly to the form from the form object

 
 If blank this will be set from the name field of the component
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="formView-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader"
                       type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="page" type="org.kuali.rice.krad.uif.container.PageGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateServerSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathToConcreteClassMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitleDisplayOption" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formPostUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Namespace code the view should be associated with

 
 The namespace code is used within the framework in such places as permission checks and parameter
 retrieval
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Provide a list of dialog groups associated with this view]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitlePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuLink" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                       type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewIndex" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI"
                       type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderForm" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateClientSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController"
                       type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter"
                       type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderBreadcrumbsInView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbs" type="org.kuali.rice.krad.uif.widget.BreadCrumbs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preloadPoolSize" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuGroupName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="applicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperService">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="page">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateServerSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectPathToConcreteClassMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionFlags">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitleDisplayOption">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formPostUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="authorizer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitlePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="theme">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigationBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderForm">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateClientSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="presentationController">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderBreadcrumbsInView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editModes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growls">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preloadPoolSize">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuGroupName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.FormView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="linkField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="linkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Returns the label of the Link field that will be used to render the label of the link.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="href" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Returns the href text of the Link field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lightBox" type="org.kuali.rice.krad.uif.widget.LightBox">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Returns the LightBox used to open the link in]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="link" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Returns the Link field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="target" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[Returns the target of the Link field that will be used to specify where to open the href.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="linkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Returns the label of the Link field that will be used to render the label of the link.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="href">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Returns the href text of the Link field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lightBox">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Returns the LightBox used to open the link in]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="link">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Returns the Link field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en">
              <![CDATA[Returns the target of the Link field that will be used to specify where to open the href.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.LinkField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="richTable-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableTableSort" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Returns true if sorting is disabled]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showSearchAndExportOptions" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Returns true if search and export options are enabled]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hiddenColumns" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Holds propertyNames for the ones meant to be hidden since columns are visible by default

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="emptyTableMessage" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Returns the text which is used to display text when the table is empty]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ajaxSource" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Specifies a URL for acquiring the table data with ajax

 
 When the ajax source URL is specified the rich table plugin will retrieve the data by invoking the URL and
 building the table rows from the result. This is different from the standard use of the rich table plugin
 with uses progressive enhancement to decorate a table that has already been rendereed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sortableColumns" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Holds the propertyNames for columns that are to be sorted

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="disableTableSort">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
              <![CDATA[Returns true if sorting is disabled]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="showSearchAndExportOptions">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
              <![CDATA[Returns true if search and export options are enabled]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="hiddenColumns">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Holds propertyNames for the ones meant to be hidden since columns are visible by default

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="emptyTableMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en">
              <![CDATA[Returns the text which is used to display text when the table is empty]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ajaxSource">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Specifies a URL for acquiring the table data with ajax

 
 When the ajax source URL is specified the rich table plugin will retrieve the data by invoking the URL and
 building the table rows from the result. This is different from the standard use of the rich table plugin
 with uses progressive enhancement to decorate a table that has already been rendereed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="sortableColumns">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.RichTable" xml:lang="en"><![CDATA[Holds the propertyNames for columns that are to be sorted

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="searchingTypeDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="searchingAttribute"
                   type="org.kuali.rice.krad.datadictionary.SearchingAttribute">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="documentValues" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="searchingAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="documentValues">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingTypeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="primitiveAttributeDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sourceName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="targetName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sourceName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="targetName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
</xsd:schema>
