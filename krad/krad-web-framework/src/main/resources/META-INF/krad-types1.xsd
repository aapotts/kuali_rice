<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2005-2013 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<xsd:schema xmlns="http://www.kuali.org/krad/schema" xmlns:spring="http://www.springframework.org/schema/beans"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            attributeFormDefault="unqualified" elementFormDefault="qualified"
            targetNamespace="http://www.kuali.org/krad/schema"
            xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
  <xsd:import namespace="http://www.springframework.org/schema/beans"/>
  <xsd:include schemaLocation="krad-baseTypes.xsd"/>
  <xsd:complexType name="fieldSecurity-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="viewInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="disclosure-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expandImageSrc" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Path to the images that should be displayed to expand the group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultOpen" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Indicates whether the group should be initially open]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="collapseImageSrc" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Path to the images that should be displayed to collapse the group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderImage" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the expand/collapse image should be rendered for the closure, if set to false only
 the group title will be clickable]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="animationSpeed" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Gives the speed for the open/close animation, a smaller int will result
 in a faster animation]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="expandImageSrc">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
              <![CDATA[Path to the images that should be displayed to expand the group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultOpen">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
              <![CDATA[Indicates whether the group should be initially open]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="collapseImageSrc">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en">
              <![CDATA[Path to the images that should be displayed to collapse the group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderImage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the expand/collapse image should be rendered for the closure, if set to false only
 the group title will be clickable]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="animationSpeed">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Gives the speed for the open/close animation, a smaller int will result
 in a faster animation]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tabGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabsWidget" type="org.kuali.rice.krad.uif.widget.Tabs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Gets the widget which contains any configuration for the tab widget component used to render
 this TabGroup]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabsWidget">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Gets the widget which contains any configuration for the tab widget component used to render
 this TabGroup]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="help-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipHelpContent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[TooltipHelpContent]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpAction" type="org.kuali.rice.krad.uif.element.Action">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[HelpActionField is used for rendering external help]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="externalHelpUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The external help Url

 
 This should contain a valid URL.  When specified this URL takes precedence over the external help URL from
 the system parameters.
 

 * @return Url of the external help]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpDefinition"
                       type="org.kuali.rice.krad.datadictionary.HelpDefinition">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The help definition is used as the key to retrieve the external help Url from the parameter table of
 the database]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tooltipHelpContent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
              <![CDATA[TooltipHelpContent]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helpAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en">
              <![CDATA[HelpActionField is used for rendering external help]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="externalHelpUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The external help Url

 
 This should contain a valid URL.  When specified this URL takes precedence over the external help URL from
 the system parameters.
 

 * @return Url of the external help]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helpDefinition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The help definition is used as the key to retrieve the external help Url from the parameter table of
 the database]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="lookupView-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader"
                       type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="multipleValuesSelect" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether multiple values select should be enabled for the lookup

 
 When set to true, the select field is enabled for the lookup results group that allows the user
 to select one or more rows for returning
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="page" type="org.kuali.rice.krad.uif.container.PageGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="returnTarget" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateServerSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathToConcreteClassMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitleDisplayOption" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formPostUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resultsReturnField" type="org.kuali.rice.krad.uif.field.Field">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Namespace code the view should be associated with

 
 The namespace code is used within the framework in such places as permission checks and parameter
 retrieval
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Provide a list of dialog groups associated with this view]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="criteriaGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitlePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resultFields">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuLink" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hideReturnLinks" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                       type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resultSetLimit" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Retrieves the maximum number of records that will be listed
 as a result of the lookup search]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewIndex" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI"
                       type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderForm" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultSortAscending" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateClientSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController"
                       type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter"
                       type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultSortAttributeNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showMaintenanceLinks" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClassName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Class name for the object the lookup applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is to configure the Lookupable which will carry out the
 lookup action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderBreadcrumbsInView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbs" type="org.kuali.rice.krad.uif.widget.BreadCrumbs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="returnByScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="criteriaFields">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="suppressActions" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resultsActionsFieldGroup"
                       type="org.kuali.rice.krad.uif.field.FieldGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resultsGroup"
                       type="org.kuali.rice.krad.uif.container.CollectionGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maintenanceUrlMapping" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[String that maps to the maintenance controller for the maintenance document (if any) associated with the
 lookup data object class

 
 Mapping will be used to build the maintenance action links (such as edit, copy, and new). If not given, the
 default maintenance mapping will be used
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preloadPoolSize" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuGroupName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="applicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperService">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="multipleValuesSelect">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether multiple values select should be enabled for the lookup

 
 When set to true, the select field is enabled for the lookup results group that allows the user
 to select one or more rows for returning
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="page">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="returnTarget">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateServerSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectPathToConcreteClassMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionFlags">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitleDisplayOption">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formPostUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="authorizer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="resultsReturnField">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="criteriaGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitlePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="theme">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="hideReturnLinks">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="resultSetLimit">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Retrieves the maximum number of records that will be listed
 as a result of the lookup search]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigationBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderForm">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultSortAscending">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateClientSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="presentationController">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultSortAttributeNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="showMaintenanceLinks">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataObjectClassName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Class name for the object the lookup applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is to configure the Lookupable which will carry out the
 lookup action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderBreadcrumbsInView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="returnByScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="suppressActions">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="resultsActionsFieldGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="resultsGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editModes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maintenanceUrlMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[String that maps to the maintenance controller for the maintenance document (if any) associated with the
 lookup data object class

 
 Mapping will be used to build the maintenance action links (such as edit, copy, and new). If not given, the
 default maintenance mapping will be used
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growls">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preloadPoolSize">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuGroupName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.LookupView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="kimPersonControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="datePicker" type="org.kuali.rice.krad.uif.widget.DatePicker">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="personNamePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[The name of the property on the parent object that holds the person name]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="personObjectPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[The name of the property on the parent object that holds the person object]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="principalIdPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[The name of the property on the parent object that holds the principal id]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="textExpand" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="watermarkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="datePicker">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="personNamePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[The name of the property on the parent object that holds the person name]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="personObjectPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[The name of the property on the parent object that holds the person object]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="principalIdPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[The name of the property on the parent object that holds the principal id]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="textExpand">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="watermarkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="treeGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="nodePrototypeMap">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tree" type="org.kuali.rice.krad.uif.widget.Tree">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="treeGroups">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultNodePrototype"
                       type="org.kuali.rice.krad.uif.container.NodePrototype">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo"
                       type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="nodePrototypeMap">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tree">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="treeGroups">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultNodePrototype">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bindingInfo">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="breadcrumbs-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="homewardPathList">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The homewardPath to be displayed on this representative of the logical
 "location" of the view within the site hierarchy, can be set to anything
 desired.]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.view.HistoryEntry">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayPassedHistory" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Determines if the passedHistory is to be displayed. In most cases this
 should not be set through the xml as this is toggled off and on through
 code during different ui procedures.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayBreadcrumbsWhenOne" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[If true, breadcrumbs will not be displayed if only one breadcrumb is
 going to be shown, this improves visual clarity of the page]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayHomewardPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Determines if the homewardPath is to be displayed. Even when this is
 setting is on the code may determine to turn off homewardPath display
 based on user interaction and ui elements being displayed (ie lightbox)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="displayPassedHistory">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Determines if the passedHistory is to be displayed. In most cases this
 should not be set through the xml as this is toggled off and on through
 code during different ui procedures.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayBreadcrumbsWhenOne">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[If true, breadcrumbs will not be displayed if only one breadcrumb is
 going to be shown, this improves visual clarity of the page]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayHomewardPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.BreadCrumbs" xml:lang="en"><![CDATA[Determines if the homewardPath is to be displayed. Even when this is
 setting is on the code may determine to turn off homewardPath display
 based on user interaction and ui elements being displayed (ie lightbox)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="helpDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parameterDetailType" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parameterNamespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parameterName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parameterDetailType">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parameterNamespace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parameterName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="messageField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentStructure" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="message" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Nested org.kuali.rice.krad.uif.element.Message component wrapped in the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="messageText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="messageComponentStructure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inlineComponents">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="message">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[Nested org.kuali.rice.krad.uif.element.Message component wrapped in the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="spaceField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="maintenanceView-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader"
                       type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="documentClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Gets the document class]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayTopicFieldInNotes" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="page" type="org.kuali.rice.krad.uif.container.PageGroup">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateServerSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathToConcreteClassMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitleDisplayOption" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="attachmentTypesValuesFinderClass" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formPostUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Namespace code the view should be associated with

 
 The namespace code is used within the framework in such places as permission checks and parameter
 retrieval
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Provide a list of dialog groups associated with this view]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbTitlePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuLink" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maintenanceAction" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates what maintenance action (new, edit, copy) was
 requested]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                       type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewIndex" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI"
                       type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderForm" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteFYI" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateClientSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController"
                       type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="oldObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gives the binding path to the old object (record being edited) to display
 for comparison]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter"
                       type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteAttachments" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClassName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name for the object the maintenance document applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderBreadcrumbsInView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbs" type="org.kuali.rice.krad.uif.widget.BreadCrumbs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preloadPoolSize" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuGroupName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="applicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Header for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here application logos, menus, login controls
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The stateObject's binding path, this will be used along with the StateMapping's statePropertyName to
 determine what field in the model state information is stored in for this view.  Used during View validation.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="documentClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Gets the document class]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayTopicFieldInNotes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="refreshBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperService">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Creates the ViewHelperService associated with the View]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="page">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[For single paged views (#isSinglePageView(), gives the page
 Group the view should render. The actual items for the page
 is taken from the group's items list (#getItems(), and set onto
 the give page group. This is for convenience of configuration.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map that contains expressions to evaluate and make available as variables
 for conditional expressions within the view
 
 Each Map entry contains one expression variables, where the map key gives
 the name for the variable, and the map value gives the variable
 expression. The variables expressions will be evaluated before
 conditional logic is run and made available as variables for other
 conditional expressions. Variable expressions can be based on the model
 and any object contained in the view's context
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateServerSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectPathToConcreteClassMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Configures the concrete classes that will be used for properties in the
 form object graph that have an abstract or interface type

 
 For properties that have an abstract or interface type, it is not
 possible to perform operations like getting/settings property values and
 getting information from the dictionary. When these properties are
 encountered in the object graph, this Map will be consulted
 to determine the concrete type to use.
 

 
 e.g. Suppose we have a property document.accountingLine.accountNumber and
 the accountingLine property on the document instance has an interface
 type 'AccountingLine'. We can then put an entry into this map with key
 'document.accountingLine', and value
 'org.kuali.rice.sampleapp.TravelAccountingLine'. When getting the
 property type or an entry from the dictionary for accountNumber, the
 TravelAccountingLine class will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name of the ViewHelperService that handles the various
 phases of the Views lifecycle]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="actionFlags">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map of strings that flag what actions can be taken in the UI
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitleDisplayOption">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The option to use when appending the view label on the breadcrumb title.
 Available options: 'dash', 'parenthesis', and 'replace'(don't append -
 simply replace the title). MUST be set for the viewLabelField to be used
 in the breadcrumb, if not set no appendage will be added.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="attachmentTypesValuesFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formPostUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the View only has a single page
 Group or contains multiple page Group
 instances. In the case of a single page it is assumed the group's items
 list contains the section groups for the page, and the page itself is
 given by the page property (#getPage(). This is for convenience
 of configuration and also can drive other configuration like styling.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="authorizer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Authorizer that should be used for the View instance

 
 The authorizer class is consulted to determine component (group, field)
 state such as required, read-only, and hidden based on the users
 permissions. It typically communicates with the Kuali Identity Management
 system to determine roles and permissions. It is used with the
 presentation controller and dictionary conditional logic to determine the
 final component state. The authorizer can also output action flags and
 edit modes that will be set onto the view instance and can be referred to
 by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies what page should be rendered by default. This is the page that
 will be rendered when the View is first rendered or when the
 current page is not set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbTitlePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The property name to be used to determine what will be used in the
 breadcrumb title of this view

 
 The title can be determined from a combination of this and viewLabelFieldbindingInfo: If only
 viewLabelFieldPropertyName is set, the title we be determined against the
 defaultBindingObjectPath. If only viewLabelFieldbindingInfo is set it
 must provide information about what object(bindToForm or explicit) and
 path to use. If both viewLabelFieldbindingInfo and viewLabelFieldPropertyName are set,
 the bindingInfo will be used with a
 the viewLabelFieldPropertyName as its bindingPath. If neither are set,
 the default title attribute from the dataObject's metadata (determined by the
 defaultBindingObjectPath's object) will be used.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="theme">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[The theme which contains stylesheets for this view]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that is executed at the beginning of page load (before any other script)

 
 Many used to set server variables client side
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[View name provides an identifier for a view within a type. That is if a
 set of View instances have the same values for the
 properties that are used to retrieve them by their type, the name can be
 given to further qualify the view that should be retrieved.
 
 A view type like the LookupView might have several views for
 the same object class, but one that is the 'default' lookup and another
 that is the 'advanced' lookup. Therefore the name on the first could be
 set to 'default', and likewise the name for the second 'advanced'.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Provides configuration for displaying a link to the view from an
 application menu]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maintenanceAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates what maintenance action (new, edit, copy) was
 requested]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stateMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets the stateMapping.

 The state mapping object is used to determine the state information for a view,
 it must include an ordered list of states, and where to find the state information for the view.
 A stateMapping must be set for state based validation to occur.  When stateMapping information is
 not included, the view's model is considered stateless and all constraints will apply regardless of their
 state information or replacements (ie, they will function as they did in version 2.1).]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[For View types that work primarily with one nested object of
 the form (for instance document, or bo) the default binding object path
 can be set for each of the views DataBinding components. If
 the component does not set its own binding object path it will inherit
 the default]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Holds field indexes of the View instance for retrieval]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewTypeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigationBlockUI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderForm">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteFYI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class of the Form that should be used with the View
 instance. The form is the top level object for all the view's data and is
 used to present and accept data in the user interface. All form classes
 should extend UifFormBase]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateClientSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="navigation">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[NavigationGroup instance for the View
 
 Provides configuration necessary to render the navigation. This includes
 navigation items in addition to configuration for the navigation
 renderer.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="presentationController">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[PresentationController that should be used for the View instance

 
 The presentation controller is consulted to determine component (group,
 field) state such as required, read-only, and hidden. The presentation
 controller does not take into account user permissions. The presentation
 controller can also output action flags and edit modes that will be set
 onto the view instance and can be referred to by conditional expressions
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="oldObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gives the binding path to the old object (record being edited) to display
 for comparison]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Footer for the application containing the view

 
 When deploying outside a portal, the application header and footer property can be configured to
 display a consistent header/footer across all views. Here such things as application links, copyrights
 and so on can be rendered.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteAttachments">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataObjectClassName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name for the object the maintenance document applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderBreadcrumbsInView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the breadcrumbs should be rendered in the view or if they have been rendered in
 the application header

 
 For layout purposes it is sometimes necessary to render the breadcrumbs in the application header. This flag
 indicates that is being done (by setting to false) and therefore should not be rendered in the view template.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Returns whether the current view supports displaying KualiCode's name as additional display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="breadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[Breadcrumb widget used for displaying homeward path and history]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the view allows read only fields to be specified on the request URL which will
 override the view setting

 
 If enabled, the readOnlyFields request parameter can be sent to indicate fields that should be set read only
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the form should be validated for dirtyness

 
 For FormView, it's necessary to validate when the user tries to navigate out of the form. If set, all the
 InputFields will be validated on refresh, navigate, cancel or close Action or on form
 unload and if dirty, displays a message and user can decide whether to continue with
 the action or stay on the form. For lookup and inquiry, it's not needed to validate.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Declares additional CSS files that should be included with the
 View. These files are brought into the HTML page along with
 common CSS files configured for the Rice application. Each entry should
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/css/stacked-view.css', '../css/stacked-view.css',
 'http://my.edu/web/stacked-view.css'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[whether to use growls to show messages - info, warning and error

 Growls use the messages contained in the message map. If enabled, info
 messages in their entirety will be displayed in growls, for warning and
 error messages a growl message will notify the user that these messages
 exist on the page.

  If this setting is disabled, it is recommended that
 infoMessage display be enabled for the page ValidationMessages bean in order to
 display relevant information to the user. Note: the growl scripts are
 built out in the PageGroup class.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="editModes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Map of edit modes that enabled for the view
 
 These can be used in conditional expressions in the dictionary or by
 other UI logic
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Declares additional script files that should be included with the
 View. These files are brought into the HTML page along with
 common script files configured for the Rice application. Each entry
 contain the path to the CSS file, either a relative path, path from web
 root, or full URI
 
 e.g. '/krad/scripts/myScript.js', '../scripts/myScript.js',
 'http://my.edu/web/myScript.js'
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growls">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Growls widget which sets up global settings for the growls used in this
 view and its pages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the form (model) associated with the view should be stored in the user session

 
 The form class (or model) is used to hold the data that backs the view along with the built view object. Storing
 the form instance in session allows many things:

 
 
-Data does not need to be rebuilt for each server request (for example a collection)
 
-Data that does not need to go to the user can remain on the form, reducing the size of the response and
 improving security
 
-Data can be keep around in a 'pre-save' state. When requested by the user changes can then be persisted to
 the database
 
-Certain information about the view that was rendered, such as input fields, collection paths, and refresh
 components can be kept on the form to support UI interaction
 

 Setting this flag to false will prevent the form from being kept in session and as a result will limit what can
 be done by the framework. In almost all cases this is not recommended.
 

 
 Note all forms will be cleared when the user session expires (based on the rice configuration). In addition, the
 framework enables clear points on certain actions to remove the form when it is no longer needed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preloadPoolSize">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the size of the pool that will contain pre-loaded views

 
 The spring loading of some views can take a few seconds which hurts performance. The framework supports
 pre-loading of view instances so they are available right away when a request is made. This property configures
 how many view instances will be pre-loaded. A value of 0 (the default) means no view instances will be
 pre-loaded
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuGroupName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Provides a grouping string for the view to group its menu link (within a
 portal for instance)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="header-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style that should be applied to the header h tag

 
 Note the style given here applies to only the header text. The style
 property inherited from the Component interface can be used
 to set the style for the whole header div (which could include a nested
 Group)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rightGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents to the right of the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lowerGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents below the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="upperGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents above the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richHeaderMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the header if headerText is using rich message
 tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style classes that should be applied to the header text (h tag)

 
 Note the style class given here applies to only the header text. The
 style class property inherited from the Component interface
 can be used to set the class for the whole field div (which could
 include a nested Group)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[List of Component instances contained in the lower header group

 
 Convenience method for configuration to get the items List from the
 lower header group
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[Text that should be displayed on the header]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[Gets the inlineComponents used by index in a Header that has rich message component index tags in its headerText]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerLevel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[HTML header level (h1 ... h6) that should be applied to the header text]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="headerTagStyle">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style that should be applied to the header h tag

 
 Note the style given here applies to only the header text. The style
 property inherited from the Component interface can be used
 to set the style for the whole header div (which could include a nested
 Group)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="rightGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents to the right of the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lowerGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents below the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="upperGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents above the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="richHeaderMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the header if headerText is using rich message
 tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerTagCssClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style classes that should be applied to the header text (h tag)

 
 Note the style class given here applies to only the header text. The
 style class property inherited from the Component interface
 can be used to set the class for the whole field div (which could
 include a nested Group)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
              <![CDATA[Text that should be displayed on the header]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerLevel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en">
              <![CDATA[HTML header level (h1 ... h6) that should be applied to the header text]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="syntaxHighlighter-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sourceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[The text to render with syntax highlighting]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="pluginCssClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The class that will be set on the pre tags

 
 The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="sourceCode">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en">
              <![CDATA[The text to render with syntax highlighting]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="pluginCssClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The class that will be set on the pre tags

 
 The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tooltip-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseHover" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Indicates the tooltip should be triggered by mouse hover]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocus" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Indicates the tooltip should be triggered by focus/blur]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipContent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Plain text or HTML string that will be used to render the tooltip div]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="onMouseHover">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
              <![CDATA[Indicates the tooltip should be triggered by mouse hover]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onFocus">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
              <![CDATA[Indicates the tooltip should be triggered by focus/blur]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tooltipContent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en">
              <![CDATA[Plain text or HTML string that will be used to render the tooltip div]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="dataObjectEntry-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                   type="org.kuali.rice.krad.datadictionary.state.StateMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exporterClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectDescription" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="helpDefinition"
                   type="org.kuali.rice.krad.datadictionary.HelpDefinition">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="titleAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="boNotesEnabled" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primaryKeys" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inactivationBlockingDefinitions">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupByAttributesForEffectiveDating" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.AttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="relationships">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.RelationshipDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="collections">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.CollectionDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="stateMapping">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exporterClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectDescription">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="helpDefinition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="titleAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="name">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="boNotesEnabled">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="primaryKeys">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupByAttributesForEffectiveDating">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="compareConfig-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="bindingObjectPath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Returns the path (from the form) for the object to compare to

 
 When a comparison view is rendered, a group will be rendered for each
 comparison object using the fields defined on the view. This gives the
 path to one of the comparison objects
 

 
 e.g. For maintenance documents the compare object paths would be
 document.newMaintainableObject.businessObject and
 document.oldMaintainableObject.businessObject
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en">
            <![CDATA[Indicates whether the compare group should be read-only]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Sets the order value that will be used to determine where the compare
 group should be placed in relation to the other compare groups

 
 For example if the compare groups are being rendered from left to right
 in columns, a lower order value would be placed to the left of a compare
 group with a higher order value
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="compareToForValueChange" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether this comparable group's field values should be compared
 to when highlighting changes of values between comparables (versions)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="highlightValueChange" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the fields in this comparable group should be
 highlighted if their values defer from the comparable group marked for
 comparison]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idSuffix" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Specifies an id suffix to use for the generated comparison fields

 
 For the given string, all components created for the comparison group
 will contain the string on their id. This can be helpful for scripting.
 If not given, the items will receive a default id suffix
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Text that should display on the header for the compare group

 
 In the comparison view each compare group can be labeled, this gives the
 text that should be used for that label. For example in the maintenance
 view the compare record is labeled 'Old' to indicate it is the old
 version of the record
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="bindingObjectPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Returns the path (from the form) for the object to compare to

 
 When a comparison view is rendered, a group will be rendered for each
 comparison object using the fields defined on the view. This gives the
 path to one of the comparison objects
 

 
 e.g. For maintenance documents the compare object paths would be
 document.newMaintainableObject.businessObject and
 document.oldMaintainableObject.businessObject
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="readOnly">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en">
          <![CDATA[Indicates whether the compare group should be read-only]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="order">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Sets the order value that will be used to determine where the compare
 group should be placed in relation to the other compare groups

 
 For example if the compare groups are being rendered from left to right
 in columns, a lower order value would be placed to the left of a compare
 group with a higher order value
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="compareToForValueChange">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether this comparable group's field values should be compared
 to when highlighting changes of values between comparables (versions)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="highlightValueChange">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the fields in this comparable group should be
 highlighted if their values defer from the comparable group marked for
 comparison]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idSuffix">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Specifies an id suffix to use for the generated comparison fields

 
 For the given string, all components created for the comparison group
 will contain the string on their id. This can be helpful for scripting.
 If not given, the items will receive a default id suffix
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="headerText">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Text that should display on the header for the compare group

 
 In the comparison view each compare group can be labeled, this gives the
 text that should be used for that label. For example in the maintenance
 view the compare record is labeled 'Old' to indicate it is the old
 version of the record
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="businessObjectEntry-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping"
                   type="org.kuali.rice.krad.datadictionary.state.StateMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exporterClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="baseBusinessObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectDescription" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="helpDefinition"
                   type="org.kuali.rice.krad.datadictionary.HelpDefinition">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="titleAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="boNotesEnabled" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primaryKeys" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inactivationBlockingDefinitions">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.AttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupByAttributesForEffectiveDating" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="relationships">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.RelationshipDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="collections">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.CollectionDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="stateMapping">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exporterClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="baseBusinessObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectDescription">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="helpDefinition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="titleAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="name">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="boNotesEnabled">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="primaryKeys">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupByAttributesForEffectiveDating">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.BusinessObjectEntry" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="hiddenControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.HiddenControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="listLayout-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="context">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="orderedList" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[If true, this list layout is an ordered list (ol).  Otherwise, the the layout is an unordered list (ul)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="template">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="templateName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="style">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="context">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="orderedList">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[If true, this list layout is an ordered list (ol).  Otherwise, the the layout is an unordered list (ul)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="cssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.ListLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="tableCollectionLayout-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="groupingPropertyNames" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets the list of property names to use for grouping.

 
 When this property is set, grouping for this
 collection will be enabled and the lines of the collection will be grouped by the propertyName(s) supplied.
 Supplying multiple property names will cause the grouping to be on multiple fields and ordered
 alphabetically on "propetyValue1, propertyValue2" (this is also how the group title will display for each
 group).
 The property names supplied must be relative to the line, so #lp
 SHOULD NOT be used (it is assumed automatically).
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sequencePropertyName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Attribute name to use as sequence value. For each collection line the
 value of this field on the line will be retrieved and used as the
 sequence value]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="actionColumnIndex" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[Indicates the index of the action column]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderRowFirstCellHeader" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first cell of each row should be rendered as a header cell (th)

 
 When this flag is turned on, the first cell for each row will be rendered as a header cell. If
 #isRenderAlternatingHeaderColumns() is false, the remaining cells for the row will be rendered
 as data cells, else they will alternate between cell headers
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupingPrefix" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Get the groupingPrefix.  The groupingPrefix is used to prefix the generated title (not used when
 groupingTitle is set directly) when using groupingPropertyNames.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderAlternatingHeaderColumns" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether header columns (th for tables) should be rendered for
 every other item (alternating)

 
 If true the first cell of each row will be rendered as an header, with
 every other cell in the row as a header
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="useShortLabels" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the short label for the collection field should be used
 as the table header or the regular label]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rowDetailsLinkName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[Name of the link for displaying row details in a TableLayoutManager CollectionGroup]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="hiddenColumns" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Holds propertyNames for the ones meant to be hidden since columns are visible by default

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupTotalLabelPrototype"
                   type="org.kuali.rice.krad.uif.element.Label">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The groupTotal label to use when renderOnlyLeftTotalLabels is TRUE.  This label will appear in the left most
 column.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="totalLabel" type="org.kuali.rice.krad.uif.element.Label">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The total label to use when renderOnlyLeftTotalLabels is TRUE for total.
 This label will appear in the left most column.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="numberOfColumns" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates the number of columns that should make up one row of data

 
 If the item count is greater than the number of columns, a new row will
 be created to render the remaining items (and so on until all items are
 placed).
 

 
 Note this does not include any generated columns by the layout manager,
 so the final column count could be greater (if label fields are
 separate).
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rowCssClasses" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The list of styles for each row

 
 Each entry in the list gives the style for the row with the same index. This style will be added the the 
 tag
 when the table rows are rendered in the grid.tag. This is used to store the styles for newly added lines and
 other special cases like the add item row.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyAlternatingRowStyles" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether alternating row styles should be applied

 
 Indicator to layout manager templates to apply alternating row styles.
 See the configured template for the actual style classes used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="richTable" type="org.kuali.rice.krad.uif.widget.RichTable">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Widget associated with the table to add functionality such as sorting,
 paging, and export]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderFirstRowHeader" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first row of items rendered should all be rendered as table header (th) cells

 
 Generally when using a grid layout all the cells will be tds or alternating th/td (with the label in the
 th cell). However in some cases it might be desired to display the labels in one row as table header cells (th)
 followed by a row with the corresponding fields in td cells. When this is enabled this type of layout is
 possible
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="addLineGroup" type="org.kuali.rice.krad.uif.container.Group">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[When #isSeparateAddLine() is true, this group will be used to render the add line

 
 This group can be used to configure how the add line will be rendered. For example the layout manager configured
 on the group will be used to rendered the add line fields. If the header (title) is not set on the group, it
 will be set from
 org.kuali.rice.krad.uif.container.CollectionGroup#getAddLabel(). In addition,
 org.kuali.rice.krad.uif.container.CollectionGroup#getAddLineActions() will be added to the group
 footer items.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="showGroupTotal" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets showGroupTotal. showGroupTotal shows/calculates the total field for each grouping when true (and only
 when the table actually has grouping turned on), otherwise it is not rendered.
 
 Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the ColumnConfigurationInfo setting.
 Otherwise, the ColumnConfigurationInfo setting takes precedence.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="showPageTotal" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not rendered.
 
 Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the ColumnConfigurationInfo setting.
 Otherwise, the ColumnConfigurationInfo setting takes precedence.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="actionColumnPlacement" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates the actions column placement

 
 Valid values are 'LEFT', 'RIGHT' or any valid number. The default is 'RIGHT' or '-1'. The column placement index
 takes all displayed columns, including sequence and selection columns, into account.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="actionFieldPrototype"
                   type="org.kuali.rice.krad.uif.field.FieldGroup">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[FieldGroup instance to serve as a prototype for the actions
 column. For each collection line this instance is copied and adjusted as
 necessary. Note the actual actions for the group come from the collection
 groups actions List
 (org.kuali.rice.krad.uif.container.CollectionGroup.getActions()). The
 FieldGroup prototype is useful for setting styling of the actions column
 and for the layout of the action fields. Note also the label associated
 with the prototype is used for the action column header]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupingTitle" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Get the groupingTitle.  The groupingTitle MUST contain a SpringEL expression to uniquely identify a
 group's line (ie it cannot be a static string because each group must be identified by some value).
 This overrides groupingPropertyNames(if set) because it provides full control of grouping value used by
 the collection.  SpringEL defined here must use #lp if referencing values of the line.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sequenceFieldPrototype" type="org.kuali.rice.krad.uif.field.Field">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Field instance to serve as a prototype for the
 sequence field. For each collection line this instance is copied and
 adjusted as necessary]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="numberOfDataColumns" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderOnlyLeftTotalLabels" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[When true, labels for the totals fields will only appear in the left most column.  Showing of the totals
 is controlled by the settings on the TableLayoutManager itself when this property is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="columnCalculations">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets the column calculations.  This is a list of ColumnCalcuationInfo that when set provides calculations
 to be performed on the columns they specify.  These calculations appear in the table's footer.  This feature is
 only available when using richTable functionality.]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.util.ColumnCalculationInfo">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="headerLabelPrototype" type="org.kuali.rice.krad.uif.element.Label">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Label instance to use as a prototype for creating the
 tables header fields. For each header field the prototype will be copied
 and adjusted as necessary]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="showTotal" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not rendered.
 
 Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the ColumnConfigurationInfo setting.
 Otherwise, the ColumnConfigurationInfo setting takes precedence.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderSequenceField" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the sequence field should be rendered for the
 collection]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sortableColumns" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Holds the propertyNames for columns that are to be sorted

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="pageTotalLabel" type="org.kuali.rice.krad.uif.element.Label">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The pageTotal label to use when renderOnlyLeftTotalLabels is TRUE for total.  This label will appear in the
 left most column.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyDefaultCellWidths" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the manager should default the cell widths

 
 If true, the manager will set the cell width by equally dividing by the
 number of columns
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="subCollectionFieldGroupPrototype"
                   type="org.kuali.rice.krad.uif.field.FieldGroup">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Field group instance that is used as a prototype for creating the
 sub-collection field groups. For each sub-collection a copy of the
 prototype is made and the list will be passed to the layout manager
 buildLine method]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="suppressLineWrapping" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the number of columns for the table data should match
 the number of fields given in the container's items list (so that each
 field takes up one column without wrapping), this overrides the configured
 numberOfColumns

 
 If set to true during the initialize phase the number of columns will be
 set to the size of the container's field list, if false the configured
 number of columns is used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rowDetailsGroup" type="org.kuali.rice.krad.uif.container.Group">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The row details info group to use when using a TableLayoutManager with the a richTable.

 This group will be displayed when the user clicks the "Details" link/image on a row.
 This allows extra/long data to be hidden in table rows and then revealed during interaction
 with the table without the need to leave the page.  Allows for any group content.

 Does not currently work with javascript required content.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="separateAddLine" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the add line should be rendered in a separate group, or as part of the table (first line)

 
 When separate add line is enabled, the fields for the add line will be placed in the #getAddLineGroup().
 This group can be used to configure the add line presentation. In addition to the fields, the header on the
 group (unless already set) will be set to
 org.kuali.rice.krad.uif.container.CollectionGroup#getAddLabel() and the add line actions will
 be placed into the group's footer.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rowDetailsSwapActionImage" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[If true, the row details link will use an image instead of a link to display row details in
 a TableLayoutManager CollectionGroup]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="generateAutoSequence" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the sequence field should be generated with the current
 line number

 
 If set to true the sequence field prototype will be changed to a message
 field (if not already a message field) and the text will be set to the
 current line number
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="context">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="repeatHeader" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the header should be repeated before each collection
 row. If false the header is only rendered at the beginning of the table]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="selectFieldPrototype" type="org.kuali.rice.krad.uif.field.Field">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Field instance that serves as a prototype for creating the select field on each line when
 org.kuali.rice.krad.uif.container.CollectionGroup#isIncludeLineSelectionField() is true

 
 This prototype can be used to set the control used for the select field (generally will be a checkbox control)
 in addition to styling and other setting. The binding path will be formed with using the
 org.kuali.rice.krad.uif.container.CollectionGroup#getLineSelectPropertyName() or if not set the
 framework
 will use org.kuali.rice.krad.web.form.UifFormBase#getSelectedCollectionLines()
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="groupingPropertyNames">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets the list of property names to use for grouping.

 
 When this property is set, grouping for this
 collection will be enabled and the lines of the collection will be grouped by the propertyName(s) supplied.
 Supplying multiple property names will cause the grouping to be on multiple fields and ordered
 alphabetically on "propetyValue1, propertyValue2" (this is also how the group title will display for each
 group).
 The property names supplied must be relative to the line, so #lp
 SHOULD NOT be used (it is assumed automatically).
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="style">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sequencePropertyName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Attribute name to use as sequence value. For each collection line the
 value of this field on the line will be retrieved and used as the
 sequence value]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="actionColumnIndex">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[Indicates the index of the action column]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderRowFirstCellHeader">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first cell of each row should be rendered as a header cell (th)

 
 When this flag is turned on, the first cell for each row will be rendered as a header cell. If
 #isRenderAlternatingHeaderColumns() is false, the remaining cells for the row will be rendered
 as data cells, else they will alternate between cell headers
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="template">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupingPrefix">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Get the groupingPrefix.  The groupingPrefix is used to prefix the generated title (not used when
 groupingTitle is set directly) when using groupingPropertyNames.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderAlternatingHeaderColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether header columns (th for tables) should be rendered for
 every other item (alternating)

 
 If true the first cell of each row will be rendered as an header, with
 every other cell in the row as a header
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="useShortLabels">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the short label for the collection field should be used
 as the table header or the regular label]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="rowDetailsLinkName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[Name of the link for displaying row details in a TableLayoutManager CollectionGroup]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="hiddenColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Holds propertyNames for the ones meant to be hidden since columns are visible by default

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupTotalLabelPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The groupTotal label to use when renderOnlyLeftTotalLabels is TRUE.  This label will appear in the left most
 column.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="totalLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The total label to use when renderOnlyLeftTotalLabels is TRUE for total.
 This label will appear in the left most column.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="numberOfColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates the number of columns that should make up one row of data

 
 If the item count is greater than the number of columns, a new row will
 be created to render the remaining items (and so on until all items are
 placed).
 

 
 Note this does not include any generated columns by the layout manager,
 so the final column count could be greater (if label fields are
 separate).
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="rowCssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The list of styles for each row

 
 Each entry in the list gives the style for the row with the same index. This style will be added the the 
 tag
 when the table rows are rendered in the grid.tag. This is used to store the styles for newly added lines and
 other special cases like the add item row.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyAlternatingRowStyles">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether alternating row styles should be applied

 
 Indicator to layout manager templates to apply alternating row styles.
 See the configured template for the actual style classes used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="richTable">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Widget associated with the table to add functionality such as sorting,
 paging, and export]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderFirstRowHeader">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first row of items rendered should all be rendered as table header (th) cells

 
 Generally when using a grid layout all the cells will be tds or alternating th/td (with the label in the
 th cell). However in some cases it might be desired to display the labels in one row as table header cells (th)
 followed by a row with the corresponding fields in td cells. When this is enabled this type of layout is
 possible
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="addLineGroup">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[When #isSeparateAddLine() is true, this group will be used to render the add line

 
 This group can be used to configure how the add line will be rendered. For example the layout manager configured
 on the group will be used to rendered the add line fields. If the header (title) is not set on the group, it
 will be set from
 org.kuali.rice.krad.uif.container.CollectionGroup#getAddLabel(). In addition,
 org.kuali.rice.krad.uif.container.CollectionGroup#getAddLineActions() will be added to the group
 footer items.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="showGroupTotal">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets showGroupTotal. showGroupTotal shows/calculates the total field for each grouping when true (and only
 when the table actually has grouping turned on), otherwise it is not rendered.
 
 Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the ColumnConfigurationInfo setting.
 Otherwise, the ColumnConfigurationInfo setting takes precedence.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="showPageTotal">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not rendered.
 
 Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the ColumnConfigurationInfo setting.
 Otherwise, the ColumnConfigurationInfo setting takes precedence.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="actionColumnPlacement">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates the actions column placement

 
 Valid values are 'LEFT', 'RIGHT' or any valid number. The default is 'RIGHT' or '-1'. The column placement index
 takes all displayed columns, including sequence and selection columns, into account.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="actionFieldPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[FieldGroup instance to serve as a prototype for the actions
 column. For each collection line this instance is copied and adjusted as
 necessary. Note the actual actions for the group come from the collection
 groups actions List
 (org.kuali.rice.krad.uif.container.CollectionGroup.getActions()). The
 FieldGroup prototype is useful for setting styling of the actions column
 and for the layout of the action fields. Note also the label associated
 with the prototype is used for the action column header]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupingTitle">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Get the groupingTitle.  The groupingTitle MUST contain a SpringEL expression to uniquely identify a
 group's line (ie it cannot be a static string because each group must be identified by some value).
 This overrides groupingPropertyNames(if set) because it provides full control of grouping value used by
 the collection.  SpringEL defined here must use #lp if referencing values of the line.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sequenceFieldPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Field instance to serve as a prototype for the
 sequence field. For each collection line this instance is copied and
 adjusted as necessary]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="numberOfDataColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderOnlyLeftTotalLabels">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[When true, labels for the totals fields will only appear in the left most column.  Showing of the totals
 is controlled by the settings on the TableLayoutManager itself when this property is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="templateName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="headerLabelPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Label instance to use as a prototype for creating the
 tables header fields. For each header field the prototype will be copied
 and adjusted as necessary]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="showTotal">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Gets showTotal. showTotal shows/calculates the total field when true, otherwise it is not rendered.
 
 Only used when renderOnlyLeftTotalLabels is TRUE, this overrides the ColumnConfigurationInfo setting.
 Otherwise, the ColumnConfigurationInfo setting takes precedence.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderSequenceField">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the sequence field should be rendered for the
 collection]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sortableColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Holds the propertyNames for columns that are to be sorted

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="pageTotalLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The pageTotal label to use when renderOnlyLeftTotalLabels is TRUE for total.  This label will appear in the
 left most column.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyDefaultCellWidths">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the manager should default the cell widths

 
 If true, the manager will set the cell width by equally dividing by the
 number of columns
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="subCollectionFieldGroupPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Field group instance that is used as a prototype for creating the
 sub-collection field groups. For each sub-collection a copy of the
 prototype is made and the list will be passed to the layout manager
 buildLine method]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="suppressLineWrapping">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the number of columns for the table data should match
 the number of fields given in the container's items list (so that each
 field takes up one column without wrapping), this overrides the configured
 numberOfColumns

 
 If set to true during the initialize phase the number of columns will be
 set to the size of the container's field list, if false the configured
 number of columns is used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="rowDetailsGroup">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[The row details info group to use when using a TableLayoutManager with the a richTable.

 This group will be displayed when the user clicks the "Details" link/image on a row.
 This allows extra/long data to be hidden in table rows and then revealed during interaction
 with the table without the need to leave the page.  Allows for any group content.

 Does not currently work with javascript required content.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="separateAddLine">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the add line should be rendered in a separate group, or as part of the table (first line)

 
 When separate add line is enabled, the fields for the add line will be placed in the #getAddLineGroup().
 This group can be used to configure the add line presentation. In addition to the fields, the header on the
 group (unless already set) will be set to
 org.kuali.rice.krad.uif.container.CollectionGroup#getAddLabel() and the add line actions will
 be placed into the group's footer.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="rowDetailsSwapActionImage">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[If true, the row details link will use an image instead of a link to display row details in
 a TableLayoutManager CollectionGroup]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="generateAutoSequence">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the sequence field should be generated with the current
 line number

 
 If set to true the sequence field prototype will be changed to a message
 field (if not already a message field) and the text will be set to the
 current line number
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="context">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="repeatHeader">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Indicates whether the header should be repeated before each collection
 row. If false the header is only rendered at the beginning of the table]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="selectFieldPrototype">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en"><![CDATA[Field instance that serves as a prototype for creating the select field on each line when
 org.kuali.rice.krad.uif.container.CollectionGroup#isIncludeLineSelectionField() is true

 
 This prototype can be used to set the control used for the select field (generally will be a checkbox control)
 in addition to styling and other setting. The binding path will be formed with using the
 org.kuali.rice.krad.uif.container.CollectionGroup#getLineSelectPropertyName() or if not set the
 framework
 will use org.kuali.rice.krad.web.form.UifFormBase#getSelectedCollectionLines()
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="cssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.TableLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="anyCharacterPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="textControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="datePicker" type="org.kuali.rice.krad.uif.widget.DatePicker">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="textExpand" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="watermarkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="datePicker">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="textExpand">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="watermarkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.TextControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="floatingPointPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="patternTypeKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[Message key used to identify the validation pattern]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowNegative" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="patternTypeKey">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"><![CDATA[Message key used to identify the validation pattern]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowNegative">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.FloatingPointPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="propertyReplacer-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Name of the property on the Component the property replacer is associated with that
 will be set when the condition for the replacer succeeds

 
 Note the property name must be readable/writable on the component. The property name may
 be nested, and include Map or List references.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="replacement" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the Object that should be used to set the property value if the replacers condition
 evaluates to true

 
 Note the configured Object must be valid for the type given by the property on the Component. Standard
 property editors will be used for setting the property value
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="condition" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the expression that should be evaluated to determine whether or not
 the property replacement should be made

 
 Expression follows SPEL and may access any model data along with any variables
 available in the context for the Component. The expression should evaluate to
 a boolean. If the resulting boolean is true, the object given by #getReplacement()
 will be set as the value for the associated property on the component. If the resulting
 boolean is false, no action will take place
 

 
 Note the value does not need to contain the expression placeholder @{}
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="propertyName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Name of the property on the Component the property replacer is associated with that
 will be set when the condition for the replacer succeeds

 
 Note the property name must be readable/writable on the component. The property name may
 be nested, and include Map or List references.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="replacement">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the Object that should be used to set the property value if the replacers condition
 evaluates to true

 
 Note the configured Object must be valid for the type given by the property on the Component. Standard
 property editors will be used for setting the property value
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="condition">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en"><![CDATA[Gives the expression that should be evaluated to determine whether or not
 the property replacement should be made

 
 Expression follows SPEL and may access any model data along with any variables
 available in the context for the Component. The expression should evaluate to
 a boolean. If the resulting boolean is true, the object given by #getReplacement()
 will be set as the value for the associated property on the component. If the resulting
 boolean is false, no action will take place
 

 
 Note the value does not need to contain the expression placeholder @{}
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.component.PropertyReplacer" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="validDataPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                  xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.ValidDataPatternConstraint"
                           xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="constraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                             xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                           xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint"
                           xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="searchingAttribute-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="attributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="showAttributeInSearchCriteria" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="businessObjectClassName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="showAttributeInResultSet" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="attributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="showAttributeInSearchCriteria">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="businessObjectClassName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="showAttributeInResultSet">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.SearchingAttribute" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="maskFormatterLiteral-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="literal" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterLiteral" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="literal">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.mask.MaskFormatterLiteral" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="dataFieldSecurity-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributeSecurity"
                   type="org.kuali.rice.krad.datadictionary.AttributeSecurity">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
            <![CDATA[Attribute security instance configured or picked up for the field]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="viewInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="attributeSecurity">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en">
          <![CDATA[Attribute security instance configured or picked up for the field]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.DataFieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="activeCollectionFilter-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="label-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="requiredMessagePlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="requiredMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Message instance that will display a required indicator

 
 To indicate a field must have a value (required input) the required
 message field can be set to display an indicator or message along with
 the label. The message field also dictates the styling of the required
 message
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[Text that will display as the label]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderColon" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether a colon should be rendered after the label text,
 generally used when the label appears to the left of the field's control
 or value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[Gets the inlineComponents used by index in a Label that has rich message component index tags in its labelText]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelForComponentId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates the id for the component the label applies to
 
 Used for setting the labelFor attribute of the corresponding HTML
 element. Note this gets set automatically by the framework during the
 initialize phase
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richLabelMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the label if labelText is using rich message tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="requiredMessagePlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="requiredMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Message instance that will display a required indicator

 
 To indicate a field must have a value (required input) the required
 message field can be set to display an indicator or message along with
 the label. The message field also dictates the styling of the required
 message
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en">
              <![CDATA[Text that will display as the label]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderColon">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates whether a colon should be rendered after the label text,
 generally used when the label appears to the left of the field's control
 or value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelForComponentId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Indicates the id for the component the label applies to
 
 Used for setting the labelFor attribute of the corresponding HTML
 element. Note this gets set automatically by the framework during the
 initialize phase
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="richLabelMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Label" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the label if labelText is using rich message tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="message-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="parseComponents" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[Indicates if the inline components must be parsed for rich messages]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Text that makes up the message that will be displayed.

 If special characters [] are detected the message inserts special content at that location.
 The types of features supported are (note that &lt;&gt; are not part of the content below,
 they specify placeholders):
 
 
-[id=&lt;component id&gt;] - insert component with id specified at that location in the message
 
-[n] - insert component at index n from the inlineComponent list
 
-[&lt;html tag&gt;][/&lt;html tag&gt;] - insert html content directly into the message content at that
 location,
 without the need to escape the &lt;&gt; characters in xml
 
-[color=&lt;html color code/name&gt;][/color] - wrap content in color tags to make text that color
 in the message
 
-[css=&lt;css classes&gt;][/css] - apply css classes specified to the wrapped content - same as wrapping
 the content in span with class property set
 
 If the [] characters are needed in message text, they need to be declared with an escape character: \\[ \\]
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="generateSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[If true, generate the span around this message (default).  When false, skip span generation for this
 message - this has the additional effect the css classes/style classes will be lost for this message.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The inlineComponents are a list of components in order by index.

 inlineComponents is only used when the message is using rich message functionality.  A message
 with [0] will reference component at index 0 of this list and insert it at that place in the message,
 and likewise [1] will reference item 1, etc.  If the index referenced is out of bounds (or list doesnt exist),
 an error will be thrown during message parse.]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="parseComponents">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en">
              <![CDATA[Indicates if the inline components must be parsed for rich messages]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="messageText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[Text that makes up the message that will be displayed.

 If special characters [] are detected the message inserts special content at that location.
 The types of features supported are (note that &lt;&gt; are not part of the content below,
 they specify placeholders):
 
 
-[id=&lt;component id&gt;] - insert component with id specified at that location in the message
 
-[n] - insert component at index n from the inlineComponent list
 
-[&lt;html tag&gt;][/&lt;html tag&gt;] - insert html content directly into the message content at that
 location,
 without the need to escape the &lt;&gt; characters in xml
 
-[color=&lt;html color code/name&gt;][/color] - wrap content in color tags to make text that color
 in the message
 
-[css=&lt;css classes&gt;][/css] - apply css classes specified to the wrapped content - same as wrapping
 the content in span with class property set
 
 If the [] characters are needed in message text, they need to be declared with an escape character: \\[ \\]
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="generateSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Message" xml:lang="en"><![CDATA[If true, generate the span around this message (default).  When false, skip span generation for this
 message - this has the additional effect the css classes/style classes will be lost for this message.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="link-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="linkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Returns the label of the link]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="href" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Returns the href text]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lightBox" type="org.kuali.rice.krad.uif.widget.LightBox">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Returns the LightBox used to open the link in]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="target" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[Returns the target that will be used to specify where to open the href]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="linkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
              <![CDATA[Returns the label of the link]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="href">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
              <![CDATA[Returns the href text]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="lightBox">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
              <![CDATA[Returns the LightBox used to open the link in]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="target">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Link" xml:lang="en">
              <![CDATA[Returns the target that will be used to specify where to open the href]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="alphaNumericPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBrackets" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="lowerCase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowEquals" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowApostrophe" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPlus" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowBackslash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowParenthesis" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowExclaimation" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPeriod" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAmpersand" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowComma" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPercent" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowPound" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowQuestionMark" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="upperCase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowCurlyBraces" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowLessThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowGreaterThan" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAll" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAsterisk" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDoubleQuote" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowAtSign" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowSemiColon" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowForwardSlash" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowUnderscore" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowDollar" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                  xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="allowBrackets">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowColon">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="lowerCase">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowEquals">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowApostrophe">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPlus">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowBackslash">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowParenthesis">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowExclaimation">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPeriod">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAmpersand">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowComma">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPercent">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowPound">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowQuestionMark">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="upperCase">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowCurlyBraces">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDash">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowLessThan">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowGreaterThan">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAll">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAsterisk">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDoubleQuote">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowAtSign">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowSemiColon">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowForwardSlash">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowUnderscore">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowDollar">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.AlphaNumericPatternConstraint"
                xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="kimGroupControl-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="datePicker" type="org.kuali.rice.krad.uif.widget.DatePicker">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="groupIdPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[The name of the property on the parent object that holds the group id]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="enabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="textExpand" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCodePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[The name of the property on the parent object that holds the group namespace]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="watermarkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="datePicker">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="groupIdPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
              <![CDATA[The name of the property on the parent object that holds the group id]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Retrieves the configured size for the control, which reflects the display width in characters for
 the control within the UI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="enabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
              <![CDATA[Gets the property names of fields that when changed, will enable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[If the control is disabled, gives a reason for why which will be displayed as a tooltip
 on the control]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="textExpand">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
              <![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="namespaceCodePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
              <![CDATA[The name of the property on the parent object that holds the group namespace]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="watermarkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.GroupControl" xml:lang="en">
              <![CDATA[Indicates whether the control is disabled (doesn't allow input)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="actionSecurity-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="performActionAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[Indicates whether the action field has take action authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="performLineActionAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[Indicates whether the line action field has take action authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="performActionAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[Indicates whether the action field has take action authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="performLineActionAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[Indicates whether the line action field has take action authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.element.ActionSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="blockUI-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="blockingImageSource" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Path to an image that will be rendered in the blocking overlay

 
 If specified, the image will be picked up and rendered before the blocking message in
 the overlay. If not given just the message will be displayed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="blockingImageSource">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.BlockUI" xml:lang="en"><![CDATA[Path to an image that will be rendered in the blocking overlay

 
 If specified, the image will be picked up and rendered before the blocking message in
 the overlay. If not given just the message will be displayed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="utf8AnyCharacterPatternConstraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="omitNewline" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="allowWhitespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation
                  source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                  xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="omitNewline">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="allowWhitespace">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="value">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[The Java based regex for valid characters
 This value should include the ^ and $ symbols if needed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation
                source="org.kuali.rice.krad.datadictionary.validation.constraint.UTF8AnyCharacterPatternConstraint"
                xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="viewPresentationController-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="workflowPropertyGroup-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="basePath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowPropertyGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="workflowProperties">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowPropertyGroup" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.WorkflowProperty">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="basePath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.WorkflowPropertyGroup" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="gridLayout-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderAlternatingHeaderColumns" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether header columns (th for tables) should be rendered for
 every other item (alternating)

 
 If true the first cell of each row will be rendered as an header, with
 every other cell in the row as a header
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyDefaultCellWidths" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the manager should default the cell widths

 
 If true, the manager will set the cell width by equally dividing by the
 number of columns
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="suppressLineWrapping" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the number of columns for the table data should match
 the number of fields given in the container's items list (so that each
 field takes up one column without wrapping), this overrides the configured
 numberOfColumns

 
 If set to true during the initialize phase the number of columns will be
 set to the size of the container's field list, if false the configured
 number of columns is used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderRowFirstCellHeader" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first cell of each row should be rendered as a header cell (th)

 
 When this flag is turned on, the first cell for each row will be rendered as a header cell. If
 #isRenderAlternatingHeaderColumns() is false, the remaining cells for the row will be rendered
 as data cells, else they will alternate between cell headers
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="numberOfColumns" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates the number of columns that should make up one row of data

 
 If the item count is greater than the number of columns, a new row will
 be created to render the remaining items (and so on until all items are
 placed).
 

 
 Note this does not include any generated columns by the layout manager,
 so the final column count could be greater (if label fields are
 separate).
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="rowCssClasses" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[The list of styles for each row

 
 Each entry in the list gives the style for the row with the same index. This style will be added the the 
 tag
 when the table rows are rendered in the grid.tag. This is used to store the styles for newly added lines and
 other special cases like the add item row.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyAlternatingRowStyles" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether alternating row styles should be applied

 
 Indicator to layout manager templates to apply alternating row styles.
 See the configured template for the actual style classes used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="context">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderFirstRowHeader" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first row of items rendered should all be rendered as table header (th) cells

 
 Generally when using a grid layout all the cells will be tds or alternating th/td (with the label in the
 th cell). However in some cases it might be desired to display the labels in one row as table header cells (th)
 followed by a row with the corresponding fields in td cells. When this is enabled this type of layout is
 possible
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="template">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="templateName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderAlternatingHeaderColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether header columns (th for tables) should be rendered for
 every other item (alternating)

 
 If true the first cell of each row will be rendered as an header, with
 every other cell in the row as a header
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="style">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyDefaultCellWidths">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the manager should default the cell widths

 
 If true, the manager will set the cell width by equally dividing by the
 number of columns
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="suppressLineWrapping">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the number of columns for the table data should match
 the number of fields given in the container's items list (so that each
 field takes up one column without wrapping), this overrides the configured
 numberOfColumns

 
 If set to true during the initialize phase the number of columns will be
 set to the size of the container's field list, if false the configured
 number of columns is used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderRowFirstCellHeader">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first cell of each row should be rendered as a header cell (th)

 
 When this flag is turned on, the first cell for each row will be rendered as a header cell. If
 #isRenderAlternatingHeaderColumns() is false, the remaining cells for the row will be rendered
 as data cells, else they will alternate between cell headers
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="numberOfColumns">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates the number of columns that should make up one row of data

 
 If the item count is greater than the number of columns, a new row will
 be created to render the remaining items (and so on until all items are
 placed).
 

 
 Note this does not include any generated columns by the layout manager,
 so the final column count could be greater (if label fields are
 separate).
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="rowCssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[The list of styles for each row

 
 Each entry in the list gives the style for the row with the same index. This style will be added the the 
 tag
 when the table rows are rendered in the grid.tag. This is used to store the styles for newly added lines and
 other special cases like the add item row.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyAlternatingRowStyles">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether alternating row styles should be applied

 
 Indicator to layout manager templates to apply alternating row styles.
 See the configured template for the actual style classes used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="context">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderFirstRowHeader">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en"><![CDATA[Indicates whether the first row of items rendered should all be rendered as table header (th) cells

 
 Generally when using a grid layout all the cells will be tds or alternating th/td (with the label in the
 th cell). However in some cases it might be desired to display the labels in one row as table header cells (th)
 followed by a row with the corresponding fields in td cells. When this is enabled this type of layout is
 possible
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="cssClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.layout.GridLayoutManager" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="history-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="dataTable-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hiddenColumns" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Holds propertyNames for the ones meant to be hidden since columns are visible by default

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richTable" type="org.kuali.rice.krad.uif.widget.RichTable">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[Widget that will render the data table client side]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ajaxSource" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Specifies a URL for acquiring the table data with ajax

 
 When the ajax source URL is specified the rich table plugin will retrieve the data by invoking the URL and
 building the table rows from the result. This is different from the standard use of the rich table plugin
 with uses progressive enhancement to decorate a table that has already been rendereed
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sortableColumns" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Holds the propertyNames for columns that are to be sorted

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="hiddenColumns">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Holds propertyNames for the ones meant to be hidden since columns are visible by default

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="richTable">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en">
              <![CDATA[Widget that will render the data table client side]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ajaxSource">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Specifies a URL for acquiring the table data with ajax

 
 When the ajax source URL is specified the rich table plugin will retrieve the data by invoking the URL and
 building the table rows from the result. This is different from the standard use of the rich table plugin
 with uses progressive enhancement to decorate a table that has already been rendereed
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="sortableColumns">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.DataTable" xml:lang="en"><![CDATA[Holds the propertyNames for columns that are to be sorted

 Duplicate entries are ignored and the order of entries is not significant]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="pageValidationMessages-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayHeaderMessageSummary" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="errors" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The list of error messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalKeysToMatch" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[AdditionalKeysToMatch is an additional list of keys outside of the
 default keys that will be matched when messages are returned after a form
 is submitted. These keys are only used for displaying messages generated
 by the server and have no effect on client side validation error display.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[If true, error, warning, and info messages will be displayed (provided
 they are also set to display). Otherwise, no messages for this
 ValidationMessages container will be displayed (including ones set to display).
 This is a global display on/off switch for all messages.

 Other areas of the screen react to
 a display flag being turned off at a certain level, if display is off for a field, the next
 level up will display that fields full message text, and if display is off at a section the
 next section up will display those messages nested in a sublist.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="collapseAdditionalFieldLinkMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[When collapseAdditionalFieldLinkMessages is set to true, the messages generated on field links will be
 summarized to limit the space they take up with an appendage similar to [+n message type] appended for
 additional
 messages that are omitted.  When this flag is false, all messages will be part of the link separated by
 a comma.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showPageSummaryHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="infos" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The list of info messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="warnings" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The list of warning messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayFieldLabelWithMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[If true, the error messages will display the an InputField's title
 alongside the error, warning, and info messages related to it. This
 setting has no effect on messages which do not relate directly to a
 single InputField.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="displayHeaderMessageSummary">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errors">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The list of error messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalKeysToMatch">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[AdditionalKeysToMatch is an additional list of keys outside of the
 default keys that will be matched when messages are returned after a form
 is submitted. These keys are only used for displaying messages generated
 by the server and have no effect on client side validation error display.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[If true, error, warning, and info messages will be displayed (provided
 they are also set to display). Otherwise, no messages for this
 ValidationMessages container will be displayed (including ones set to display).
 This is a global display on/off switch for all messages.

 Other areas of the screen react to
 a display flag being turned off at a certain level, if display is off for a field, the next
 level up will display that fields full message text, and if display is off at a section the
 next section up will display those messages nested in a sublist.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="collapseAdditionalFieldLinkMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[When collapseAdditionalFieldLinkMessages is set to true, the messages generated on field links will be
 summarized to limit the space they take up with an appendage similar to [+n message type] appended for
 additional
 messages that are omitted.  When this flag is false, all messages will be part of the link separated by
 a comma.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="showPageSummaryHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="infos">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The list of info messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="warnings">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[The list of warning messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayFieldLabelWithMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.PageValidationMessages" xml:lang="en"><![CDATA[If true, the error messages will display the an InputField's title
 alongside the error, warning, and info messages related to it. This
 setting has no effect on messages which do not relate directly to a
 single InputField.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="fieldValidationMessages-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="showIcons" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="errors" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The list of error messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalKeysToMatch" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[AdditionalKeysToMatch is an additional list of keys outside of the
 default keys that will be matched when messages are returned after a form
 is submitted. These keys are only used for displaying messages generated
 by the server and have no effect on client side validation error display.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="useTooltip" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[When true, use the tooltip on fields to display their relevant messages.  When false, these messages
 will appear directly below the control.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayMessages" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[If true, error, warning, and info messages will be displayed (provided
 they are also set to display). Otherwise, no messages for this
 ValidationMessages container will be displayed (including ones set to display).
 This is a global display on/off switch for all messages.

 Other areas of the screen react to
 a display flag being turned off at a certain level, if display is off for a field, the next
 level up will display that fields full message text, and if display is off at a section the
 next section up will display those messages nested in a sublist.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="infos" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The list of info messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="warnings" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The list of warning messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
                <![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="showIcons">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="errors">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[The list of error messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalKeysToMatch">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[AdditionalKeysToMatch is an additional list of keys outside of the
 default keys that will be matched when messages are returned after a form
 is submitted. These keys are only used for displaying messages generated
 by the server and have no effect on client side validation error display.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="useTooltip">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[When true, use the tooltip on fields to display their relevant messages.  When false, these messages
 will appear directly below the control.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[If true, error, warning, and info messages will be displayed (provided
 they are also set to display). Otherwise, no messages for this
 ValidationMessages container will be displayed (including ones set to display).
 This is a global display on/off switch for all messages.

 Other areas of the screen react to
 a display flag being turned off at a certain level, if display is off for a field, the next
 level up will display that fields full message text, and if display is off at a section the
 next section up will display those messages nested in a sublist.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="infos">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[The list of info messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="warnings">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.FieldValidationMessages" xml:lang="en"><![CDATA[The list of warning messages found for the keys that were matched on this
 ValidationMessages This is generated and cannot be set]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="inactivationBlockingDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="relationshipLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="blockedBusinessObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="blockedReferencePropertyName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="businessObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inactivationBlockingDetectionServiceBeanName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="blockingReferenceBusinessObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="relationshipLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="blockedBusinessObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="blockedReferencePropertyName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="businessObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="inactivationBlockingDetectionServiceBeanName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="blockingReferenceBusinessObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="attributeDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="summary" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="alternateDisplayAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="formatterClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinder"
                   type="org.kuali.rice.krad.keyvalues.KeyValuesFinder">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validCharactersConstraint"
                   type="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="control" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalDisplayAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="description" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintText" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="forceUppercase" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="customValidatorClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="prerequisiteConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="controlField" type="org.kuali.rice.krad.uif.control.Control">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyEditor" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="caseConstraint"
                   type="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exclusiveMin" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inclusiveMax" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataType" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="childEntryName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributeSecurity"
                   type="org.kuali.rice.krad.datadictionary.AttributeSecurity">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="summary">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="alternateDisplayAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="formatterClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="optionsFinder">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validCharactersConstraint">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="control">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="maxLength">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalDisplayAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="minLength">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="description">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="constraintText">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="name">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="forceUppercase">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="required">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="customValidatorClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="controlField">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="propertyEditor">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="caseConstraint">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exclusiveMin">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="label">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="inclusiveMax">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataType">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="shortLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="childEntryName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="attributeSecurity">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.AttributeDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="group-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.Group" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="simpleContraint-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="messageNamespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="maxOccurs" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en">
            <![CDATA[The maximum amount of items in this field's list of values - not yet used/do not use]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="states" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exclusiveMin" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[Exclusive minimum value for this field]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="applyClientSide" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inclusiveMax" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[Inclusive max value for this field]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageKey" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="minOccurs" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en">
            <![CDATA[The minimum amount of items in this fields list of values - not yet used/do not use]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataType" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"/>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en">
            <![CDATA[The maximum amount of characters this field's value can be]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintStateOverrides">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[Get the list of constraintStateOverrides which represent constraints that will replace THIS constraint
 when their state is matched during validation.
 Because of this, constraints added to this list MUST have their states defined.

 ConstraintStateOverrides always take precedence over this
 constraint if they apply to the state being evaluated during validation.  These settings have no effect if
 there is no stateMapping represented on the entry/view being evaluated.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.BaseConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en">
            <![CDATA[The minimum amount of characters this field's value has to be]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[If true the field is required]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validationMessageParams" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                             xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="messageNamespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[Namespace code (often an application or module code) the constraint failure message is associated with

 
 Used with the component code and error key for retrieving the constraint. If null,
 the default namespace code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="maxOccurs">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en">
          <![CDATA[The maximum amount of items in this field's list of values - not yet used/do not use]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="states">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[A list of states to apply this constraint for, this will effect when a constraint
 is applied.

 Each state this constraint is applied for needs to be declared with few additional options:
 
 
-if NO states are defined for this constraint, this constraint is applied for ALL states
 
-if a state is defined with a + symbol, example "state+", then this constraint will be applied for that state
 and ALL following states
 
-if a state is defined as a range with ">", example "state1>state6", then this constraint will be applied for
 all
 states from state1 to state6 
 
 These can be mixed and matched, as appropriate, though states using a + symbol should always be the last
 item of a list (as they imply this state and everything else after).

 Example state list may be: ["state1", "state3>state5", "state6+"].  In this example, note that this
 constraint
 is never applied to "state2" (assuming these example states represent a state order by number)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exclusiveMin">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[Exclusive minimum value for this field]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="applyClientSide">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[If this is true, the constraint should be applied on the client side when the user interacts with
 a field - if this constraint can be interpreted for client side use. Default is true.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="inclusiveMax">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[Inclusive max value for this field]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageKey">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[A key that is used to retrieve the constraint message text (used with the namespace and component
 code if specified)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="minOccurs">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en">
          <![CDATA[The minimum amount of items in this fields list of values - not yet used/do not use]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataType">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"/>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="maxLength">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en">
          <![CDATA[The maximum amount of characters this field's value can be]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="minLength">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en">
          <![CDATA[The minimum amount of characters this field's value has to be]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="messageComponentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[A code within the namespace that identifies a component or group the constraint message is associated with

 
 Used with the namespace and error key for retrieving the constraint text. If null,
 the default component code will be used
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="required">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[If true the field is required]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validationMessageParams">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.validation.constraint.SimpleConstraint"
                           xml:lang="en"><![CDATA[Parameters to be used in the string retrieved by this constraint's messageKey, ordered by number of
 the param]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="dataField-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="addHiddenWhenReadOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inquiry" type="org.kuali.rice.krad.uif.widget.Inquiry">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Inquiry widget for the field

 
 The inquiry widget will render a link for the field value when read-only
 that points to the associated inquiry view for the field. The inquiry can
 be configured to point to a certain InquiryView, or the
 framework will attempt to associate the field with a inquiry based on its
 metadata (in particular its relationships in the model)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacement" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Returns the alternate display value]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpSummary" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Summary help text for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Help configuration object for the datafield

 
 External help information can be configured for the datafield. The
 Help object can the configuration for rendering a link to
 that help information.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Returns the additional display value.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValues">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryObjectEntry" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value (if set)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplaySuffixPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyEditor" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalHiddenPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="escapeHtmlInPropertyValue" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipOfComponent" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultValueFinderClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maskFormatter"
                       type="org.kuali.rice.krad.datadictionary.mask.MaskFormatter">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyNamesForAdditionalDisplay" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnlyDisplayReplacementPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo"
                       type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyMask" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dictionaryAttributeName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="addHiddenWhenReadOnly">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates the field should be read-only but also a hidden should be generated for the field

 
 Useful for when a value is just displayed but is needed by script
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inquiry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Inquiry widget for the field

 
 The inquiry widget will render a link for the field value when read-only
 that points to the associated inquiry view for the field. The inquiry can
 be configured to point to a certain InquiryView, or the
 framework will attempt to associate the field with a inquiry based on its
 metadata (in particular its relationships in the model)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Returns the alternate display value]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="helpSummary">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Summary help text for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Help configuration object for the datafield

 
 External help information can be configured for the datafield. The
 Help object can the configuration for rendering a link to
 that help information.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Returns the additional display value.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryObjectEntry">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Object entry name in the data dictionary the associated attribute is
 apart of

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 parent object class the framework will determine the object entry for the
 associated attribute. However the object entry can be set in the field's
 configuration to use another object entry for the attribute
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Default value for the model property the field points to

 
 When a new View instance is requested, the corresponding
 model will be newly created. During this initialization process the value
 for the model property will be set to the given default value (if set)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Name of the property (relative to the parent object) the component binds
 to]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplaySuffixPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Returns the additional display attribute name to be displayed when the field is readonly]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyEditor">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Performs formatting of the field value for display and then converting the value back to its
 expected type from a string

 
 Note property editors exist and are already registered for the basic Java types and the
 common Kuali types such as [@link KualiDecimal}. Registration with this property is only
 needed for custom property editors
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalHiddenPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Allows specifying hidden property names without having to specify as a
 field in the group config (that might impact layout)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="escapeHtmlInPropertyValue">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Returns true if HTML escape allowed for this field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tooltipOfComponent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultValueFinderClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Gives Class that should be invoked to produce the default value for the
 field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maskFormatter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[MaskFormatter instance that will be used to mask the field value when #isApplyMask() is true

 
 Note in cases where the mask is applied due to security (KIM permissions), the mask or partial mask formatter
 configured on #getComponentSecurity() will be used instead of this mask formatter
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="propertyNamesForAdditionalDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[List of property names whose values should be displayed read-only under this field

 
 In the attribute field template for each information property name given its values is
 outputted read-only. Informational property values can also be updated dynamically with
 the use of field attribute query
 

 
 Simple property names can be given if the property has the same binding parent as this
 field, in which case the binding path will be adjusted by the framework. If the property
 names starts with org.kuali.rice.krad.uif.UifConstants#NO_BIND_ADJUST_PREFIX, no binding
 prefix will be added.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="readOnlyDisplayReplacementPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Returns the alternate display attribute name to be displayed when the field is readonly.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="bindingInfo">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Returns the BindingInfo instance that is configured for the
 component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyMask">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the value for the field should be masked (or partially masked) on display

 
 If set to true, the field value will be masked by applying the configured #getMaskFormatter()
 

 
 If a KIM permission exists that should be checked to determine whether the value should be masked or not,
 this value should not be set but instead the mask or partialMask property on #getComponentSecurity()
 should be set to true. This indicates there is a mask permission that should be consulted. If the user
 does not have the permission, this flag will be set to true by the framework and the value masked using
 the mask formatter configured on the security object
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dictionaryAttributeName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.DataField" xml:lang="en"><![CDATA[Name of the attribute within the data dictionary the attribute field is
 associated with

 
 During the initialize phase for the View, properties for
 attribute fields are defaulted from a corresponding
 AttributeDefinition in the data dictionary. Based on the
 propertyName and parent object class the framework attempts will
 determine the attribute definition that is associated with the field and
 set this property. However this property can also be set in the fields
 configuration to use another dictionary attribute.
 

 
 The attribute name is used along with the dictionary object entry to find
 the AttributeDefinition
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="linkGroup-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="emptyLinkGroupString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be outputted when the list backing the
 link group is empty]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="groupBeginDelimiter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be rendered before the group of links are rendered

 
 If the list of links is empty, the start delimiter will not be
 rendered but instead the #emptyLinkGroupString will be outputted
 

 e.g. '[']]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="help" type="org.kuali.rice.krad.uif.widget.Help">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="groupEndDelimiter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be rendered after the group of links are rendered

 
 If the list of links is empty, the end delimiter will not be
 rendered but instead the #emptyLinkGroupString will be outputted
 

 e.g. ']']]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validationMessages"
                       type="org.kuali.rice.krad.uif.element.ValidationMessages">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="linkSeparator" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be rendered between each rendered link

 e.g. '|']]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="footer" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager"
                       type="org.kuali.rice.krad.uif.layout.LayoutManager">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="scrollpane" type="org.kuali.rice.krad.uif.widget.Scrollpane">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage"
                       type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="emptyLinkGroupString">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be outputted when the list backing the
 link group is empty]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="groupBeginDelimiter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be rendered before the group of links are rendered

 
 If the list of links is empty, the start delimiter will not be
 rendered but instead the #emptyLinkGroupString will be outputted
 

 e.g. '[']]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="help">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="groupEndDelimiter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be rendered after the group of links are rendered

 
 If the list of links is empty, the end delimiter will not be
 rendered but instead the #emptyLinkGroupString will be outputted
 

 e.g. ']']]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disclosure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Disclosure widget that provides collapse/expand functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validationMessages">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="linkSeparator">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[String that will be rendered between each rendered link

 e.g. '|']]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="footer">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="layoutManager">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="scrollpane">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en"><![CDATA[Scrollpane widget that provides scrolling functionality for the
 group]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.LinkGroup" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="relationshipDefinition-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sourceClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="supportAttributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.SupportAttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="targetClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primitiveAttributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.PrimitiveAttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sourceClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="targetClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.RelationshipDefinition" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="maintenaceActiveCollectionFilter-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="oldBindingObjectPath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter" xml:lang="en">
            <![CDATA[Gives the binding path to the old data object for comparison, used to
 get the active status of the old object]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="oldBindingObjectPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter" xml:lang="en">
          <![CDATA[Gives the binding path to the old data object for comparison, used to
 get the active status of the old object]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="fieldBase-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[Label column span for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[Label style classes for the field]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Short label for the field

 
 For areas of the user interface that have limited area (such as table
 headers), the short label can be used to identify the field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Label text for the field

 
 The label is generally used to identify the field in the user interface
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelPlacement">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
              <![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
              <![CDATA[Label column span for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en">
              <![CDATA[Label style classes for the field]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldBase" xml:lang="en"><![CDATA[Indicates whether the contained Label has been rendered
 as part of another field and thus should not be rendered with the
 attribute]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="externalizableAttributeDefinitionProxy-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="controlField" type="org.kuali.rice.krad.uif.control.Control">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="alternateDisplayAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="propertyEditor" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sourceAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exclusiveMin" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="caseConstraint"
                   type="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="optionsFinder"
                   type="org.kuali.rice.krad.keyvalues.KeyValuesFinder">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inclusiveMax" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="validCharactersConstraint"
                   type="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataType" type="xsd:anyType">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sourceExternalizableBusinessObjectInterface" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalDisplayAttributeName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="constraintText" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="childEntryName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributeSecurity"
                   type="org.kuali.rice.krad.datadictionary.AttributeSecurity">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="customValidatorClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="prerequisiteConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                             xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="controlField">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="alternateDisplayAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="propertyEditor">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sourceAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exclusiveMin">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="caseConstraint">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="optionsFinder">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="inclusiveMax">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="validCharactersConstraint">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataType">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sourceExternalizableBusinessObjectInterface">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalDisplayAttributeName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="constraintText">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="minLength">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="childEntryName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="attributeSecurity">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="customValidatorClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.ExternalizableAttributeDefinitionProxy"
                           xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="collectionGroupSecurity-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
            <![CDATA[Indicates whether the collection group line has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
            <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
            <![CDATA[Indicates whether the collection group line has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
            <![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="viewLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
          <![CDATA[Indicates whether the collection group line has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
          <![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
          <![CDATA[Indicates whether the collection group line has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en">
          <![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.container.CollectionGroupSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="widget-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.WidgetBase" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="attributeQueryConfig-bean-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="queryMethodInvokerConfig"
                   type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Configures the query method target class/object and method name

 
 When the query method is not contained on the ViewHelperService, this
 can be configured for declaring the target class/object and method. The target class
 can be set in which case a new instance will be created and the given method invoked.
 Alternatively, the target object instance for the invocation can be given. Or finally
 a static method can be configured
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="queryMethodToCall" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Configures the name of the method that should be invoked to perform
 the query

 
 Should contain only the method name (no parameters or return type). If only
 the query method name is configured it is assumed to be on the ViewHelperService
 for the contained view.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="returnMessageText" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en">
            <![CDATA[Message text to display along with the query result]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="returnFieldMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Maps properties from the result object of the query to
 fields in the view

 
 Each map entry configures one return mapping, where the map
 key is the field name for the field to populate, and the map
 values is the name of the property on the result object to
 pull the value from
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="sortPropertyNames" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[List of property names to sort the query results by. The sort
 will be performed on each property in the order they are contained
 within the list. Each property must be a valid property of the
 return query object (the data object in case of the general query)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalCriteria">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Fixed criteria that will be appended to the dynamic criteria generated
 for the query. Map key gives name of the property the criteria should
 apply to, and the map value is the value (literal) for the criteria. Standard
 lookup wildcards are allowed]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="queryFieldMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Configures the query parameters by mapping fields in the view
 to properties on the data object class for the query

 
 Each map entry configures one parameter for the query, where
 the map key is the field name to pull the value from, and the
 map value is the property name on the object the parameter should
 populate.
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="returnMessageStyleClasses" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[CSS Style classes that should be applied to the return message.
 Multiple style classes should be delimited by a space]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClassName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en">
            <![CDATA[Class name for the data object the query should be performed against]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="renderNotFoundMessage" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Indicates whether a message should be added to the query result
 object and displayed when the query return object is null]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="queryMethodArgumentFieldList" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[List of field names that should be passed as arguments to the query method

 
 Each entry in the list maps to a method parameter, in the other contained within
 the list. The value for the field within the view will be pulled and passed
 to the query method as an argument
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
    </xsd:choice>
    <xsd:attribute name="queryMethodInvokerConfig">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Configures the query method target class/object and method name

 
 When the query method is not contained on the ViewHelperService, this
 can be configured for declaring the target class/object and method. The target class
 can be set in which case a new instance will be created and the given method invoked.
 Alternatively, the target object instance for the invocation can be given. Or finally
 a static method can be configured
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="queryMethodToCall">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Configures the name of the method that should be invoked to perform
 the query

 
 Should contain only the method name (no parameters or return type). If only
 the query method name is configured it is assumed to be on the ViewHelperService
 for the contained view.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="returnMessageText">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en">
          <![CDATA[Message text to display along with the query result]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="returnFieldMapping">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Maps properties from the result object of the query to
 fields in the view

 
 Each map entry configures one return mapping, where the map
 key is the field name for the field to populate, and the map
 values is the name of the property on the result object to
 pull the value from
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="sortPropertyNames">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[List of property names to sort the query results by. The sort
 will be performed on each property in the order they are contained
 within the list. Each property must be a valid property of the
 return query object (the data object in case of the general query)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalCriteria">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Fixed criteria that will be appended to the dynamic criteria generated
 for the query. Map key gives name of the property the criteria should
 apply to, and the map value is the value (literal) for the criteria. Standard
 lookup wildcards are allowed]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="queryFieldMapping">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Configures the query parameters by mapping fields in the view
 to properties on the data object class for the query

 
 Each map entry configures one parameter for the query, where
 the map key is the field name to pull the value from, and the
 map value is the property name on the object the parameter should
 populate.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="returnMessageStyleClasses">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[CSS Style classes that should be applied to the return message.
 Multiple style classes should be delimited by a space]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataObjectClassName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en">
          <![CDATA[Class name for the data object the query should be performed against]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="renderNotFoundMessage">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[Indicates whether a message should be added to the query result
 object and displayed when the query return object is null]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="queryMethodArgumentFieldList">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.AttributeQuery" xml:lang="en"><![CDATA[List of field names that should be passed as arguments to the query method

 
 Each entry in the list maps to a method parameter, in the other contained within
 the list. The value for the field within the view will be pulled and passed
 to the query method as an argument
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="image-bean-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed

 
 This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.
 When using this property methodToCallOnRefresh and id should also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Returns a list of componentIds which will be also be refreshed when this component is refreshed

 
 This will be a comma separated list of componentIds that need to be refreshed when a refresh
 condition has been set on this component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="height" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Returns the height style attribute of this image

 
 The default unit of measure is pixels.
 It is good practice to specify both the height and width attributes for an image.
 If these attributes are set, the space required for the image is reserved when the page is loaded.
 However, without these attributes, the browser does not know the size of the image. The effect will
 be that the page layout will change while the images load.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cutlineText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Retrieves the cutline text for this image

 
 The cutline text give more detailed information about the picture. Generally it describes
 the who, what, where, when of this image.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="captionHeaderPlacementAboveImage" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[Specifies whether the image caption is to be displayed above or below the image]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether data contained within the component should be reset (set to default) when the
 component is refreshed]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Returns the width style attribute of the image

 
 The default unit of measure is pixels.
 It is good practice to specify both the height and width attributes for an image.
 If these attributes are set, the space required for the image is reserved when the page is loaded.
 However, without these attributes, the browser does not know the size of the image. The effect will
 be that the page layout will change while the images load.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="captionHeaderText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Retrieves the caption text for this image

 
 The caption text is a headline for the picture. It may be displayed either above or below the picture.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh and disclosure
 process

 
 During the component refresh or disclosure process it might be necessary to perform other operations, such as
 preparing data or executing a business process. This allows the configuration of a method on the underlying
 controller that should be called for the component refresh action. In this method, the necessary logic can be
 performed and then the base component update method invoked to carry out the component refresh.
 

 
 Controller method to invoke must accept the form, binding result, request, and response arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker"
                       type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Specifies a property by name that when its value changes will automatically perform
 a refresh on this component

 
 This can be a comma
 separated list of multiple properties that require this component to be
 refreshed when any of them change. DO NOT use with progressiveRender
 unless it is know that progressiveRender condition will always be
 satisfied before one of these fields can be changed.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="captionHeader" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[Retrieves the Header component used to display the caption for this image]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cutlineMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Gets the Message component used to display the cutline.

 
 Wrapping the cutline text with a Message component allows styling of the cutline text.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The unique id (within a given tree) for the component

 
 The id will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.

 The component MUST BE a container or field type. conditionalRefresh is
 defined in a limited Spring EL syntax. Only valid form property names,
 and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, and the matches
 clause are allowed. String and regex values must use single quotes ('),
 booleans must be either true or false, numbers must be a valid double
 either negative or positive.

 DO NOT use progressiveRender and conditionalRefresh on the same component
 unless it is known that the component will always be visible in all cases
 when a conditionalRefresh happens (ie conditionalRefresh has
 progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST BE a
 container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid
 form property names, and, or, logical comparison operators (non-arithmetic), #listContains, #emptyList, matches
 clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,
 numbers must be a valid double, either negative or positive.

 
 DO NOT use progressiveRender and a conditional refresh statement on the same component
 unless it is known that the component will always be visible in all cases when a conditional refresh happens
 (ie conditional refresh has progressiveRender's condition anded with its own condition).
 

 
 If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option
 with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options
 that will export that options as a JavaScript Map for use in js and
 jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="toolTip" type="org.kuali.rice.krad.uif.widget.Tooltip">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[The Tooltip widget that renders a tooltip with additional information about the element on
 specified trigger event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data

 The attributes that are complex objects (contain {}) they will be written through script.
 The attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-.
 Either way they can be access through .data() call in jQuery]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentSecurity"
                       type="org.kuali.rice.krad.uif.component.ComponentSecurity">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[Security object that indicates what authorization (permissions) exist for the component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="source" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[returns the URL of this image]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component
 will always be retrieved from the server and shown(as opposed to being
 stored on the client, but hidden, after the first retrieval as is the
 case with the progressiveRenderViaAJAX option).

 By default, this is
 false, so components with progressive render capabilities will always be
 already within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be
 skipped when keyboard tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="altText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Provides alternate information for the image element

 The altText property specifies an alternate text for an image. It is displayed by the browser
 if the image cannot be displayed.  This is especially important for accessibility, because screen
 readers can't understand images, but rather will read aloud the alternative text assigned to them.
 
 Some best practices:
 
 
-spacer images, bullets, and icons should have the altText set to null or the empty string. This
 will prevent screen readers from announcing it.
 
-Make the altText message as short and succinct as possible
 
-Describe the content of the image and nothing more
 
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved
 from the server when it first satisfies its progressive render condition.

 After the first retrieval, it is hidden/shown in the html by the js when
 its progressive condition result changes. By default, this is false,
 so components with progressive render capabilities will always be already
 within the client html and toggled to be hidden or visible.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
                <![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
        </xsd:choice>
        <xsd:attribute name="height">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Returns the height style attribute of this image

 
 The default unit of measure is pixels.
 It is good practice to specify both the height and width attributes for an image.
 If these attributes are set, the space required for the image is reserved when the page is loaded.
 However, without these attributes, the browser does not know the size of the image. The effect will
 be that the page layout will change while the images load.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cutlineText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Retrieves the cutline text for this image

 
 The cutline text give more detailed information about the picture. Generally it describes
 the who, what, where, when of this image.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="captionHeaderPlacementAboveImage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
              <![CDATA[Specifies whether the image caption is to be displayed above or below the image]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="captionHeaderText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Retrieves the caption text for this image

 
 The caption text is a headline for the picture. It may be displayed either above or below the picture.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="captionHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
              <![CDATA[Retrieves the Header component used to display the caption for this image]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cutlineMessage">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Gets the Message component used to display the cutline.

 
 Wrapping the cutline text with a Message component allows styling of the cutline text.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="source">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en">
              <![CDATA[returns the URL of this image]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="altText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Image" xml:lang="en"><![CDATA[Provides alternate information for the image element

 The altText property specifies an alternate text for an image. It is displayed by the browser
 if the image cannot be displayed.  This is especially important for accessibility, because screen
 readers can't understand images, but rather will read aloud the alternative text assigned to them.
 
 Some best practices:
 
 
-spacer images, bullets, and icons should have the altText set to null or the empty string. This
 will prevent screen readers from announcing it.
 
-Make the altText message as short and succinct as possible
 
-Describe the content of the image and nothing more
 
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
