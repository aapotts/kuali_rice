<?xml version='1.0' encoding='UTF-8'?>
<!--

    Copyright 2005-2012 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>Rice Data Objects (RDO)</title>
        <legalnotice><para>Some of the documentation in this guide has not been updated to reflect changes for
            . If you find a problem, please <link xlink:href="UG.html#reporting_rice_jira">report
                in Jira</link> and set the component to Documentation. Indicate the guide and
            section that has the problem in the Jira. Thanks for your help in improving the
            documentation!</para></legalnotice>
    </info>
    <chapter version="5.0" xml:id="intro" xmlns="http://docbook.org/ns/docbook"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:ns5="http://www.w3.org/1999/xhtml"
             xmlns:ns4="http://www.w3.org/2000/svg"
             xmlns:ns3="http://www.w3.org/1998/Math/MathML"
             xmlns:ns="http://docbook.org/ns/docbook">
        <title>Introduction</title>
        <sect1>
            <title>Purpose of RDO</title>
            <para>
                The Kuali Rapid Application Development Framework (KRAD) relies on several different artifacts for its
                creation and rendering of web applications.  These artifacts are greatly varied in both form and purpose;
                ranging from standared java class files to xml files.  The creation of which can be both repetitive and
                time consuming to developers.  The purpose of the Rice Data Object (RDO) Developer is to decrease both
                the repetitiveness and time it takes to create these artifacts by automating and guiding the creation.
            </para>
        </sect1>
        <sect1>
            <title>What is RDO</title>
            <para>
                The Rice Data Objects Developer is a artifact creation tool that helps in the implementation of the Kuali
                Rapid Application Development framework.  It allows the user to rapidily develop web applications by
                providing a quick and easy way to create the necessary artifacts  for use in the KRAD framework.  In
                that most basic terms it is a wizard that guides the user, through prompts and lists, in entering the
                needed information for each artifact then generates the completed form, removing the need for repetitive typing
                and formatting.  Through this it also brings a level of standardization to the different artifacts making
                the interpretation of each simpler.
            </para>
            <para>
                This tool utilizes an interactive command line style interface that assists the user in entering the
                information about a desired artifact, offering validation on the content before writing the artifact to the
                appropriate location.  This process takes care of the bulk work needed to create and deploy web applications
                with the user only needed to touch the artifact itself for subject specific details and changes.
            </para>
        </sect1>
    </chapter>
    <chapter version="5.0" xml:id="intro" xmlns="http://docbook.org/ns/docbook"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:ns5="http://www.w3.org/1999/xhtml"
             xmlns:ns4="http://www.w3.org/2000/svg"
             xmlns:ns3="http://www.w3.org/1998/Math/MathML"
             xmlns:ns="http://docbook.org/ns/docbook">
        <title>Installation and Configuration</title>
        <sect1>
            <title>Included Files</title>
            <itemizedlist>
                <listitem>
                    <para>
                        Folder: images
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                File: KRADLogo.jpg (If with the Tooling GUI)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Folder: messagelabels
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                File: RDOErrorMsgs.xml
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        Folder: Properties
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                File: rdo-config-default.properties
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>
                        File: rdo-tool.jar
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>
        <sect1>
            <title>Setting Up File System</title>
            <para>
                The RDO Developer is set up to save the artifacts generated to predetermined locations.  This can cause errors in
                the save process if the folder location that RDO is trying to access to is missing.  To prevent this, before
                using RDO the user should configure the File Path Setup section of the properties so that the file paths point to
                the folder in which they wish to save each artifact. More details can be found in the Configuring Properties
                section below.
            </para>
        </sect1>
        <sect1>
            <title>Configuring Properties</title>
            <para>
                The RDO Developer offers a wide availability of customization and automatization which can be set up through
                the rdo-config.properties file.   This file is broken into a number of different sections based on the area
                of the RDO affected.  It is recommended to make a back up of this file before making changes.
            </para>
            <itemizedlist>
                <listitem>
                    Main Program Setup
                    <para>
                        The properties described in this section deal with the functionality and navigation of the RDO.
                        Please note the all names and symbols defined in this area need to be exact to avoid critical
                        runtime errors in the program.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>Delimiter:  List separator used in this file (default value: ",").</para>
                        </listitem>
                        <listitem>
                            <para>developerlist: List of the developer names displayed in the main menu.</para>
                        </listitem>
                        <listitem>
                            <para>lineardevelopment.javaobjectwriter.next: The name of the developer after the Java Object
                                developer in the linear development method (default value: DDL).</para>
                        </listitem>
                        <listitem>
                            <para>lineardevelopment.ddlwriter.next: The name of the developer after the  DDL Developer in
                                the linear development method (default value: OJB).</para>
                        </listitem>
                        <listitem>
                            <para>lineardevelopment.ojbwriter.next: The name of the developer after the OJB Developer in
                                the linear development method (default value: DataDictionary).</para>
                        </listitem>
                        <listitem>
                            <para>lineardevelopment.datadictionarywriter.next: The name of the developer after the Data
                                Dictionary Developer in the linear development method (default value: ViewXML).</para>
                        </listitem>
                        <listitem>
                            <para>lineardevelopment.viewwriter.next: The name of the developer after the View Developer in
                                the linear development method (default value: DataObject).</para>
                        </listitem>
                        <listitem>
                            <para>lineardevelopment.converters.use: The status of whether artifacts will be created by
                                converting other information from previous artifacts (values: always, never, prompt)</para>
                        </listitem>
                        <listitem>
                            <para>utilities.filepath.errormessages: The file name and location for the xml document that
                                contains the list of error codes for the program.</para>
                        </listitem>
                        <listitem>
                            <para>utilities.interface.gui: The status of whether the Tooling GUI Interface will be used
                            to display and run the program in.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    File Path Setup
                    <para>The properties described in this section deal with the set up of the file system and the file
                        location for saving artifacts developed using the RDO.  File paths can be substituted into others
                        by enclosing the property name in "{}" for example: "{filepath.default.workarea}/ java/projects/
                        {projectname}/" where the first brackets enclose the workarea name defined in these properties.
                        Putting brackets around projectname and modulename tells the RDO to substitute the project or module
                        name set by the user.</para>
                    <itemizedlist>
                        <listitem>
                            <para>filepath.prompt.projectname: Whether the user should be prompted to enter a project name
                                when creating a new artifacts (values: true, false).</para>
                        </listitem>
                        <listitem>
                            <para>filepath.prompt.modulename: Whether the user should be prompted to enter a module name
                                when creating a new artifacts(values: true, false).</para>
                        </listitem>
                        <listitem>
                            <para>filepath.default.projectname: The default name of the project for the artifacts.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.default.modulename: The default name of the module for the artifacts</para>
                        </listitem>
                        <listitem>
                            <para>filepath.default.workarea: The default file location where the file system starts for
                                the artifacts.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.project: The file path to where the project folder is.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.workflow: The file path where workflow artifacts are saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.module: The file path to where the module folder is.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.resource: The file path to where OJB artifacts are saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.changeset: The file path to where DDL artifacts are saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.dictionary: The file path to where Data Dictionary artifacts are
                                saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.uif: The file path to where View artifacts are saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.dataobjects: The file path to where Java Object artifacts are saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.ojb: The file path to where OJB artifacts are saved.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.package.project: The import package of the project.</para>
                        </listitem>
                        <listitem>
                            <para>filepath.location.package.module: The import package of the module.</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    Java Object Writer
                    <para>The properties described in this section deal with the automatization of the Java Object
                        Developer.</para>
                    <itemizedlist>
                        <listitem>
                            <para>javaobjectwriter.default.authorname: The default name of the author for a Data Object.</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.default.authoremail: The default email of the author for a Data Object.</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.default.businessobject: The default business object status of a Data
                                Object (values "yes" / "no").</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.prompt.authorname: Whether the user should be prompted to enter a author
                                name when creating a new Object.</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.prompt.authoremail: Whether the user should be prompted to enter a
                                author email when creating a new Object.</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.prompt.businessobject: Whether the user should be prompted to enter
                                the business object status when creating a new Object.</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.datatypes.names: List of data types in which common properties can be
                                set.</para>
                        </listitem>
                        <listitem>
                            <para>javaobjectwriter.datatypes.paths: List of corresponding import paths to the previous
                                list (order of these items must match its counterpart in the first list).</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    DDL Writer
                    <para>The properties described in this section deal with the automatization and list options of the
                        DDL Developer.</para>
                    <itemizedlist>
                        <listitem>
                            <para>ddlwriter.columntype.names: List of column types in which a column can be set to.</para>
                        </listitem>
                        <listitem>
                            <para>ddlwriter.converter.datatype: List of data types with registered JDBC matches.</para>
                        </listitem>
                        <listitem>
                            <para>ddlwriter.converter.jdbctype: List of corresponding JDBC matches to the previous list
                                (order of these items must match its counterpart in the first list).</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    Data Dictionary Writer
                    <para>The properties described in this section deal with the default list and options available for
                        the Data Dictionary Developer.</para>
                    <itemizedlist>
                        <listitem>
                            <para>datadictionary.definition.textconstraints: List of values for a special attribute –
                                validCharactersConstraint. </para>
                        </listitem>
                        <listitem>
                            <para>datadictionary.definition.controlfields: List of values for a special attribute –
                                controlfield. </para>
                        </listitem>
                        <listitem>
                            <para>datadictionary.definition.attributes.simple: List of attribute names for simple
                                attributes.</para>
                        </listitem>
                        <listitem>
                            <para>datadictionary.definition.attributes.example: List of examples for the simple attributes
                            listed above (order of these items must match its counterpart in the first list).</para>
                        </listitem>
                        <listitem>
                            <para>datadictionary.definition.attributes.special: List of attribute names for special
                                attributes</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    OJB Writer
                    <para>The properties described in this section deal with the OJB file and creation of a new file if
                        needed.</para>
                    <itemizedlist>
                        <listitem>
                            <para>ojb.file.name: This is the name of the ojb file which the developer will append to
                                (default: ojb.xml)</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </sect1>
        <sect1>
            <title>Starting the program</title>
            <para>
                Before starting the RDO user's should first make sure the program is set up correctly.  They should first
                check that the rdo-config.properties file are in the /properties folder.  Once the properties files are
                in place users should make changes to the rdo-config file to set up the customization and automization
                as they wish and making sure the errorMsgs.xml file is being pointed to as well to decrease errors and
                allow error handling by the system.  After set up is complete start the program by clicking the program
                icon and opening the console.
            </para>
        </sect1>
    </chapter>
    <chapter version="5.0" xml:id="intro" xmlns="http://docbook.org/ns/docbook"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:ns5="http://www.w3.org/1999/xhtml"
             xmlns:ns4="http://www.w3.org/2000/svg"
             xmlns:ns3="http://www.w3.org/1998/Math/MathML"
             xmlns:ns="http://docbook.org/ns/docbook">
        <title>User Guide</title>
        <sect1>
            <title>Artifact Creation Methods</title>
            <para>RDO offers several ways to go about the development of the different artifacts used by the KRAD
                framework based on the needs and desires of the users.  </para>
            <sect2>
                <title>Stand alone</title>
                <para>
                    The most basic setup of the RDO allows users to create each artifact from scratch in a standalone method.
                    Using this method each artifact is created by itself meaning that it is not using influenced by the
                    other artifacts nor does the user need to create the others.  This method allows for the quick
                    replacement or creation of specific artifacts in the system.
                </para>
            </sect2>
            <sect2>
                <title>Linear Development</title>
                <para>
                    This method focuses on creating several artifacts of the same set (either complete or partial sets).
                    In this set up the user fills in the information and creates the artifact before moving on to the next;
                    allowing them to use information filled in on the previous  artifacts to create the others.  The
                    default order of creation is:
                </para>
                <para>
                    Java Object -> DDL Table -> OJB Descriptor -> Dictionary entry -> Views
                </para>
                <para>
                    But this can be changed to allow for the absence of a artifact or for the preference of the user.
                    (Changing the order of artifact creation can be done by modifying the values of the lineardevelopment
                    entries in the properties file).
                </para>
            </sect2>
        </sect1>
        <sect1>
            <title>Main Menu</title>
            <para>The main menu for the RDO simply consists of the different artifacts that can be created using the
                program.  To start the creation of the a artifact select it from the menu by entering its selection value
                (the number on the left side of the artifacts name).  You can also enter 0 to exit the program.</para>
        </sect1>
            <sect2>
                <title>Interacting with Prompts</title>
                <para>
                    The RDO is meant to assist users in entering information to create the KRAD artifacts and does this
                    by using prompts to direct what information the program is looking for the user to enter.  To avoid
                    mistakes or misinformation from being enter the program will validate the information entered by the
                    user and respond if invalid information is detected.  The user can also back out of a series of prompts
                    by entering "q" which will return them to the closest menu.
                </para>
            </sect2>
        <sect1>
            <title>Data Object Developer</title>
            <para>
                The Data Object is a simple java class that contains a number of properties (data entries).  These
                properties can consist of simple data types like int, String or boolean, or relation (user defined) data
                types.  For each data type the needed imports, declarations and constructor initializion is created, as
                well as the getters and setters needed to fill or retrieve that data stored for these properties.
            </para>
            <sect2>
                <title>Creating a New Object</title>
                <para>
                    When the Developer is started the user is prompt for the name of the Data Object they wish to create.
                    This is the actual name of the Object and follows the standard java class naming syntax.  Once the
                    name of the new object is filled the main menu is presented.
                </para>
            </sect2>
            <sect2>
                <title>Adding a Common Property</title>
                <para>
                    To add a common property to the Data Object the user selects "Add Simple Property" from the main menu.
                    They will then be prompted to enter the name of the new property; like the Object name it follows the
                    the java naming syntax for data entries and should also follow any naming conventions (though naming
                    conventions are not checked for during creation).  Next the user is presented a list of common data
                    types to pick from using the number on the left side of the type name.  If a property is not present
                    on the list it will need to be added as a relation property.
                </para>
            </sect2>
            <sect2>
                <title>Adding a Relation Property</title>
                <para>
                    To add a relation property to the Data Object the user selects "Add Relational Property" from the main
                    menu.  Like when adding a common property they will be prompted to enter the name for the new property
                    (same syntax and conventions apply).  Next they will be asked to enter the import package for the data
                    type.  This means that the user must enter the exact import syntax for the type they wish to use and
                    not a general package using the * symbol (example path1.path2.type1) as the data type for the property
                    is extracted from its import package.  Once complete the user is asked whether the relational property
                    is "one to one" or "one to many" by selecting the options from the list.  A "one to many" status on the
                    property means that it will be designated as a list in the java class.
                </para>
            </sect2>
            <sect2>
                <title>Modifying The Data Object</title>
                <para>
                    To modify information already entered into the Data Object the user can select "Modify Menu" from the
                    main menu.  This will take them to a new menu in which they are able to modify any piece of data already
                    entered by selecting from the options and following the prompts.  Where the primary data entering
                    options in the main menu deal with collecting data for a whole item at once, the options under the
                    modify menu handle only a specific segment of the data at one time.
                </para>
            </sect2>
            <sect2>
                <title>Previewing Java Class</title>
                <para>
                    Once the necessary information has been entered into the Data Object Developer the user can preview
                    a sample of the class that will be written by selecting "Preview Data Object" from the main menu.
                    This preview shows the class imports, property declarations and constructor but not the getters and
                    setters.
                </para>
            </sect2>
            <sect2>
                <title>Writing the Object to File</title>
                <para>
                    After checking the Data Object for completeness and correctness it can then be written to the
                    appropriate location defined in the program properties file by selecting "Write Data Object" from the
                    main menu.  This option automatically writes the complete class to a .java file at that location.
                    Once the file is wrote the program prompts the user if they would like to open the new file.  By
                    entering "yes" to this prompt the file will then be opened using the computer's default program for
                    opening files of the type java.
                </para>
            </sect2>
            <sect2>
                <title>Linear Development</title>
                <para>
                    When looking at the main menu the user will notice that there are two options to write: "Write Data
                    Object" and "Write Data Object and Start ____."  The first option merely writes the Object being
                    worked on to its file and stays in the Data Object Developer, the second option however is for the
                    linear development method.  Meaning that it will write the Object to file then exit the Data Object
                    Developer and start the next Developer as assigned in the properties file.  By doing this the
                    information entered for the Data Object and previous artifacts is used to help in making the other
                    artifacts helping speed up the process.  For linear development it is suggested to always start in
                    the Data Object Developer as it sets the property fields for the others.
                </para>
            </sect2>
            <sect2>
                <title>Exiting</title>
                <para>
                    Once the user has completed creating a Data Object they can exit back to the RDO's main menu by simply
                    selecting the "Exit" option from the Data Object Developer menu.
                </para>
            </sect2>
        </sect1>
        <sect1>
            <title>DDL Developer</title>
            <para>
                The DDL File is actually a LiquiBase Changeset XML file that contains the necessary information to create
                the base table of the database.  This includes the beginning set up of the LiquiBase Changelog with the
                first Changeset that creates the new table with the starting columns and constraints. Each file is for a
                single database table related to a single Data Object.
            </para>
            <sect2>
                <title>Creating a New DDL</title>
                <para>
                    When the DDL Developer is started the user is prompted to enter the name of the table to be created
                    by the Changeset.  This is the actual database table name and should follow the required syntax and
                    conventions of a standard database schema.  When a new Table is created two default columns are also
                    added to the database ("versionid" and "objectid") with the appropriate information about both.
                </para>
                <sect3>
                    <title>Linear Development</title>
                    <para>
                        If the user is using the linear development method and a Data Object has been created before
                        starting the DDL Developer the user will be prompted if they wish to create the Changeset using
                        the information from the previous Data Object.  By entering "yes" the new Table will be populated
                        with the Object's information.  This means the name of the table will be set and a new column
                        added with its name and data type filled in for each data property. Note: The user is only prompted
                        this question if the converters option in the properties file is set to.
                    </para>
                </sect3>
            </sect2>
            <sect2>
                <title>Adding Columns</title>
                <para>
                    To add a column to the created Table the user selects "Add Column" from the main menu.  They will
                    then be asked to enter the name of the new column which should meet database syntax (the name will
                    automatically be set to uppercase).  A list of JDBC types is displayed and the column type can be
                    selected using the index on the left side of the type's name.  Once the type is selected the user can
                    enter the parameters for the type by following the prompt (if the JDBC type has a common format of
                    parameters the user will be asked if they wish to use it, which provides a more detailed and structured
                    prompt).  After the type is entered the user can then enter a default value for the column which should
                    match the type. Finally the users is prompted to enter whether this column should be nullable or not
                    by selecting the appropriate option.
                </para>
            </sect2>
            <sect2>
                <title>Adding Constraint</title>
                <para>
                    To add a constraint to the Table the user can select "Add Constraint" from the main menu.  They will
                    then be prompted for the type of constraint they wish to add.
                </para>
                <para>
                    Primary Key: To add a primary key constraint to the Table select "Primary Key" from the constraint list.
                    Then select all columns from the list displayed by entering the index to the left of the name.  Each
                    column is selected one at a time with as many columns being added as needed.
                </para>
                <para>
                    Foreign Key: To add a foreign key constraint to the Table select "Foreign Key" from the constraint list.
                    The user will then be prompted to enter the name of the Table being referenced in the key followed by
                    entering the name of each column referenced in that Table one by one.  Once the referenced columns are
                    entered they can then enter the columns affected in the new Table by selecting them from the list
                    displayed.
                </para>
            </sect2>
            <sect2>
                <title>Modifying The DDL</title>
                <para>
                    To modify information already entered into the DDL the user can select "Modify Menu" from the
                    main menu.  This will take them to a new menu in which they are able to modify any piece of data already
                    entered by selecting from the options and following the prompts.  Where the primary data entering
                    options in the main menu deal with collecting data for a whole item at once, the options under the
                    modify menu handle only a specific segment of the data at one time.
                </para>
            </sect2>
            <sect2>
                <title>Previewing DDL</title>
                <para>
                    Once the necessary information has been entered into the DDL Developer the user can preview the data
                    for the new Table by selecting "Preview DDL" in the main menu.  This will display all the data entered
                    as it would appear in the file.
                </para>
            </sect2>
            <sect2>
                <title>Writing the DDL to File</title>
                <para>
                    After checking the DDL Changeset for completeness and correctness it can then be written to the
                    appropriate location defined in the program properties file by selecting "Write DDL" from the main menu.
                    This option automatically writes the complete Changeset to a xml file at that location. Once the file
                    is wrote the program prompts the user if they would like to open the new file.  By entering "yes" to
                    this prompt the file will then be opened using the computer's default program for opening files of the
                    type xml.
                </para>
            </sect2>
            <sect2>
                <title>Linear Development</title>
                <para>
                    When looking at the main menu the user will notice that there are two options to write: "Write DDL"
                    and "Write DDL and Start ____."  The first option merely writes the Changeset being worked on to its
                    file and stays in the DDL Developer, the second option however is for the linear development method.
                    Meaning that it will write the Changeset to file then exit the DDL Developer and start the next
                    Developer as assigned in the properties file.  By doing this the information entered for the
                    Changeset and previous artifacts is used to help in making the other artifacts helping speed up the
                    process.  For linear development it is suggested to always start in the Data Object Developer as it
                    sets the property fields for the others.
                </para>
            </sect2>
            <sect2>
                <title>Exiting</title>
                <para>
                    Once the user has completed creating a DDL Changeset they can exit back to the RDO's main menu by
                    simply selecting the "Exit" option from the DDL Developer menu.
                </para>
            </sect2>
        </sect1>
        <sect1>
            <title>OJB Developer</title>
            <para>
                The OJB file is a OJB Class Descriptor using Apache OJB Repository XML files. The Class Descriptor contains
                information connecting a Data Object to a database table.  The OJB file can have multiple Class Descriptors
                for Object Table pairs as well as the information need to connect to the database in which the table is a
                part of.
            </para>
            <sect2>
                <title>Creating a New OJB Class Descriptor</title>
                <para>
                    When the OJB Developer is started the user is prompted to enter the package of the Java Object and
                    name of the table being connected by the Class Descriptor.  The package should be the exact import
                    package for the Object and the table name exactly as it appears in the database.
                </para>
                <sect3>
                    <title>Linear Development</title>
                    <para>
                        If the user is using the linear development method and has created both a Data Object and DDL
                        Changeset they can fill in the information for the Descriptor using the information from these
                        two artifacts.  If only a Data Object has been created the OJB Developer will use that information
                        to set the package and only prompt them for the table name.  Creating the Object first will allow
                        the user to select the different data properties from it when adding properties and relations to
                        the Descriptor.
                    </para>
                </sect3>
            </sect2>
            <sect2>
                <title>Adding a Property</title>
                <para>
                    To add a property to the Class Descriptor the user can select "Add Property" from the main menu.
                    They will then be prompted to select a field from a list containing all properties defined in a previous
                    created Data Object (if no Data Object was created or the new property is not in the list the user can
                    create a new one by selecting "New Property").  They will then be asked enter the column name in the
                    database that corresponds to this property before selecting the JDBC Type for this column from a
                    displayed list.  Next the Developer will prompt them for if the column is a primary key of the Table.
                    If the column is a primary key it will ask if it is a sequence before asking for the name of the sequence.
                </para>
            </sect2>
            <sect2>
                <title>Adding a Relation</title>
                <para>
                    To add a relation to the Class Descriptor the user can select "Add Relation" from the main menu.  They
                    will then be prompted to select a field from a list containing all properties defined in a previous
                    created Data Object (if no Data Object was created or the new property is not in the list the user can
                    create a new one by selecting "New Property").  Next they need to enter the import package of the class
                    that it is a relation to. Once this is complete they can set a number of options by selecting true or
                    false as prompted.  These options include AutoRetrieve, AutoUpdate, AutoDelete, whether the relation
                    is a proxy or not and finally whether the it is a collection (ie. one to many).  After this they are
                    asked to enter all foreign key fields referenced by this column as well as all fields in which it is
                    ordered by if the relation is a collection.
                </para>
            </sect2>
            <sect2>
                <title>Modifying The Class Descriptor</title>
                <para>
                    To modify information already entered into the Class Descriptor the user can select "Modify Menu" from the
                    main menu.  This will take them to a new menu in which they are able to modify any piece of data already
                    entered by selecting from the options and following the prompts.  Where the primary data entering
                    options in the main menu deal with collecting data for a whole item at once, the options under the
                    modify menu handle only a specific segment of the data at one time.
                </para>
            </sect2>
            <sect2>
                <title>Previewing the OJB Class Descriptor</title>
                <para>
                    Once the necessary information has been entered into the OJB Developer the user can preview a the data
                    for the new Descriptor by selecting "Preview OJB Descriptor" in the main menu.  This will display all
                    the data entered as it would appear in the file.
                </para>
            </sect2>
            <sect2>
                <title> Writing the Class Descriptor to File</title>
                <para>
                    After checking the Descriptor for completeness and correctness it can then be written to the appropriate
                    location defined in the program properties file by selecting "Write OJB Descriptor" from the main menu.
                    This option automatically appends the complete Descriptor to the OJB xml file at that location (If no
                    file exist a new OJB xml will be created and the Descriptor appended to it). Once the file is wrote
                    the program prompts the user if they would like to open the new file.  By entering "yes" to this prompt
                    the file will then be opened using the computer's default program for opening files of the type xml.
                </para>
            </sect2>
            <sect2>
                <title>Linear Development</title>
                <para>
                    When looking at the main menu the user will notice that there are two options to write: "Write OJB
                    Descriptor" and "Write OJB Descriptor and Start ____."  The first option merely writes the Class
                    Descriptor being worked on to its file and stays in the OJB Developer, the second option however is
                    for the linear development method.  Meaning that it will write the Descriptor to file then exit the
                    OJB Developer and start the next Developer as assigned in the properties file.  By doing this the
                    information entered for the Descriptor and previous artifacts is used to help in making the other
                    artifacts helping speed up the process.  For linear development it is suggested to always start in
                    the Data Object Developer as it sets the property fields for the others.
                </para>
            </sect2>
            <sect2>
                <title>Exiting</title>
                <para>
                    Once the user has completed creating a OJB Class Descriptor they can exit back to the RDO's main menu
                    by simply selecting the "Exit" option from the OJB Developer menu.
                </para>
            </sect2>
        </sect1>
        <sect1>
            <title>Data Dictionary Developer</title>
            <para>
                The Data Dictionary File is a xml file generated using the Spring Beans format.  The Dictionary contains
                information on the a single Data Object. This includes ways to identify it and its different properties.
                It also contains definitions for each property to aid in the validation of information it holds.
            </para>
            <sect2>
                <title>Creating a New Data Dictionary</title>
                <para>
                    When the Data Dictionary Developer is started the user is prompted to enter the package of the Data
                    Object being defined in this Dictionary.  The package should be the exact import package for the Object.
                </para>
                <sect3>
                    <title>Linear Development</title>
                    <para>
                        If the user is using the linear development method and has created the Data Object they can fill
                        in the information for the Dictionary using the information from this artifact.  Creating the
                        Object first will allow the user to select the different data properties from it when adding keys,
                        title attributes and definitions to the Dictionary.
                    </para>
                </sect3>
            </sect2>
            <sect2>
                <title>Setting the Object Label</title>
                <para>
                    To set the object label of the Dictionary select "Set Object Label" from the main menu.  This will
                    then prompt the user to enter the label.
                </para>
            </sect2>
            <sect2>
                <title>Adding Primary Keys</title>
                <para>
                    To add a set of primary keys to the Dictionary select "Add Primary Keys" from the main menu.  This
                    will display a list of properties in the Data Object in which the user can add (if no Data Object
                    was created or the new property is not in the list the user can create a new one by selecting "New
                    Property").  Each key is added one at a time and the complete list of keys should be added in a
                    single run of this option.
                </para>
            </sect2>
            <sect2>
                <title>Adding Title Attributes</title>
                <para>
                    To add a set of title attributes to the Dictionary select "Add Title Attribute" from the main menu.
                    This will display a list of properties in the Data Object in which the user can add (if no Data
                    Object was created or the new property is not in the list the user can create a new one by selecting
                    "New Property").  Each attribute is added one at a time and the complete list of attributes should
                    be added in a single run of this option.
                </para>
            </sect2>
            <sect2>
                <title>Adding Attribute Definitions</title>
                <para>
                    To add an attribute definition to the Dictionary select "Add Attribute Definition" from the main menu.
                    This will display a list of properties in the Data Object in which the user can select (if no Data
                    Object was created or the new property is not in the list the user can create a new one by selecting
                    "New Property").  A list of attributes for this definition will be displayed; a user can add an
                    attribute by selecting it from the list using the index on the left side which will then prompt
                    them to enter the value for it.
                </para>
            </sect2>
            <sect2>
                <title>Adding Relation Definition</title>
                <para>
                    To add an relationship definition to the Dictionary select "Add Relation Definition" from the main
                    menu.  This will display a list of properties in the Data Object in which the user can select (if no
                    Data Object was created or the new property is not in the list the user can create a new one by selecting
                    "New Property").  Next they will be prompted to enter the target class which should be the import
                    package of the class being referenced.  Then they can add primatives (then supports) by entering the
                    source property and target property in the form of "source,target" in which the source is the name of
                    a property in the class being wrote in the dictionary and the target is the name of a property in the
                    class being referenced.
                </para>
            </sect2>
            <sect2>
                <title>Adding Collection Definitions</title>
                <para>
                    To add an collection definition to the Dictionary select "Add Collection Definition" from the main
                    menu.  This will display a list of properties in the Data Object in which the user can select (if no
                    Data Object was created or the new property is not in the list the user can create a new one by selecting
                    "New Property").  Next they will be prompted to enter the target class which should be the import
                    package of the class being referenced. Finally they will be prompted to enter the label, short label
                    and element label for the collection (they can default these when asked, letting the Developer create them).
                </para>
            </sect2>
            <sect2>
                <title>Modifying The Data Dictionary</title>
                <para>
                    To modify information already entered into the Data Dictionary the user can select "Modify Menu" from the
                    main menu.  This will take them to a new menu in which they are able to modify any piece of data already
                    entered by selecting from the options and following the prompts.  Where the primary data entering
                    options in the main menu deal with collecting data for a whole item at once, the options under the
                    modify menu handle only a specific segment of the data at one time.
                </para>
            </sect2>
            <sect2>
                <title>Previewing the Dictionary</title>
                <para>
                    Once the necessary information has been entered into the Data Dictionary Developer the user can preview
                    a the data for the new Dictionary by selecting "Preview Dictionary" in the main menu.  This will display
                    all the data entered as it would appear in the file.
                </para>
            </sect2>
            <sect2>
                <title>Writing the Dictionary to File</title>
                <para>
                    After checking the Dictionary for completeness and correctness it can then be written to the appropriate
                    location defined in the program properties file by selecting "Write Dictionary" from the main menu.
                    This option automatically writes the complete Dictionary to a xml file at that location.  Once the file
                    is wrote the program prompts the user if they would like to open the new file.  By entering "yes" to
                    this prompt the file will then be opened using the computer's default program for opening files of the
                    type xml.
                </para>
            </sect2>
            <sect2>
                <title>Linear Development</title>
                <para>
                    When looking at the main menu the user will notice that there are two options to write: "Write
                    Dictionary" and "Write Dictionary and Start ____."  The first option merely writes the Dictionary
                    being worked on to its file and stays in the Data Dictionary Developer, the second option however is
                    for the linear development method.  Meaning that it will write the Dictionary to file then exit the
                    Data Dictionary Developer and start the next Developer as assigned in the properties file.  By doing
                    this the information entered for the Dictionary and previous artifacts is used to help in making the
                    other artifacts helping speed up the process.  For linear development it is suggested to always start
                    in the Data Object Developer as it sets the property fields for the others.
                </para>
            </sect2>
            <sect2>
                <title>Exiting</title>
                <para>
                    Once the user has completed creating a Data Dictionary they can exit back to the RDO's main menu by
                    simply selecting the "Exit" option from the OJB Developer menu.
                </para>
            </sect2>
        </sect1>
        <sect1>
            <title>View Developer</title>
            <para>
                The View File is a xml file generated using the Spring Beans format.  The Views contains information on
                how to display different web pages as well as how the flow of data is handle between the web page and
                the database.
            </para>
            <sect2>
                <title>Creating New Views</title>
                <para>
                    When the View Developer is started the user is prompted to enter the package of the Data Object being
                    displayed in this Views.  The package should be the exact import package for the Object.
                </para>
                <sect3>
                    <title>Linear Development</title>
                    <para>
                        If the user is using the linear development method and has created the Data Object they can fill
                        in the information for the Views using the information from this artifact.  Creating the Object
                        first will allow the user to select the different data properties from it when adding fields to
                        the Views.
                    </para>
                </sect3>
            </sect2>
            <sect2>
                <title>Setting the Look Up View</title>
                <para>
                    To set the look up view select "Set Look Up View" from the main menu.  The user will then be prompted
                    to enter the title of the view.  After this the user creates the field lists for the search, result
                    and default sort fields by selecting from a list of properties in the Data Object (if no Data Object
                    was created or the new property is not in the list the user can create a new one by selecting "New Property").
                </para>
            </sect2>
            <sect2>
                <title>Setting the Inquiry View</title>
                <para>
                    To set the inquiry view select "Set Inquiry View" from the main menu.  The user will then be prompted
                    to enter the title of the view.  After this the user will be continually prompted to create sections
                    for the View.  To create a section they are first asked for the sections name and the instructional
                    text. Next a list of properties in the Data Object in which the user can add as fields is displayed
                    (if no Data Object was created or the new property is not in the list the user can create a new one by
                    selecting "New Property").  After selecting the fields covered in the section the user sets the type
                    of section it is from a list.  Each type has its own information that the user can enter by following
                    the prompts.
                </para>
            </sect2>
            <sect2>
                <title>Setting the Maintenance</title>
                <para>
                    To set the Maintenance artifact select "Set Maintenance Artifact" from the main menu.  The user will
                    be prompted to enter the document type, followed by displaying a list of properties in the Data Object
                    in which the user can select as locking keys (if no Data Object was created or the new property is not
                    in the list the user can create a new one by selecting "New Property").
                </para>
            </sect2>
            <sect2>
                <title>Setting the Maintenance View</title>
                <para>
                    To set the maintenance view select "Set Maintenance View" from the main menu. After this the user will
                    be continually prompted to create sections for the View.  To create a section they are first asked for
                    the sections name and the instructional text. Next a list of properties in the Data Object in which the
                    user can add as fields is displayed (if no Data Object was created or the new property is not in the list
                    the user can create a new one by selecting "New Property").  After selecting the fields covered in the
                    section the user sets the type of section it is from a list.  Each type has its own information that
                    the user can enter by following the prompts.
                </para>
            </sect2>
            <sect2>
                <title>Modifying The Views</title>
                <para>
                    To modify information already entered into the Views the user can select "Modify Menu" from the
                    main menu.  This will take them to a new menu in which they are able to modify any piece of data already
                    entered by selecting from the options and following the prompts.  Where the primary data entering
                    options in the main menu deal with collecting data for a whole item at once, the options under the
                    modify menu handle only a specific segment of the data at one time.
                </para>
            </sect2>
            <sect2>
                <title>Previewing Views</title>
                <para>
                    Once the necessary information has been entered into the View Developer the user can preview a the
                    data for the new Views by selecting "Preview Views" in the main menu. This will display all the data
                    entered as it would appear in the file.
                </para>
            </sect2>
            <sect2>
                <title>Writing Views to File</title>
                <para>
                    After checking the Views for completeness and correctness they can then be written to the appropriate
                    location defined in the program properties file by selecting "Write Views" from the main menu.  This
                    option automatically writes the complete Views to a single xml file at that location.  Once the file
                    is wrote the program prompts the user if they would like to open the new file.  By entering "yes" to
                    this prompt the file will then be opened using the computer's default program for opening files of the
                    type xml.
                </para>
            </sect2>
            <sect2>
                <title>Linear Development</title>
                <para>
                    When looking at the main menu the user will notice that there are two options to write: "Write Views"
                    and "Write Views and Start ____."  The first option merely writes the Views being worked on to its
                    file and stays in the View Developer, the second option however is for the linear development method.
                    Meaning that it will write the Views to file then exit the View Developer and start the next Developer
                    as assigned in the properties file.  By doing this the information entered in previous artifacts is
                    used to help in making the other artifacts helping speed up the process.  For linear development it
                    is suggested to always start in the Data Object Developer as it sets the property fields for the others.
                </para>
            </sect2>
            <sect2>
                <title>Exiting</title>
                <para>
                    Once the user has completed creating Views they can exit back to the RDO's main menu by
                    simply selecting the "Exit" option from the View Developer menu.
                </para>
            </sect2>
        </sect1>
    </chapter>
    <chapter version="5.0" xml:id="intro" xmlns="http://docbook.org/ns/docbook"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:ns5="http://www.w3.org/1999/xhtml"
             xmlns:ns4="http://www.w3.org/2000/svg"
             xmlns:ns3="http://www.w3.org/1998/Math/MathML"
             xmlns:ns="http://docbook.org/ns/docbook">
        <title>Technical Guide</title>
        <sect1>
            <title>Program Architecture Design</title>
            <para>
                Design Goals
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Allow easy modification, expansion, and implementation of new features
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Allow users to modify program set up to match their needs
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Allow easy switching and replacement of program components
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Allow easy manipulation of data by the user
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                The design model behind the Rice Model Objects Developer focuses extensively on breaking the program into
                smaller and smaller segments.  While this can end up some modifications needing changes across multiple
                components it decreases the size of each change needed and the organization of the program makes it easy
                to locate the locations of the changes needed.  For the most changes however only a single component will
                need to be changed.  Also by breaking the components in to small linear segments it is easy to replace or
                add components to the program.
            </para>
            <para>
                The main breakup of the program focus around a Model View Controller (MVC) design pattern where the data
                collected and used in the program is separated from the user or machine interface with a controller
                directing the flow of information between them.  Extra functionality such as validation is also broken
                into its own component giving each class a clear and precise responsibity.  Since the program deals with
                the creation of multiple distinct artifacts it is further broken down into independent developers deploying
                the MVC pattern, each of which could function by themselves.
            </para>
        </sect1>
        <sect1>
            <title>Main System Design</title>
            <para>
                The main system design focuses on connecting the different developers and allowing  communication and
                travel between them in the program.  To do this it utilizes MVC as well but because of the size the View
                and Controller are combined into one class with its purpose mainly being to route the user between
                Developers.  Also the main system contains two  Models. The first is the Utilities class which contains
                information about the program set up like the properties file and error message list.  The other is the
                Context class which contains information saved in each Developer to be used by the others and also handles
                the file save paths of each.
            </para>
            <para>
                To facilitate travel between the Developers reflection is used to call upon gateway classes the create
                and start their Developer. This allows the user to define the order in which the Developers are called
                from the programs properties file. The naming scheme for these gateway classes is Generate+artifactName.
                Another system implemented allow navigation throughout the program is a pair of escape exceptions which
                are connected to the user input and by pass regular validation.  They allow the program to escape the
                current path of method calls and return back to a determined point.
            </para>
            <itemizedlist>
                <listitem>
                    <para>EscapeInputException:  This exception allows the user to exit a prompt at anytime and returns
                        them back to the closest menu.</para>
                </listitem>
                <listitem>
                    <para>EscapeThreadException: This exception allows the program to end its current running if the proper
                        input is injected into the user input line.  This exception is in place to allow a wrapper handling
                        multiple programs to exit the RDO program thread safely if the user switches to another thread,
                        freeing system resources. </para>
                </listitem>
            </itemizedlist>

            <para>
                The final aspect of the main system design is a set of common classes for each Developer's View, Controller,
                Writer and Validations to build off of.  These common classes contain methods and data utilized by multiple
                classes cutting down on size of each Developer's class as well as allowing quick changes to aspects
                that affect all of the Developers.
            </para>
        </sect1>
        <sect1>
            <title>Developer Design</title>
            <para>
                Each developer is broken into several parts by the use of MVC design and additional components:
            </para>
            <itemizedlist>
                <listitem>
                    Model
                    <para>
                        This is the data storage for all information contained by the artifact that the developer creates.
                        The data model can consist of several different classes each containing part of the artifact
                        information.  Unlike the other components within the developer Model classes do not follow a set
                        naming scheme
                    </para>
                </listitem>
                <listitem>
                    View
                    <para>
                        This is the user interface of the developer which focuses on the collection of the raw information.
                        The only processing done to the data at this point is validation that the information the user
                        inputs is correct.  The View class follows the naming scheme DeveloperName + View.
                    </para>
                </listitem>
                <listitem>
                    Controller
                    <para>
                        This class controls the flow of information between the Developer's View and Model.  Raw data
                        collected by the View is processed so that it can be added to the Model.  The Controller class
                        follows the naming scheme DeveloperName + Controller.
                    </para>
                </listitem>
                <listitem>
                    Writer
                    <para>
                        This is the machine interface of the developer and is responsible for writing the information
                        stored in the Model to a file.  The location of the file is defined by the user in the program's
                        property file and the name of the file is automatically generated based on KRAD naming schema.
                        The Writer class follows the naming scheme DeveloperName+Writer.
                    </para>
                </listitem>
                <listitem>
                    Validations
                    <para>
                        This class focuses on determining whether the information entered by the user is of the correct
                        form and value.  To allow quick checking and response to the user validation is made for each
                        segment of data given by the user rather than validating when adding information to the Model.
                        The Validations class follows the naming scheme DeveloperName+Validations.
                    </para>
                </listitem>
                <listitem>
                    Converter
                    <para>
                        The purpose of this class is to breakdown and convert the information collected within the Models
                        of the other artifacts so it can be used to fill the Model of the current artifact.  This is to
                        help reduce the repetitiveness of entering the same information in each artifact.  Unlike the
                        other classes only select Developers utilize a Converter.  The Converter class follows the naming
                        scheme DeveloperName+Converter.
                    </para>
                </listitem>
            </itemizedlist>
        </sect1>
        <sect1>
            <title>Developer Data Models</title>
            <sect2>
                <title>Java Object Writer</title>
                <mediaobject>
                    <imageobject>
                        <imagedata format="JPEG" fileref="../images/KRAD_Guide/tool-rdo-images/JavaObjectWriter.jpg" width="100px" depth="100px"
                                />
                    </imageobject>
                </mediaobject>
                <table>
                    <title>DataObject</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>dataObjectName</entry>
                                <entry>The Data Object's class name</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>authorName</entry>
                                <entry>Name of the author</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>authorEmail</entry>
                                <entry>Email address of the author</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isBusinessObject</entry>
                                <entry>Is this Data Object a PersistableBusinessObject</entry>
                            </row>
                            <row>
                                <entry>Long</entry>
                                <entry>serialVersionUID</entry>
                                <entry>Serialization class id for the Data Object</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;DataEntry&gt;</entry>
                                <entry>dataEntries</entry>
                                <entry>A list of data properties contained in this Data Object</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>DataEntry</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>dataName</entry>
                                <entry>The variable name of the Data Entry</entry>
                            </row>
                            <row>
                                <entry>int</entry>
                                <entry>entryType</entry>
                                <entry>The type of entry (Common or Relation)</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isMany</entry>
                                <entry>Is this property a one to many</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>dataType</entry>
                                <entry>The name of the data type</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>dataPath</entry>
                                <entry>Java import package path of the data type</entry>
                            </row>
                            <row>
                                <entry>final static int</entry>
                                <entry>COMMON_TYPE</entry>
                                <entry>Static DataEntry.entryType, value = 1</entry>
                            </row>
                            <row>
                                <entry>final static int</entry>
                                <entry>RELATION_TYPE</entry>
                                <entry>Static DataEntry.entryType, value = 2</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </sect2>
            <sect2>
                <title>DDL Writer</title>
                <mediaobject>
                    <imageobject>
                        <imagedata format="JPEG" fileref="../images/KRAD_Guide/tool-rdo-images/DDLWriter.jpg" width="400px" depth="400px"/>
                    </imageobject>
                </mediaobject>
                <table>
                    <title>DDLTable</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>tableName</entry>
                                <entry>The name of the table</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;DDLColumn&gt;</entry>
                                <entry>tableColumns</entry>
                                <entry>A list of columns contained in the table</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;TableConstraint&gt;</entry>
                                <entry>tableConstraints</entry>
                                <entry>A list of constraints contained in the table</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>DDLColumn</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>columnName</entry>
                                <entry>The name of the column</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>columnType</entry>
                                <entry>The JDBC type </entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>defaultValue</entry>
                                <entry>The default value of the column when its created</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isNullable</entry>
                                <entry>Is this column allowed to be empty</entry>
                            </row>
                            <row>
                                <entry>int[]</entry>
                                <entry>columnParameters</entry>
                                <entry>A list of parameters defining the column type</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>TableConstraint</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>int</entry>
                                <entry>constraintType</entry>
                                <entry>The type of constraint</entry>
                            </row>
                            <row>
                                <entry>final static int</entry>
                                <entry>TC_PRIMARY_KEY</entry>
                                <entry>Static TableConstraint.constraintType, value = 1</entry>
                            </row>
                            <row>
                                <entry>final static int</entry>
                                <entry>TC_FOREIGN_KEY</entry>
                                <entry>Static TableConstraint.constraintType, value = 2</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>PrimaryKeyConstraint (extends TableConstraint)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>tableName</entry>
                                <entry>The name of the table affected by the constraint</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;String&gt;</entry>
                                <entry>columnNames</entry>
                                <entry>A list of column names affected by the constraint</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>ForeignKeyConstraint (extends TableConstraint)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>baseTableName</entry>
                                <entry>The base name of the table affected by the constraint</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>referenceTableName</entry>
                                <entry>The referenced name of the table affected by the constraint</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;String&gt;</entry>
                                <entry>baseColumnNames</entry>
                                <entry>A list of column names from the base table affected by the constraint</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;String&gt;</entry>
                                <entry>referenceColumnNames</entry>
                                <entry>A list of column names from the referenced table affected by the constraint</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </sect2>
            <sect2>
                <title>OJB Writer</title>
                <mediaobject>
                    <imageobject>
                        <imagedata format="JPEG" fileref="../images/KRAD_Guide/tool-rdo-images/OJBWriter.jpg" width="400px" depth="400px"/>
                    </imageobject>
                </mediaobject>
                <table>
                    <title>OJBClassDescriptor</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>dataClassName</entry>
                                <entry>The name of the Data Object</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>tableName</entry>
                                <entry>The name of the DDL Table</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;OJBProperty&gt;</entry>
                                <entry>properties</entry>
                                <entry>A list of OJB information on common properties</entry>
                            </row>
                            <row>
                                <entry>ArrayList &lt;OJBRelation&gt;</entry>
                                <entry>relations</entry>
                                <entry>A list of OJB information on relation properties</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>OJBProperty</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>columnName</entry>
                                <entry>The name of the column</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>jdbcType</entry>
                                <entry>The JDBC type of the column</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isPrimaryKey</entry>
                                <entry>Is this column a primary key?</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isSequence</entry>
                                <entry>If its a primary key is it a sequence?</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>sequenceName</entry>
                                <entry>If its a sequence the name of the sequences</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>OJBRelation</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>className</entry>
                                <entry>The name of the Java Class in which its a property of</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isAutoRetrieve</entry>
                                <entry>Is this set to automatically retrieve?</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isAutoUpdate</entry>
                                <entry>Is this set to automatically update?</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isAutoDelete</entry>
                                <entry>Is this set to automatically delete?</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isProxy</entry>
                                <entry>Is this a proxy?</entry>
                            </row>
                            <row>
                                <entry>boolean</entry>
                                <entry>isCollection</entry>
                                <entry>Is this one to many?</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>foreignKeyFields</entry>
                                <entry>A list of  properties referenced as foreign keys</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>orderFields</entry>
                                <entry>A list of properties that determine the order of the foreign keys</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </sect2>
            <sect2>
                <title>Data Dictionary Writer</title>
                <mediaobject>
                    <imageobject>
                        <imagedata format="JPEG" fileref="../images/KRAD_Guide/tool-rdo-images/DataDictionaryWriter.jpg" width="400px" depth="400px"/>
                    </imageobject>
                </mediaobject>
                <table>
                    <title>DictionaryObject</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>objectLabel</entry>
                                <entry>The normal identifier of the Java Object</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>dataObjectClass</entry>
                                <entry>The Java Object being defined</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>titleAttributes</entry>
                                <entry>A list of properties defined as title attribute</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>primaryKeys</entry>
                                <entry>A list of properties defined as primary key </entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;AttributeDefinition&gt;</entry>
                                <entry>attributeDefinitions</entry>
                                <entry>A list of definitions for the common properties of the Object</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;RelationshipDefinition&gt;</entry>
                                <entry>relationshipDefinitions</entry>
                                <entry>A list of definitions for the relation properties of the Object</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;CollectionDefinition&gt;</entry>
                                <entry>collectionDefinitions</entry>
                                <entry>A list of definitions for the one to many properties of the Object</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>AttributeDefinition</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property being defined</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;Attribute&gt;</entry>
                                <entry>simpleAttributes</entry>
                                <entry>A list of Attributes that are wrote as a property bean name, property bean value
                                    in the file</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;Attribute&gt;</entry>
                                <entry>specialAttributes</entry>
                                <entry>A list of Attributes that are wrote as property bean name, bean parent in the file</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>RelationshipDefinition</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property being defined</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>targetClass</entry>
                                <entry>The Data Object being referenced</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;Attribute&gt;</entry>
                                <entry>primatives</entry>
                                <entry>A list of paired classes</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;Attribute&gt;</entry>
                                <entry>supports</entry>
                                <entry>A list of paired classes</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>CollectionDefinition</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>targetClass</entry>
                                <entry>The Data Object being referenced</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property being defined</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>label</entry>
                                <entry>The normal identifier for the property</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>shortLabel</entry>
                                <entry>The short identifier for the property</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>elementLabel</entry>
                                <entry>The single element identifier for the property</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>Attribute</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>name</entry>
                                <entry>The name of the attribute / First String</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>value</entry>
                                <entry>The value of the attribute / Second String</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </sect2>
            <sect2>
                <title>View Writer</title>
                <mediaobject>
                    <imageobject>
                        <imagedata format="JPEG" fileref="../images/KRAD_Guide/tool-rdo-images/ViewWriter.jpg" width="400px" depth="400px"/>
                    </imageobject>
                </mediaobject>
                <table>
                    <title>LookUp</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>title</entry>
                                <entry>The title of the view</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>dataObjectClass</entry>
                                <entry>The name of the Data Object being looked at</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>searchFields</entry>
                                <entry>List of properties that can be searched</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>resultFields</entry>
                                <entry>List of properties displayed after a search</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>defaultSortFields</entry>
                                <entry>List of properties that the results are sorted by</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>Inquiry</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>title</entry>
                                <entry>The title of the view</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>dataObjectClass</entry>
                                <entry>The name of the Data Object being looked at</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;Section&gt;</entry>
                                <entry>sections</entry>
                                <entry>A list of Sections in the view</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>MaintenanceDocument</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>dataObjectClass</entry>
                                <entry>The name of the Data Object being looked at</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>documentTypeName</entry>
                                <entry>The name of the document type</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>lockingKeys</entry>
                                <entry>A list of fields that are locked</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>MaintenanceView</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>dataObjectClass</entry>
                                <entry>The name of the Data Object being looked at</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;Section&gt;</entry>
                                <entry>sections</entry>
                                <entry>A list of Sections in the view</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>Section</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>title</entry>
                                <entry>The title of the section</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>instructionalText</entry>
                                <entry>The instructions for the section</entry>
                            </row>
                            <row>
                                <entry>SectionType</entry>
                                <entry>sectionType</entry>
                                <entry>Additional information based on what type of section it is</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>fields</entry>
                                <entry>A list of fields being displayed in this section</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>SectionType</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>sectionType</entry>
                                <entry>The type of section </entry>
                            </row>
                            <row>
                                <entry>final static String</entry>
                                <entry>GRIDTYPE</entry>
                                <entry>SectionType.sectionType, value ="Grid"</entry>
                            </row>
                            <row>
                                <entry>final static String</entry>
                                <entry>STACKEDTYPE</entry>
                                <entry>SectionType.sectionType, value ="Stacked"</entry>
                            </row>
                            <row>
                                <entry>final static String</entry>
                                <entry>TABLETYPE</entry>
                                <entry>SectionType.sectionType, value ="Table"</entry>
                            </row>
                            <row>
                                <entry>final static String</entry>
                                <entry>HORIZONTALBOX</entry>
                                <entry>SectionType.sectionType, value ="HorizontalBox"</entry>
                            </row>
                            <row>
                                <entry>final static String</entry>
                                <entry>VERTICALBOX</entry>
                                <entry>SectionType.sectionType, value ="VerticalBox"</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>GridType (extends SectionType)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>int</entry>
                                <entry>numberOfColumns</entry>
                                <entry>The number of columns in the grid</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>StackedType (extends SectionType)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>String</entry>
                                <entry>summaryTitle</entry>
                                <entry>The title of the summary</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property being looked at in the section</entry>
                            </row>
                            <row>
                                <entry>ArrayList&lt;String&gt;</entry>
                                <entry>summaryFields</entry>
                                <entry>A list of fields being summarized</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>TableType (extends SectionType)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>int</entry>
                                <entry>numberOfColumns</entry>
                                <entry>The number of columns in the grid</entry>
                            </row>
                            <row>
                                <entry>String</entry>
                                <entry>propertyName</entry>
                                <entry>The name of the property being looked at in the section</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>HorizontalBoxType (extends SectionType)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>none</entry>
                                <entry>none</entry>
                                <entry>none</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table>
                    <title>VerticalBoxType (extends SectionType)</title>
                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Data Type</entry>
                                <entry>Name</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>none</entry>
                                <entry>none</entry>
                                <entry>none</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </sect2>
        </sect1>
    </chapter>
    <chapter version="5.0" xml:id="intro" xmlns="http://docbook.org/ns/docbook"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:ns5="http://www.w3.org/1999/xhtml"
             xmlns:ns4="http://www.w3.org/2000/svg"
             xmlns:ns3="http://www.w3.org/1998/Math/MathML"
             xmlns:ns="http://docbook.org/ns/docbook">
        <title>Appendix and Logs</title>
        <sect1>
            <title>Logs</title>
            <sect2>
                <title>Program Update History</title>
                <table>
                    <title>Program History</title>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Date</entry>
                                <entry>Version</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>07/XX/2012</entry>
                                <entry>1.0.0</entry>
                                <entry>Initial Release</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </sect2>
        </sect1>
    </chapter>
</book>