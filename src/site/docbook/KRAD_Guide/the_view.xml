<?xml version='1.0' encoding='UTF-8'?> 
<!--

    Copyright 2005-2013 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<chapter xml:id="the_view" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook"  version="5.0">    
    <title>The View </title>
    <section>
        <title>Putting It Together with Views </title>
        <section>
            <title>The View Component</title>
            <para>The view component sits at the very top of the component tree. It holds one or
                more pages that allow the user to complete a course grained task. In addition to the
                pages it holds, the view also contains the standard container header, footer, and
                errors fields. We also configure navigation for the pages through the view
                component.</para>
            <para>In addition to the interface related configuration, many properties exist on the
                view component for configuring backend processing. Some examples of this include the
                form post URL, the form (model) class, and validation flags.</para>
            <para>The base view component is defined with the class
                org.kuali.rice.krad.uif.view.View. For views that need to render an HTML form, the
                subclass org.kuali.rice.krad.uif.view.FormView is used. The component beans we use
                to configure the view are 'Uif-View' and 'Uif-FormView'. The following is an example
                of configuring a form view:</para>
            <programlisting>
&lt;bean id="Travel-testView1" parent="Uif-FormView"&gt;
    &lt;property name="title" value="Test View 1"/&gt;
    &lt;property name="items"&gt;
        &lt;list&gt;
            &lt;bean parent="Uif-Disclosure-Page" p:id="page1"&gt;
                &lt;property name="items"&gt;
                    &lt;list&gt;
                        &lt;ref bean="testSection1"/&gt;
                        &lt;ref bean="testSection2"/&gt;
                        &lt;ref bean="testSection3"/&gt;
                        &lt;ref bean="testSection4"/&gt;
                        &lt;ref bean="testSection5"/&gt;
                    &lt;/list&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name="formClass" value="edu.sampleu.travel.krad.form.UITestForm"/&gt;
    &lt;property name="defaultBindingObjectPath" value="travelAccount1"/&gt;
&lt;/bean&gt;
            </programlisting>    
            <para>In this example, we first set the title for the view (inherited from
                ContainerBase). Then, we configured one page in the view's items list that contains
                five sections. Finally, we associated the view with the form class 'UITestForm' and
                specify a default binding object path.</para>
            <para>The id given for the view component (either by explicitly setting the id property
                or through the bean id) is very important. For the case of general form view, this
                is how we will request the view with a URL (custom views that extend the general
                form view, known as view types, may support other ways of retrieving a view).</para>
        </section>
        <section role="NotInToc">
            <title>Recap</title>
            <itemizedlist>
                <listitem>
                    <para>The view groups together all the UI components for a course grained task
                        (it sits at the top of the component tree)</para>
                </listitem>
                <listitem>
                    <para>A view contains one or more pages, in addition to the standard container
                        header, footer, and errors field</para>
                </listitem>
                <listitem>
                    <para>Navigation between pages is configured through the view</para>
                </listitem>
                <listitem>
                    <para>The view component is defined by the class
                        org.kuali.rice.krad.uif.view.View</para>
                </listitem>
                <listitem>
                    <para>org.kuali.rice.krad.uif.view.FormView extends the View class for adding
                        HTML form functionality</para>
                </listitem>
                <listitem>
                    <para>The base beans for the view component are 'Uif-View' and
                        'Uif-FormView'</para>
                </listitem>
                <listitem>
                    <para>The view id can be used to request a view instance with a URL (for the
                        general form view, this is the only way to request the view)</para>
                </listitem>
                <listitem>
                    <para>The following properties are supported on the View component:</para>
                    <itemizedlist>
                            <listitem>
                                <para>namespaceCode – Module (or application) namespace code the
                                view is associated with. If given, this will be used when making KIM
                                permissions checks (other future uses are planned as well)</para>
                        </listitem>
                        <listitem>
                            <para>viewName – A unique name for the view within a view type. View
                                types (covered in Chapter 13) support alternate ways of retrieving a
                                view. For example, a lookup view can be requested by passing the
                                data object class the lookup view is associated with. If multiple
                                lookup views exist for the same data object class, they can be
                                differentiated by using the viewName. The viewName is then passed
                                with the data object class through the URL. If the view name is not
                                specified, it inherits the name 'default'</para>
                        </listitem>
                        <listitem>
                            <para>theme – The ViewTheme object associated with the view. This
                                configures the base set of style sheets and script files that are
                                used for the rendered view</para>
                        </listitem>
                        <listitem>
                            <para>applicationHeader and applicationFooter – A Header element and
                                Group footer that will be rendered before and after the view
                                contents. This is used to define a consistent application header and
                                footer through all views (note most Rice applications currently use
                                the portal header and footer instead)</para>
                        </listitem>
                        <listitem>
                            <para>breadcrumbs – A Breadcrumbs widget used to provide application
                                crumbs. Note this provides the conceptial location of the view
                                within the application, not the 'trail', unless you are using
                                path-based breadcrumbs.</para>
                        </listitem>
                        <listitem>
                            <para>growls – Growls widget that can be used to configure growls that
                                are displayed for the view</para>
                        </listitem>
                        <listitem>
                            <para>growlMessagingEnabled – Enables or disables growl messages. If
                                enabled, growls will appear on refresh of a page when there are
                                error, warning, or informational messages. If disabled, growls can
                                still be given with the use of custom script</para>
                        </listitem>
                        <listitem>
                            <para>entryPageId – When a view contains multiple pages, specifies the
                                page that should be opened for the initial request. If not
                                specified, the first page configured in the items list is
                                used</para>
                        </listitem>
                        <listitem>
                            <para>currentPageId – Id for the page to be rendered. In the controller
                                this property can be set to change the page that will be rendered.
                                The default navigate method provided in UifControllerBase takes care
                                of changing this value</para>
                        </listitem>
                        <listitem>
                            <para>navigation – The NavigationGroup that will be rendered for the
                                view</para>
                        </listitem>
                        <listitem>
                            <para>formClass – Full class name for the form (top level model object).
                                Note that it is not a requirement that the form class extends
                                UifFormBase, but it must implement the ViewModel interface</para>
                        </listitem>
                        <listitem>
                            <para>defaultBindingObjectPath – Default path to use for the binding
                                object path of DataBinding components. See ' Data Binding' in
                                Chapter 6</para>
                        </listitem>
                        <listitem>
                            <para>objectPathToConcreteClassMapping – A map of property paths to
                                class mappings. When a property has an abstract type (interface or
                                abstract class) it is not possible for the framework to create
                                instances of that class or, in many cases, find data dictionary or
                                persistence metadata. In these cases, a map entry can be added to
                                specify the concrete class to use</para>
                        </listitem>
                        <listitem>
                            <para>additionalScriptFiles – A list of script (.js) file paths (either
                                relative to the web root or full URLS) that should be included for
                                the rendered view</para>
                        </listitem>
                        <listitem>
                            <para>additionalCssFiles - A list of style (.css) file paths (either
                                relative to the web root or full URLS) that should be included for
                                the rendered view</para>
                        </listitem>
                        <listitem>
                            <para>viewTypeName – Name of the view type that the view belongs to.
                                This is generally set in the base beans for a view type (such as
                                'LOOKUP', or 'INQUIRY'). When requesting a view by type, this name
                                must be sent</para>
                        </listitem>
                        <listitem>
                            <para>viewHelperServiceClass – Full class name for the ViewHelperService
                                implementation. Defaults to
                                org.kuali.rice.krad.uif.service.impl.ViewHelperServiceImpl. Note you
                                may also inject the ViewHelperService instance by setting the
                                viewHelperService property</para>
                        </listitem>
                        <listitem>
                            <para>viewStatus – Lifecycle status for the view. This is generally just
                                used by the framework</para>
                        </listitem>
                        <listitem>
                            <para>viewIndex – A class the holds indexes for various view components.
                                This is used throughout the framework and custom code to retrieve
                                components. For example, suppose we wanted to find the InputField
                                for property 'field1' and we were given the view instance. Without
                                the index, we would need to traverse the component tree, looking for
                                InputField components, and then checking the property name. Using
                                the view index, we can simply get the InputField by the property
                                name with the contained index. The indexes are built while carrying
                                out the view lifecycle and traversing the tree for the phases</para>
                        </listitem>
                        <listitem>
                            <para>viewRequestParameters – A Map of request parameters that were used
                                to initialize the view component (see upcoming section 'View Request
                                Parameters'). These must be maintained on the form in the case of
                                view reinitialization (for example, in the case of a session
                                timeout)</para>
                        </listitem>
                        <listitem>
                            <para>presentationController – ViewPresentationController instance used
                                to perform logic for edit, read-only, and hidden states of
                                components</para>
                        </listitem>
                        <listitem>
                            <para>authorizer – ViewAuthorizer instance used to perform user based
                                authorization for a component's edit or view state</para>
                        </listitem>
                        <listitem>
                            <para>expressionVariables – A map of custom variables that can be used
                                in expressions. The map key gives the variable name, and the value
                                gives the expression to evaluate for the variable value. These are
                                evaluated at the beginning of the perform model phase, and then
                                available in any expression on the view's contained
                                components</para>
                        </listitem>
                        <listitem>
                            <para>singlePageView – Indicates whether the view only contains one page
                                group. In this case, the items configured are assumed to be section
                                groups, and the sections are inserted into a page through code. This
                                allows simpler configuration for views that typically don't have
                                multiple pages (such as a lookup view)</para>
                        </listitem>
                        <listitem>
                            <para>page – When singlePageView is true, this property holds the page
                                group that will be rendered. The items configured on the view are
                                then inserted into this group through code</para>
                        </listitem>
                        <listitem>
                            <para>viewMenuGroupName – A string that identifier the group the view
                                belongs to. This is currently not being used by KRAD, but is in
                                place for future portal improvements (in portal terms, we can think
                                of this as the channel the view link will be placed in)</para>
                        </listitem>
                        <listitem>
                            <para>applyDirtyCheck – Boolean that enables or disables the dirty
                                fields check</para>
                        </listitem>
                        <listitem>
                            <para>translateCodes – Boolean that indicates whether code properties
                                should automatically be translated to their name property for read
                                only display. This is similar to the function of DataField's
                                readOnlyDisplaySuffixPropertyName, however, the framework will
                                attempt to do this automatically</para>
                        </listitem>
                        </itemizedlist>
                </listitem>
                <listitem>
                    <para> The following additional properties are supported on the FormView component:</para>
                    <itemizedlist>
                            <listitem>
                            <para>renderForm – Boolean that determines whether the HTML form will be
                                rendered. In some cases, a view might need to conditionally render a
                                form for which this property can be used. By default it is set to
                                true</para>
                        </listitem>
                            <listitem>
                            <para>validateClientSide – Boolean that indicates whether client side
                                validation should be performed</para>
                        </listitem>
                            <listitem>
                            <para>validateServerSide – Boolean that indicates whether automatic
                                validation should be performed when the view is posted. This is
                                currently not supported, but is planned for the future. The
                                validation will be performed against any constraints defined on the
                                data fields (which could be inherited from the data dictionary
                                attribute definition)</para>
                        </listitem>
                        <listitem>
                            <para>formPostUrl – The relative or absolute URL the form should post
                                to. If not set, the framework will set this to the request URL (not
                                including the request parameter string) </para>
                        </listitem>
                        </itemizedlist>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section><title>Navigation </title><para>The following view example shows a multi-page view with
            a navigation component:</para>
        <programlisting>
&lt;bean id="Travel-testView2" parent="Travel-testView1"&gt;
   &lt;property name="title" value="Test View 2"/&gt;
   &lt;property name="navigation"&gt;
      &lt;ref bean="testViewMenu"/&gt;
   &lt;/property&gt;
   &lt;property name="items"&gt;
      &lt;list&gt;
         &lt;bean parent="Uif-Page" p:id="page1" p:title="Page 1"/&gt;
         &lt;bean parent="Uif-Page" p:id="page1" p:title="Page 1"/&gt;
         &lt;bean parent="Uif-Page" p:id="page1" p:title="Page 1"/&gt;
       &lt;/list&gt;
   &lt;/property&gt;
&lt;/bean&gt;
        
&lt;bean id="testViewMenu"
            parent="Uif-MenuNavigationGroup"&gt;
    &lt;property name="items"&gt;
       &lt;list&gt;
         &lt;bean parent="Uif-HeaderTwo" p:headerText="Navigation"/&gt;
         &lt;bean parent="Uif-NavigationActionLink" p:navigateToPageId="page1" 
               p:actionLabel="Page 1"/&gt;
         &lt;bean parent="Uif-NavigationActionLink"
            p:navigateToPageId="page2"             
               p:actionLabel="Page 2"/&gt;
         &lt;bean parent="Uif-NavigationActionLink" p:navigateToPageId="page3"
               p:actionLabel="Page 3"/&gt;
         &lt;bean parent="Uif-NavigationActionLink" p:navigateToPageId="page4" 
               p:actionLabel="Page 4"/&gt;
       &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
        </programlisting>
        <section role="NotInToc">
            <title>Recap</title>

                <itemizedlist>
                    <listitem>
                    <para>The NavigationGroup is a special type of group that renders navigation
                        links for a view</para>
                </listitem>
                    <listitem>
                        <para>The UIF provides the following navigation group beans:</para>
                        <itemizedlist>
                            <listitem>
                            <para>Uif-NavigationGroupBase – Base navigation group bean that sets the
                                template and adds the style class 'uif-navigationGroup'</para>
                        </listitem>
                        <listitem>
                            <para>Uif-MenuNavigationGroup – Navigation group that is rendered as a
                                menu. Adds the style class 'uif-menuNavigationGroup'</para>
                        </listitem>
                        <listitem>
                            <para>Uif-TabNavigationGroup – Navigation group that is rendered as
                                tabs. Adds the style class 'uif-tabNavigationGroup'</para>
                        </listitem>
                        </itemizedlist>
                </listitem>
                    <listitem>
                    <para>To configure the navigation links, we use the bean with id
                        'Uif-NavigationActionLink'. This bean sets up some default styling to the
                        link, and sets up a script call. We can also choose to use the
                        'Uif-NavigationActionButton' bean for a menu button, or the
                        'Uif-SecondaryNavigationActionButton' bean to provide a secondary
                        styling</para>
                </listitem>
                    <listitem>
                        <para>The <emphasis role="keyword">navigateToPageId</emphasis> property is set to
                        specify the page that should be navigated to when the link is selected. By
                        default, the server side method navigate is called, which will handle the
                        navigation (we can call another method using the standard methodToCall
                        property, and then call navigate at the end of our controller method)</para>
                </listitem>
                    <listitem>
                    <para>Header components can be used in the navigation group to label groupings
                        (really any component, such as images, can be used with the menu navigation
                        group; however, this is not really practical with the tab navigation)</para>
                </listitem>
                    <listitem>
                    <para>The navigation group is associated with the view by the property <emphasis
                        role="keyword">navigation</emphasis></para>
                </listitem>
                </itemizedlist>
        </section>
    </section>
    <section>
        <title>Breadcrumbs</title>
        <para>Breadcrumbs represent where the view is located in the overall application structure.
            They give the user a way to navigate to "parent" views/urls that may be associated with
            your application and are related to the View itself.  Because different applications
            have the ability to build out various unique site structures with Krad, what appears in
            the breadcrumb trail for a View is highly configurable.  <figure>
                <title>Breadcrumbs Appearance</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/KRAD_Guide/breadcrumbs.png" scalefit="1"/>
                    </imageobject>
                </mediaobject>
            </figure></para>
        <para>In the UI, Breadcrumbs are part of every View and appear at the very top of each View
            below the application's header and below the View's topGroup (if these are configured).
            By default, with no configuration, the breadcrumbs will contain a View breadcrumb, with
            the view title as determined by headerText of the View's header component and a page
            breadcrumb (also determined by its header's headerText).  If no title can be determined,
            the item is omitted from the trail.  In addition, by default, if there are zero or one
            breadcrumbs in the trail, the Breadcrumbs widget is omitted from the View.</para>
        <para>However, there are various ways to customize breadcrumbs beyond this default
            behavior.</para>
        <section>
            <title>BreadcrumbItem</title>
            <para>A BreadcrumbItem represents the label and the url for a breadcrumb that appears in
                the breadcrumbs trail.  Both View and PageGroup contain a BreadcrumbItem property
                called "breadcrumbItem".  As described above, the title and url of these
                BreadcrumbItems are determined automatically by Krad base beans and lifecycle
                methods, if not configured directly through xml.</para>
            <para>BreadcrumbItems contain the following properties:<table frame="all" pgwide="1"
                    tabstyle="striped">
                    <title>Tooltip Properties</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.4*"/>
                        <colspec colname="c3" colnum="2" colwidth="6.97*"/>
                        <thead>
                            <row>
                                <entry>Property</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>label</entry>
                                <entry>The label for this breadcrumbItem. The label is the textual
                                    content that will be displayed for the breadcrumb.  This label
                                    can contain SpringEL to contain text based on a property of the
                                    form.</entry>
                            </row>
                            <row>
                                <entry>url</entry>
                                <entry>The url (backed by a UrlInfo object) used for the breadcrumb
                                    link represented by this item</entry>
                            </row>
                            <row>
                                <entry>renderAsLink</entry>
                                <entry>If true, the BreadcrumbItem will render as a link, otherwise
                                    it will render as a span (not-clickable). By default, the last
                                    BreadcrumbItem in the list will ALWAYS render as span regardless
                                    of this property's value.</entry>
                            </row>
                            <row>
                                <entry>siblingBreadcrumbComponent</entry>
                                <entry>Set the sibling breadcrumb component for this breadcrumbs
                                    sibling content/navigation. This content will appear in a pop-up
                                    menu.  This should probably be set to one of the follow types: a
                                    text input field using a LocationSuggest widget, a dropdown
                                    field backed by KeyValueLocation, or an options list field
                                    backed by KeyValueLocation.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></para>
            <para>By explicitly setting the values on UrlInfo in the url property or by setting the
                label, the text of the breadcrumb and location the breadcrumb link points to can be
                changed.  Setting renderAsLink makes the item no longer a link.  The
                siblingBreadcrumbComponent allows for any content to pop up when they click an arrow
                icon rendered next to the breadcrumb, but this content most likely (and should)
                represent navigation to parallel locations to the location represented by the
                BreadcrumbItem.</para>
            <para>The siblingBreadcrumbComponent using a navigation OptionList control field will
                appear like this:<figure>
                    <title>siblingBreadcrumbComponent after clicking arrow</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/KRAD_Guide/siblingBreadcrumbComp.png"
                                scalefit="1"/>
                        </imageobject>
                    </mediaobject>
                </figure></para>
        </section>
        <section>
            <title>BreadcrumbOptions</title>
            <para>Both View and PageGroup also have multiple options for breadcrumb display in the
                object BreadcrumbOptions ("breadcrumbOptions" property).  The BreadcrumbOptions
                contains multiple lists that can contain additional BreadcrumbItems.   If set on the
                View, these lists are inherited by the PageGroup if the PageGroup does explicitly
                set them to something different. These lists are:<itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">homewardPathBreadcrumbs</emphasis> - breadcrumbs
                            that will appear at the start of the breadcrumb trail.  These should
                            represent the trail back to home (often one item labeled "Home").  These
                            breadcrumbs will appear before any ParentLocations or path-based
                            breadcrumbs (described
                            later).<programlisting>    &lt;property name="breadcrumbOptions.homewardPathBreadcrumbs">
      &lt;list>
        &lt;bean parent="Uif-BreadcrumbItem">
          &lt;property name="label" value="Home"/>
          &lt;property name="url.href" value="@{#ConfigProperties['application.url']}"/>
        &lt;/bean>
      &lt;/list>
    &lt;/property></programlisting></para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">preViewBreadcrumbs</emphasis> - breadcrumbs that
                            will appear before the breadcrumb represented by the View's
                            BreadcrumbItem</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">prePageBreadcrumbs</emphasis> - breadcrumbs that
                            will appear before the breadcrumb represented by the current PageGroup's
                            BreadcrumbItem<programlisting>    &lt;property name="breadcrumbOptions.preViewBreadcrumbs">
      &lt;list>
        &lt;bean parent="Uif-BreadcrumbItem" p:label="Application"
              p:url.href="@{#ConfigProperties['application.url']}"/>
      &lt;/list>
    &lt;/property>
    &lt;property name="breadcrumbOptions.prePageBreadcrumbs">
      &lt;list>
        &lt;bean parent="Uif-BreadcrumbItem" p:label="Previous Page"
              p:url.viewId="Demo-Breadcrumbs" p:url.pageId="Demo-Breadcrumbs-Page1"
              p:url.controllerMapping="/kradsampleapp"/>
      &lt;/list>
    &lt;/property></programlisting></para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">breadcrumbOverrides</emphasis> - the breadcrumbs
                            in this list will be used instead of any configured BreadcrumbItems on
                            the View, PageGroup, or in the preViewBreadcrumbs and
                            prePageBreadcrumbs.  homewardPathBreadcrumbs and
                            ParentLocation/path-based breadcrumbs will still
                            render.<programlisting>    &lt;property name="breadcrumbOptions.breadcrumbOverrides">
      &lt;list>
        &lt;bean parent="Uif-BreadcrumbItem" p:label="Application"
              p:url.href="@{#ConfigProperties['application.url']}"/>
        &lt;bean parent="Uif-BreadcrumbItem" p:label="Breadcrumbs Demo"
              p:url.viewId="Demo-Breadcrumbs-View" p:url.controllerMapping="/kradsampleapp"/>
        &lt;bean parent="Uif-BreadcrumbItem" p:label="Override Demo"
              p:url.viewId="Demo-Breadcrumbs-View9" p:url.controllerMapping="/kradsampleapp"/>
        &lt;bean parent="Uif-BreadcrumbItem" p:label="Demo Page"
              p:url.viewId="Demo-Breadcrumbs-View9" p:url.pageId="Demo-Breadcrumbs-Page1"
              p:url.controllerMapping="/kradsampleapp"/>
      &lt;/list>
    &lt;/property></programlisting></para>
                    </listitem>
                </itemizedlist></para>
            <para>The PageGroup BreadcrumbOptions object have more options defined in its class
                PageBreadcrumbOptions, that are specifically for rendering.  All the rendering of
                breadcrumbs is handled per a page so these flags can be toggled to display or not
                display the appropriate breadcrumbs on each page.  By default, any BreadcrumbItem or
                BreadcrumbItem list that has content is rendered.</para>
        </section>
        <section>
            <title>ParentLocation breadcrumbs</title>
            <para>The ParentLocation object is used to define another View or url as a "parent" to
                the current View.  When ParentLocation is defined, the View will attempt to follow
                the ParentLocation trail by first finding the View defined by the ParentLocation and
                then finding the next ParentLocation View of <emphasis role="italic">that</emphasis>
                View, and so forth, until the end of the trail is found (or a ParentLocation does
                not point to a View).  During this traversal, the BreadcrumbItems for these parent
                locations are collected from the Views processed to be used in the breadcrumbs trail
                rendered by the UI.</para>
            <para>ParentLocation can be configured by setting the "parentLocation" on a View.  The
                ParentLocation object has the following properties:<table frame="all" pgwide="1"
                    tabstyle="striped">
                    <title>Tooltip Properties</title>
                    <tgroup cols="2">
                        <colspec colname="c1" colnum="1" colwidth="1.4*"/>
                        <colspec colname="c3" colnum="2" colwidth="6.97*"/>
                        <thead>
                            <row>
                                <entry>Property</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>parentViewLabel</entry>
                                <entry>Label to use for the parent view - if not defined the label
                                    will be derived from the parent view's BreadcrumbItem first then
                                    the View's header</entry>
                            </row>
                            <row>
                                <entry>parentPageLabel</entry>
                                <entry>Label to use for the parent page - if not defined the label
                                    will be derived from the parent page's BreadcrumbItem first then
                                    the page's header</entry>
                            </row>
                            <row>
                                <entry>parentViewUrl</entry>
                                <entry>UrlInfo object which represents the location of the
                                    ParentLocation.  If viewId is defined on this object, the View
                                    will be used during ParentLocation traversal (ie viewId is
                                    REQUIRED for View traversal).</entry>
                            </row>
                            <row>
                                <entry>parentPageUrl</entry>
                                <entry>UrlInfo object which represents the location of the
                                    ParentLocation.  The viewId must be the same as the viewId
                                    defined in parentViewUrl and parentViewUrl must be defined to
                                    use a parent page location.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></para>
            <para>To use ParentLocation functionality, at a minimum some information in the
                parentViewUrl is required such as the viewId and controllerMapping (or a concrete
                href). <emphasis role="bold"> Important:  If the properties of BreadcrumbItems
                    derived from parent Views contain SpringEL, the current form must contain the
                    properties they reference.</emphasis>
            </para>
            <para>In this example, a parent location is defined which points to the
                "UifBreadcrumbTest2" View and "/uicomponents" controller.  Instead of deriving the
                title of this View from the ParentLocation's View, we are overriding it to display
                "Parent
                View".<programlisting>    &lt;property name="parentLocation.parentViewLabel" value="Parent View"/>
    &lt;property name="parentLocation.parentViewUrl.viewId" value="UifBreadcrumbTest2"/>
    &lt;property name="parentLocation.parentViewUrl.controllerMapping" value="/uicomponents"/></programlisting></para>
        </section>
        <section>
            <title>Path-based Breadcrumbs</title>
            <para>The Breadcrumbs widget contains an option entitled "usePathBasedBreadcrumbs".
                When set to true, path-based breadcrumbs are used for the View.  However, for this
                to work the View must be part of or start a HistoryFlow.  To do this, the request
                must contain the request parameter "flow" with the flow key passed from a previous
                view or the value "start" to start a new HistoryFlow.  The flowKey can be retrieved
                from the current form in the "flowKey" property of the form (or hidden input with
                name "flowKey" on the client-side).</para>
            <para>
                <para>Taking the above into acount the following setup is required for Path-based
                    Breadcrumbs to function:<itemizedlist>
                        <listitem>
                            <para>The flow request parameter must be set on the request to either
                                the flow key of the previous View or the keyword "start"</para>
                        </listitem>
                        <listitem>
                            <para>The usePathBasedBreadcrumbs property must be set to true for this
                                View's Breadcrumbs widget</para>
                        </listitem>
                        <listitem>
                            <para>To continue collecting path-based breadcrumbs on a View linked
                                from the current View, that link must pass this View's flowKey
                                forward as a request parameter</para>
                        </listitem>
                    </itemizedlist></para>
            </para>
            <para>Example of setting up path-based breadcrumbs and a link which will continue the
                flow (continue collecting BreadcrumbItems for the trail) when clicked.  If the view
                we are navigating to is also using path-based breadcrumbs, then the collected items
                will be displayed.</para>
            <programlisting>&lt;property name="breadcrumbs.usePathBasedBreadcrumbs" value="true"/>
...
&lt;!-- query parameter "flow" on the href is what continues the history flow (continues the path-based breadcrumbs) -->
&lt;bean parent="Uif-Link" p:linkText="Click me to continue chaining path-based breadcrumbs"
    p:href="@{#ConfigProperties['krad.url']}/kradsampleapp?viewId=Demo-Breadcrumbs-View8&amp;amp;methodToCall=start&amp;amp;<emphasis role="bold">flow=@{flowKey}</emphasis>"/></programlisting>
            <para>Like ParentLocation breadcrumbs, path-based breadcrumbs derive the BreadcrumbItems
                from the previous Views in the HistoryFlow (but do so while the user is navigating).
                ParentLocation breadcrumbs and path-based breadcrumbs cannot be used together.  The
                main usage of path-based breadcrumbs in the Krad framework is for Lookup and Inquiry
                lightbox breadcrumb trails.</para>
        </section>
        <section>
            <title>Understanding Breadcrumb Rendering order</title>
            <para>
                <para>Breadcrumbs are rendered in the following order through its template (note:
                    any option that is not configured is not rendered):<itemizedlist>
                        <listitem>
                            <para>homewardPathBreadcrumbs</para>
                        </listitem>
                        <listitem>
                            <para>Either ParentLocation breadcrumbs or path-based breadcrumbs
                                (optional)</para>
                        </listitem>
                        <listitem>
                            <para>If breadcrumbOverrides is not set:<itemizedlist>
                                    <listitem>
                                        <para>preViewBreadcrumbs</para>
                                    </listitem>
                                    <listitem>
                                        <para>View's BreadcrumbItem</para>
                                    </listitem>
                                    <listitem>
                                        <para>prePageBreadcrumbs</para>
                                    </listitem>
                                    <listitem>
                                        <para>current PageGroup's BreadcrumbItem</para>
                                    </listitem>
                                </itemizedlist></para>
                        </listitem>
                    </itemizedlist>For example, in most views, you would like breadcrumbs to appear
                    as: "Home > View1 > Page".  The only setup that needs to be done is to either
                    setup homewardPathBreadcrumbs with a home BreadcrumbItem or use the View's
                    ParentLocation pointing to a home url (because the "View1" and "Page"
                    breadcrumbs are automated if not configured).  </para>
            </para>
            <para>Inorder to chose the appropriate mechanism to use in this scenario, it is up to
                your application needs, but if this View potentially links to another View, using
                ParentLocation would allow you to inherit the "Home" breadcrumb (if you make "View1"
                its parent) resulting in something like "Home > View1 > View2 > Page".  </para>
            <para>Alternatively, if your View bean parents from another base View bean defined in
                your project, every view in your project could inherit the homewardPathBreadcrumbs
                property from it. </para>
            <para>It is important to take into consideration how your application will setup its own
                breadcrumb structure to meet your project's application needs by taking these
                options and rendering order into account.</para>
        </section>
    </section>
    <section>
        <title>View Indexing </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Requesting a View Instance </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <figure>
            <title>URL Mapping</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="../images/KRAD_Guide/URLMapping.png" scalefit="1"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section role="NotInToc">
            <title>Recap</title>
                <itemizedlist>
                    <listitem>
                        <para>A view request URL contains the following parts:</para>
                        <itemizedlist>
                            <listitem>
                                <para>Application URL – Base URL to the application (domain, port,
                                and app context). For example 'dev1.rice.kuali.org'</para>
                            </listitem>
                            <listitem>
                                <para>Servlet Context – Mapping to the Spring servlet (configured in
                                the web.xml). For example 'kr-krad'</para>
                            </listitem>
                            <listitem>
                                <para>Controller Mapping – Part of the URL that maps to the
                                    controller within the servlet. In KRAD these are configured
                                    using the @RequestMapping(value = "/training") annotation on the
                                    controller class</para>
                            </listitem>
                            <listitem>
                                <para>Request Parameters – Key value pairs that are used to populate
                                the request parameters map (this is everything after the '?' in the
                                URL where each key/value pair is separated by '&amp;'). Some request
                                parameters to know are:</para>
                                <itemizedlist>
                                        <listitem>
                                            <para>viewId – The id for the view that should be
                                                rendered</para>
                                        </listitem>
                                        <listitem>
                                            <para>methodToCall – Name of the method on the
                                        controller that should be invoked. This is configured using
                                        the @RequestMapping(params = "methodToCall=methodName") on
                                        the controller method</para>
                                        </listitem>
                                        <listitem>
                                            <para>Other common request parameters are declared in
                                                the constants class UifParameters</para>
                                        </listitem>
                                    </itemizedlist>
                            </listitem>
                        </itemizedlist>
                </listitem>
                </itemizedlist>
        </section>
    </section>
    <section>
        <title>View Request Parameters </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section role="NotInToc">
            <title>Recap</title>
                <itemizedlist>
                    <listitem>
                        <para>A view request parameter is a property on the View component that can
                            be set from a request URL</para>
                    </listitem>
                    <listitem>
                        <para>View request parameters are declared using the annotation
                        @RequestParameter. By default, the framework will look for any request
                        parameter with the same name as the property for which the annotation is
                        configured on. To populate the property from a request parameter with a
                        different name, the annotation property parameterName can be set</para>
                    </listitem>
                    <listitem>
                        <para>Any value sent for a view request parameter will override the value
                        configured in the UIF dictionary</para>
                    </listitem>
                </itemizedlist>
        </section>
    </section>
    <section>
        <title>The View Service </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>The View Lifecycle and View Helper Services </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section role="NotInToc">
            <title>Recap</title>
            <itemizedlist>
                <listitem>
                    <para>The ViewHelperService carries out the majority of the view
                        processing</para>
                </listitem>
                <listitem>
                    <para>Custom implementations of the view helper service can be set using the
                        view properties viewHelperService and viewHelperServiceClass</para>
                </listitem>
                <listitem>
                    <para>After the view object is retrieved from the Spring container, processing
                        is done in three phases:</para>
                    <itemizedlist>
                            <listitem>
                            <para>Initialize – During this phase, defaults are set for component
                                properties, and things such as ID assignment occurs</para>
                        </listitem>
                            <listitem>
                            <para>Apply Model – During this phase, the model is looked at to perform
                                conditional logic (including expressions), and to build dynamic
                                components (for example collection lines)</para>
                        </listitem>
                            <listitem>
                            <para>Finalize – A final phase to set state before the rendering is then
                                performed. At this point, all components should have been created
                                and conditional logic applied</para>
                        </listitem>
                        </itemizedlist>
                </listitem>
                <listitem>
                    <para>Common logic (for all components) is performed within the view helper
                        service for the various phases</para>
                </listitem>
                <listitem>
                    <para>In addition, the view helper delegates to each component for every
                        phase</para>
                </listitem>
                <listitem>
                    <para>Therefore, customization of the processing can also be done by extending
                        the component class (and overriding the bean definition to use the custom
                        class)</para>
                </listitem>
                <listitem>
                    <para>The view helper also contains methods for callback from the UIf base
                        controller. For example, the add and delete operations are performed through
                        the view helper</para>
                </listitem>
            </itemizedlist>
            <figure>
                <title>RequestResponseFlow</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/KRAD_Guide/RequestResponseFlow.png" scalefit="1"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para/>
        </section>
    </section>
    <section>
        <title>ID Generation </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>Application Header and Footer </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section role="NotInToc">
            <title>Recap</title>
                <itemizedlist>
                    <listitem>
                        <para>A common application header and footer can be set using the view
                            properties applicationHeader and applicationFooter</para>
                    </listitem>
                </itemizedlist>
        </section>
    </section>
    <section>
        <title>Sticky Headers And Footers</title>
        <para>Specific headers and footers of the view can become "sticky" to always stay in the
            view when the user scrolls.  The page content will appear to scroll underneath these
            fixed portions.  If pieces of the header/footer are sticky and other pieces are not, it
            will appear that the non-sticky pieces are either collapsing out of view or expanding
            into View when the user scrolls the window.  This sticky functionality is useful to
            always keep information important to the application visible; such as navigation,
            document information, or buttons that perform actions on the current View (allowing the
            user to click buttons that would normally appear in a footer and require a user to
            scroll down to them when not sticky).</para>
        <para>Since this functionality is heavily css and style based, and is completely automated
            by the framework through javascript, it is not recommended that you change default
            styling related to width or positioning for the headers/footers you are attempting to
            make sticky in your application.  Keep in mind that sticky content must have a solid
            background color or pattern and remain a width of 100% to appear correctly to the
            user.</para>
        <section>
            <title>Sticky Header Options</title>
            <para>There are 4 main sections of the header content you can make sticky.  These are:
                application header, the View's topGroup, breadcrumbs, and the View's header.  These
                can be mixed and matched as needed for your application or View needs.  </para>
            <para>Important note:  The pattern (not sticky)-(sticky)-(not sticky)-(sticky) for
                header content is NOT ALLOWED; ie, two independent areas that "scroll collapse"
                offscreen are not allowed.</para>
            <para>The View has the following properties for controlling sticky header content: <itemizedlist>
                    <listitem>
                        <para>stickyApplicationHeader - make the application's header sticky </para>
                    </listitem>
                    <listitem>
                        <para>stickyTopGroup - make the View's custom topGroup (content appears
                            above breadcrumbs) content sticky</para>
                    </listitem>
                    <listitem>
                        <para>stickyBreadcrumbs - make the View's breadcrumbs sticky</para>
                    </listitem>
                    <listitem>
                        <para>stickyHeader - make the View's header component sticky</para>
                    </listitem>
                </itemizedlist></para>
            <para>To make the application header sticky, the following code on the View is
                used:<programlisting>&lt;property name="stickyApplicationHeader" value="true"/></programlisting></para>
            <para>For sticky View's
                topGroup:<programlisting>&lt;property name="stickyTopGroup" value="true"/></programlisting></para>
            <para>For sticky breadcrumbs and View's
                header:<programlisting>&lt;property name="stickyBreadcrumbs" value="true"/>
&lt;property name="stickyHeader" value="true"/></programlisting></para>
            <para>The flags demonstrated can be used in any combination except the following
                combination.  <emphasis role="bold">This code WILL NOT work appropriately and will
                    break user
                interaction</emphasis>:<programlisting>&lt;!-- NEVER do this -->
&lt;property name="stickyApplicationHeader" value="false"/>
&lt;property name="stickyTopGroup" value="true"/>
&lt;property name="stickyBreadcrumbs" value="false"/>
&lt;property name="stickyHeader" value="true"/></programlisting></para>
        </section>
        <section>
            <title>Sticky Footer Options</title>
            <para>There are 3 main sections of the View's footer you can make sticky.  These are:
                application footer, the View's footer, the current PageGroup's footer.  A common use
                case is to make the page or View's footer sticky to have buttons always available to
                the user without forcing the user to scroll to get to them.</para>
            <para>The View has the following properties for controlling sticky footer content: <itemizedlist>
                    <listitem>
                        <para>stickyFooter</para>
                    </listitem>
                    <listitem>
                        <para>stickyApplicationFooter</para>
                    </listitem>
                </itemizedlist></para>
            <para>The PageGroup (page) also has the stickyFooter property, to make its footer
                sticky.</para>
            <para>The following code makes all footers sticky.  Note the usage of stickyFooter on
                each PageGroup item of the
                View:<programlisting>  &lt;bean id="Demo-StickyHeaderFooter-View9" parent="Demo-StickyHeaderFooter-BaseView">
    &lt;property name="items">
      &lt;list>
        &lt;bean parent="Demo-StickyHeaderFooter-Page1" p:stickyFooter="true"/>
        &lt;bean parent="Demo-StickyHeaderFooter-Page2" p:stickyFooter="true"/>
      &lt;/list>
    &lt;/property>
    &lt;property name="stickyFooter" value="true"/>
    &lt;property name="stickyApplicationFooter" value="true"/>
  &lt;/bean></programlisting></para>
            <para>Like sticky header options, these options can be mixed and matched as needed per a
                View.</para>
        </section>
    </section>
    <section>
        <title>Building Application Menus </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
    </section>
    <section>
        <title>KIM Authorization </title>
        <para>Coming Soon!</para>
        <!-- TODO: Add content here.
            -->
        <section role="NotInToc">
            <title>Recap</title>
            <itemizedlist>
                <listitem>
                    <para>KRAD allows securing any piece of the view</para>
                </listitem>
                <listitem>
                    <para>By default, authorization is controlled through KIM permissions (with
                        assigned roles)</para>
                </listitem>
                <listitem>
                    <para>To enable authorization, first a KIM permission must be created with the
                        correct template type and permissions, then the corresponding component must
                        be marked using the ComponentSecurity object (property is named <emphasis
                            role="keyword">componentSecurity</emphasis>)</para>
                </listitem>
                <listitem>
                    <para>The following permissions can be added:</para>
                    <itemizedlist>
                            <listitem>
                            <para>Open View – Template Name 'Open View': Details viewId: Enabled by
                                setting componentSecurity.viewAuthz to true on the view
                                component</para>
                        </listitem>
                        <listitem>
                            <para>Edit View – Template Name 'Edit View': Details viewId: Enabled by
                                setting componentSecurity.editAuthz to true on the view
                                component</para>
                        </listitem>
                        <listitem>
                            <para>View Field – Template Name 'View Field': Details viewId and
                                fieldId or viewId and propertyName (for data fields): Enabled by
                                setting componentSecurity.viewAuthz to true on the field
                                component</para>
                        </listitem>
                        <listitem>
                            <para>Edit Field – Template Name 'Edit Field': Details viewId and
                                fieldId or viewId and propertyName (for data fields): Enabled by
                                setting componentSecurity.editAuthz to true on the field
                                component</para>
                        </listitem>
                        <listitem>
                            <para>View Group (applies to any group including page, section, and
                                subsection levels) – Template Name 'View Group': Details viewId and
                                groupId or viewId and propertyName (for collection groups): Enabled
                                by setting componentSecurity.viewAuthz to true on the group
                                component</para>
                        </listitem>
                        <listitem>
                            <para>Edit Group (applies to any group including page, section, and
                                subsection levels) – Template Name 'Edit Group': Details viewId and
                                groupId or viewId and propertyName (for collection groups): Enabled
                                by setting componentSecurity.editAuthz to true on the group
                                component</para>
                        </listitem>
                        <listitem>
                            <para>View Widget – Template Name 'View Widget': Details viewId and
                                widgetId: Enabled by setting componentSecurity.viewAuthz to true on
                                the widget component</para>
                        </listitem>
                        <listitem>
                            <para>Edit Widget – Template Name 'Edit Widget': Details viewId and
                                widgetId: Enabled by setting componentSecurity.editAuthz to true on
                                the widget component</para>
                        </listitem>
                        <listitem>
                            <para>Perform Action – Template Name 'Perform Action': Details viewId
                                and actionId or viewId and actionEvent: Enabled by setting
                                componentSecurity. performActionAuthz to true on the action
                                component</para>
                        </listitem>
                        <listitem>
                            <para>View Line – Template Name 'View Line': Details viewId and groupId
                                or viewId and collectionPropertyName: Enabled by setting
                                componentSecurity.viewLineAuthz to true on the collection group
                                component</para>
                        </listitem>
                        <listitem>
                            <para>Edit Line – Template Name 'Edit Line': Details viewId and groupId
                                or viewId and collectionPropertyName: Enabled by setting
                                componentSecurity.editLineAuthz to true on the collection group
                                component</para>
                        </listitem>
                        <listitem>
                            <para>View Line Field – Template Name 'View Line Field': Details viewId,
                                groupId or collectionPropertyName, and fieldId or propertyName:
                                Enabled by setting componentSecurity.viewInLineAuthz to true on the
                                field component</para>
                        </listitem>
                        <listitem>
                            <para>Perform Line Action – Template Name 'Perform Line Action': Details
                                viewId, groupId or collectionPropertyName, and actionId or
                                actionEvent: Enabled by setting
                                componentSecurity.performLineActionAuthz to true on the action
                                component</para>
                        </listitem>
                        <listitem>
                            <para>Full Unmask Attribute – Template Name 'Full Unmask Field': Details
                                namespaceCode, componentCode, and propertyName. Enabled by setting
                                componentSecurity.attributeSecurity.mask to true on the data
                                field</para>
                        </listitem>
                        <listitem>
                            <para>Partial Unmask Attribute – Template Name 'Partial Unmask Field':
                                Details namespaceCode, componentCode, and propertyName. Enabled by
                                setting componentSecurity.attributeSecurity.partialMask to true on
                                the data field</para>
                        </listitem>
                        <listitem>
                            <para>View Attribute – Template Name 'View Attribute': Details
                                namespaceCode, componentCode, and propertyName. Enabled by setting
                                componentSecurity.attributeSecurity.hide to true on the data
                                field</para>
                        </listitem>
                        <listitem>
                            <para>Edit Attribute – Template Name 'Edit Attribute': Details
                                namespaceCode, componentCode, and propertyName. Enabled by setting
                                componentSecurity.attributeSecurity.readOnly to true on the data
                                field</para>
                        </listitem>
                        </itemizedlist>
                </listitem>
                <listitem>
                    <para>In addition to the general View permissions, all permissions that
                        previousely existed in the KNS (document, inquiry, maintenance permissions
                        and so on) are supported in KRAD</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
</chapter>
