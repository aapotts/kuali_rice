<?xml version="1.0" encoding="UTF-8"?>
<!--
    
    Copyright 2005-2013 The Kuali Foundation
    
    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
    http://www.opensource.org/licenses/ecl2.php
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
-->
<chapter xml:id="KSB_MessagingParadigms" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>KSB Messaging Paradigms</title>
    
    <para>KSB supports two types of messaging paradigms; Queues and Topics,
        and the differences are explained below. These are very similar to JMS
        messaging concepts. An open source solution was not used for KSB messaging
        because an open source JMS provider wasn't found that provided JTA
        synchronization, discovery, failover, and load balancing. Many claim such
        features, but when put to the test in real world scenarios (i.e., machines
        going down and coming back up, databases failing, network connectivity
        issues); none managed to reliably deliver messages.</para>
    
    <para>The advantage here is that we can apply these messaging concepts to
        any support protocol with which we can communicate.</para>
    
    <section>
        <title>Queues</title>
        
        <para>When any number of services is bound to a queue and a method is
            invoked, one and only one service gets the invocation.</para>
    </section>
    
    <section>
        <title>Topics</title>
        
        <para>When any number of services is bound to a topic and a method is
            invoked, all services are invoked AT LEAST once or multiple
            times.</para>
    </section>
    
    <section>
        <title>Message Fetcher</title>
        
        <para><emphasis
            role="italic">org.kuali.rice.ksb.messaging.MessageFetcher</emphasis> is
            a Runnable that needs to be configured by the client application to
            retrieve stored messages from the database that weren't processed when
            the node went down. This can happen for many reasons. The machine can be
            under load and just crash.</para>
        
        <para>When message persistence is enabled, a service that fails or
            throws an Exception stores preprocessed messages in the database until
            they can be resent. This makes certain that a crash or emergency restart
            of your machine will not result in message loss.</para>
        
        <para>The KSB does not automatically fetch all these messages and
            attempt to invoke them when it starts, because often the KSB is started
            when the services the messages are bound for are not yet started. For
            now, you need to decide when to call the run method on the
            MessageFetcher. Because it's a Runnable, you could also put the
            MessageFetcher in the KSBThreadPool that is available on the
            KSBServiceLocator. You could wrap it in a TimerTask, etc. All that is
            required is this:</para>
        
        <programlisting>new MessageFetcher((Integer) null).run()</programlisting>
        
        <para>Unfortunately, the cast to Integer is required. The MessageFetcher
            also has a constructor that takes a long variable as a parameter. This
            can be used to pull any message in the message store and put it in
            memory for invocation. <emphasis role="italic">Integer</emphasis> is a
            fetch size; <emphasis role="italic">null</emphasis> means all.</para>
    </section>
</chapter>
