/*
 * Copyright 2005-2007 The Kuali Foundation.
 * 
 * Licensed under the Educational Community License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.core.service;

import java.util.Map;
import java.util.Properties;

import org.kuali.core.bo.BusinessRule;
import org.kuali.core.bo.FinancialSystemParameter;
import org.kuali.core.rule.KualiParameterRule;

/**
 * This interface defines methods that a KualiConfiguration Service must provide. Provides methods for getting string resources.
 */
public interface KualiConfigurationService {
    /**
     * Given a property name (key), returns the value associated with that key, or null if none is available.
     * 
     * @param key
     * @return String associated with the given key
     * @throws IllegalArgumentException if the key is null
     */
    public String getPropertyString(String key);

    /**
     * Given a property name (key), returns the "booleanized" value associated with that key.  
     * 
     * true, yes, on, or 1 are translated into <b>true</b> - all other values result in <b>false</b> 
     * 
     * @param key
     * @return String associated with the given key
     * @throws IllegalArgumentException if the key is null
     */
    public boolean getPropertyAsBoolean(String key);
    
    /**
     * @return Properties instance containing all (key,value) pairs known to the service
     */
    public Properties getAllProperties();

    /**
     * This method will return a list of parameter values, each as its own String in an array. This is used to access the
     * Application Parameter component which allows for externalizing constants as a list of values. The list is generated by
     * splitting the value in the database on the semicolon character. It does not return null.
     * 
     * @param scriptName A unique identifier for grouping parameters together and associated authorization for change of the
     *        parameters with a workgroup.
     * @param parameter The name of the parameter unique to the script name
     * @return an array of zero or more Strings, possibily empty or blank, but not null.
     * @throws org.kuali.core.exceptions.ApplicationParameterException If the parameter is not in the database exactly once or has a
     *         multiple value indicator set to false.
     */
    public String[] getApplicationParameterValues(String scriptName, String parameter);

    /**
     * Guess a <code>{@link BusinessRule}</code> which contains information used to create a
     * <code>{@link KualiParameterRule}</code>
     * 
     * @param scriptName
     * @param parameter
     * @return BusinessRule
     */
    public BusinessRule getApplicationRule(String scriptName, String parameter);

    /**
     * This method will return a parameter value. This is used to access the Application Parameter component which allows for
     * externalizing constants. It does not return null.
     * 
     * @param scriptName A unique identifier for grouping parameters together and associated authorization for change of the
     *        parameters with a workgroup.
     * @param parameter The name of the parameter unique to the script name
     * @return the value of the parameter
     * @throws org.kuali.core.exceptions.ApplicationParameterException If the parameter is not in the database exactly once, has a
     *         null, empty, or blank value, or has a multiple value indicator set to true.
     */
    public String getApplicationParameterValue(String scriptName, String parameter);

    /**
     * Get an application parameter that is a single value set to Y/N.
     * 
     * @param scriptName A unique identifier for grouping parameters together and associated authorization for change of the
     *        parameters with a workgroup.
     * @param parameter The name of the parameter unique to the script name
     * @return true for Y, false for N.
     * @throws org.kuali.core.exceptions.ApplicationParameterException if there is any problem with the specified parameter
     */
    public boolean getApplicationParameterIndicator(String scriptName, String parameter);

    /**
     * Checks whether a parameter is in the database. This is useful for parameters that are optional or identified dynamically. It
     * does not guarantee the success of the other methods in this service; they can fail for other reasons.
     * 
     * @param scriptName
     * @param parameter
     * @return whether the specified parameter is in the database.
     */
    boolean hasApplicationParameter(String scriptName, String parameter);

    /**
     * Checks whether a rule is in the database. This is useful for rules that are optional or identified dynamically. It does not
     * guarantee the success of the other methods in this service; they can fail for other reasons.
     * 
     * @param scriptName
     * @param parameter
     * @return whether the specified parameter is in the database.
     */
    public boolean hasApplicationParameterRule(String scriptName, String parameter);

    /**
     * This method will return the values of a parameter record as a KualiParameterRule Object. It does not return null.
     * 
     * @param scriptName A unique identifier for grouping parameters together and associated authorization for change of the
     *        parameters with a workgroup.
     * @param parameter The name of the parameter unique to the script name
     * @return KualiParameterRule Object
     * @throws org.kuali.core.exceptions.ApplicationParameterException If the parameter is not in the database exactly once.
     */
    public KualiParameterRule getApplicationParameterRule(String scriptName, String parameter);

    /**
     * Get all rules via group
     * 
     * @param groupName
     * @return map where the key is the parameter name and the value is the parameter rule object
     */
    public Map<String, KualiParameterRule> getRulesByGroup(String groupName);

    /**
     * Get all parameters via group
     * 
     * @param groupName
     * @return map where the key is the parameter name and the value is the parameter object
     */
    public Map<String, FinancialSystemParameter> getParametersByGroup(String groupName);
    
    /**
     * Returns whether this instance is production based on the configuation options.
     */
    public boolean isProductionEnvironment();
}
