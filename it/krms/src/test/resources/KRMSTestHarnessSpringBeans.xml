<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2006-2011 The Kuali Foundation
  ~
  ~ Licensed under the Educational Community License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.opensource.org/licenses/ecl2.php
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
                           http://www.springframework.org/schema/jee
                           http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
                           http://www.springframework.org/schema/jms
                           http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
                           http://www.springframework.org/schema/lang
                           http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
                           http://www.springframework.org/schema/oxm
                           http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
                           http://www.springframework.org/schema/task
                           http://www.springframework.org/schema/task/spring-task-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-3.0.xsd">
    <bean id="config" class="org.kuali.rice.core.impl.config.property.ConfigFactoryBean">
        <property name="configLocations">
            <list>
                <value>classpath:META-INF/krms-test-config.xml</value>
            </list>
        </property>
    </bean>
    
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.kuali.rice.core.impl.config.property.ConfigInitializer.initialize" />
        <property name="arguments">
            <list><ref bean="config"/></list>
        </property>
    </bean>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" value="#{config.getProperties()}" />
    </bean>

    <bean id="transactionManagerXAPool" class="org.springframework.transaction.jta.JotmFactoryBean">
      <property name="defaultTimeout" value="${transaction.timeout}"/>
    </bean>
    
    <!-- Bitronix transaction manager -->
    <bean id="btmConfig" factory-method="getConfiguration" class="bitronix.tm.TransactionManagerServices">
        <!-- <property name="serverId" value="spring-btm" /> -->
        <property name="disableJmx" value="true" />
    </bean>

    <bean id="transactionManagerBitronix" factory-method="getTransactionManager"
          class="bitronix.tm.TransactionManagerServices" depends-on="btmConfig" destroy-method="shutdown" />

    <alias alias="jtaUserTransaction"  name="transactionManager${connection.pool.impl}"/>

    <bean id="riceDataSourceXAPool" class="org.kuali.rice.core.framework.persistence.jdbc.datasource.XAPoolDataSource">
        <property name="transactionManager" ref="transactionManagerXAPool" />
        <property name="driverClassName" value="${datasource.driver.name}" />
        <property name="url" value="${datasource.url}" />
        <property name="maxSize" value="${datasource.pool.maxSize}" />
        <property name="minSize" value="${datasource.pool.minSize}" />
        <property name="maxWait" value="${datasource.pool.maxWait}" />
        <property name="validationQuery" value="${datasource.pool.validationQuery}" />
        <property name="username" value="${datasource.username}" />
        <property name="password" value="${datasource.password}" />
    </bean>

    <!--     In order for Bitronix to work with Oracle the following grants need to be run as user SYS 
  
         grant select on pending_trans$ to <user>;   
         grant select on dba_2pc_pending to <user>;  
         grant select on dba_pending_transactions to <user>;  
         grant execute on dbms_system to <user>;  
    -->
    
    <!--   Commenting out Bitronix code until above grants can be run in the 
               master datababe or another solution can be found 
               
    <bean id="ds-random-string" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.commons.lang.RandomStringUtils.randomAlphanumeric"/>
        <property name="arguments"><list><value>20</value></list></property>
    </bean>
    
    <bean id="riceDataSourceBitronix" class="bitronix.tm.resource.jdbc.PoolingDataSource" init-method="init" destroy-method="close">
        <property name="className" value="${datasource.pool.class}" />
        <property name="uniqueName" ref="ds-random-string" />
        <property name="minPoolSize" value="${datasource.pool.minSize}" />
        <property name="maxPoolSize" value="${datasource.pool.maxSize}" />
        <property name="useTmJoin" value="true" />
        <property name="testQuery" value="${datasource.pool.validationQuery}" />
        <property name="allowLocalTransactions" value="true" />
        <property name="driverProperties">
            <props>
                <prop key="URL">${datasource.url}</prop>
                <prop key="user">${datasource.username}</prop>
                <prop key="password">${datasource.password}</prop>
            </props>
        </property>
    </bean>
    -->
 

    </bean>

    <alias name="riceDataSource${connection.pool.impl}" alias="riceDataSource"/> 

    <alias alias="krmsDataSource"  name="riceDataSource${connection.pool.impl}"/>

    <bean id="riceNonTransactionalDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${datasource.driver.name}"/>
        <property name="url" value="${datasource.url}"/>
        <property name="maxActive" value="${datasource.pool.maxActive}"/>
        <property name="minIdle" value="${datasource.minIdle}" />
        <property name="initialSize" value="${datasource.initialSize}"/>
        <property name="validationQuery" value="${datasource.pool.validationQuery}"/>
        <property name="username" value="${datasource.username}" />
        <property name="password" value="${datasource.password}" />
        <property name="accessToUnderlyingConnectionAllowed" value="${datasource.accessToUnderlyingConnectionAllowed}"/>
    </bean>
    
    <bean id="ojbConfigurer" class="org.kuali.rice.core.framework.persistence.ojb.JtaOjbConfigurer">
        <property name="transactionManager" ref="jtaTransactionManager${connection.pool.impl}"/>
    </bean>
    
    <bean id="krmsOjbConfigurer" class="org.kuali.rice.core.framework.persistence.ojb.BaseOjbConfigurer">
        <property name="jcdAliases">
            <list>
                <value>krmsDataSource</value>
            </list>
        </property>
        <property name="metadataLocation" value="classpath:org/kuali/rice/krms/config/OJB-repository-krms.xml" />
    </bean>
    
    <!-- attempt to get our beans to be visible by the GRL -->
    <bean class="org.kuali.rice.core.framework.resourceloader.RiceSpringResourceLoaderConfigurer">
      <property name="localServiceName" value="KRMSContext" />
    </bean>
    
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator" p:proxyTargetClass="true" >
        <property name="interceptorNames">
            <list>
                <idref bean="matchAllTxInterceptor" />
            </list>
        </property>
        <property name="beanNames">
            <list>
                <idref local="genericTestDao" />
            </list>
        </property>
    </bean>
    

    <bean id="springJtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" lazy-init="true">
        <property name="userTransaction">
            <ref local="jtaTransactionManager" />
        </property>
        <property name="transactionManager">
            <ref local="jtaTransactionManager" />
        </property>
    </bean>
    
    <bean id="matchAllWithPropReq" class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource" lazy-init="true">
        <property name="transactionAttribute">
            <value>PROPAGATION_REQUIRED</value>
        </property>
    </bean>

    <bean id="matchAllTxInterceptor" class="org.kuali.rice.core.framework.persistence.jta.KualiTransactionInterceptor" lazy-init="true">
        <property name="transactionManager">
            <ref bean="springJtaTransactionManager" />
        </property>
        <property name="transactionAttributeSource">
            <ref bean="matchAllWithPropReq" />
        </property>
    </bean>
    
    
    
    
    
    
    <!-- Wire up services for our tests -->
    
    <bean id="genericTestDao" class="org.rice.krms.test.GenericTestDao" p:jcdAlias="krmsDataSource"/>
    
    <bean id="testBoService" class="org.rice.krms.test.TestBoService">
        <constructor-arg><ref local="genericTestDao" /></constructor-arg>
    </bean>

    <bean id="krmsAttributeDefinitionService" class="org.kuali.rice.krms.impl.repository.KrmsAttributeDefinitionServiceImpl">
        <property name="businessObjectService">
            <ref local="testBoService"/>
        </property>
    </bean>
    
    <bean id="testResolverTypeService1" class="org.rice.krms.test.TestTermResolverTypeService" />
    
    <bean id="testActionTypeService" class="org.rice.krms.test.TestActionTypeService">
        <constructor-arg><value>testAction</value></constructor-arg>
    </bean>
    
    
    <!-- Import core beans -->
    <import resource="classpath:org/kuali/rice/core/config/COREConfigSpringBeans.xml"/>
    
</beans>
