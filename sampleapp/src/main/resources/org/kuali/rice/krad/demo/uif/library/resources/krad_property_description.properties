#
# Copyright 2006-2012 The Kuali Foundation
#
# Licensed under the Educational Community License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.opensource.org/licenses/ecl2.php
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#Thu Dec 13 14:07:35 CAT 2012
org.kuali.rice.krad.uif.component.BindingInfo=Provides binding configuration for an DataBinding component (attribute or\n collection)\n\n <p>\n From the binding configuration the binding path is determined (if not\n manually set) and used to set the path in the UI or to get the value from the\n model\n </p>
org.kuali.rice.krad.uif.component.BindingInfo|bindByNamePrefix|String=Prefix that will be used to form the binding path from the component\n name. Typically used for nested collection properties
org.kuali.rice.krad.uif.component.BindingInfo|bindingName|String=Gives the name of the property that the component binds to. The name can\n be nested but not the full path, just from the parent object or in the\n case of binding directly to the form from the form object\n\n <p>\n If blank this will be set from the name field of the component\n </p>
org.kuali.rice.krad.uif.component.BindingInfo|bindingObjectPath|String=For attribute fields that do not belong to the default form object (given\n by the view), this field specifies the path to the object (on the form)\n the attribute does belong to.\n\n <p>\n e.g. Say we have an attribute field with property name 'number', that\n belongs to the object given by the 'account' property on the form. The\n form object path would therefore be set to 'account'. If the property\n belonged to the object given by the 'document.header' property of the\n form, the binding object path would be set to 'document.header'. Note if\n the binding object path is not set for an attribute field (or any\n <code>DataBinding</code> component), the binding object path configured\n on the <code>View</code> will be used (unless bindToForm is set to true,\n where is assumed the property is directly available from the form).\n </p>
org.kuali.rice.krad.uif.component.BindingInfo|bindingPath|String=Path to the property on the model the component binds to. Uses standard\n dot notation for nested properties. If the binding path was manually set\n it will be returned as it is, otherwise the path will be formed by using\n the binding object path and the bind prefix\n\n <p>\n e.g. Property name 'foo' on a model would have binding path "foo", while\n property name 'name' of the nested model property 'account' would have\n binding path "account.name"\n </p>
org.kuali.rice.krad.uif.component.ComponentBase=Base implementation of <code>Component</code> which other component\n implementations should extend\n\n <p>\n Provides base component properties such as id and template. Also provides\n default implementation for the <code>ScriptEventSupport</code> and\n <code>Ordered</code> interfaces. By default no script events except the\n onDocumentReady are supported.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|additionalComponentsToRefresh|List=Returns a list of componentIds which will be also be refreshed when this component is refreshed\n\n <p>\n This will be a comma separated list of componentIds that need to be refreshed when a refresh\n condition has been set on this component.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|align|String=Horizontal alignment of the component within its container\n\n <p>\n All components belong to a <code>Container</code> and are placed using a\n <code>LayoutManager</code>. This property specifies how the component\n should be aligned horizontally within the container. During the finalize\n phase the CSS text-align style will be created for the align setting.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|colSpan|int=Number of places the component should take up horizontally in the\n container\n\n <p>\n All components belong to a {@code Container} and are placed using a\n {@code LayoutManager}. This property specifies how many places\n horizontally the component should take up within the container. This is\n only applicable for table based layout managers. Default is 1\n </p>\n\n TODO\: this should not be on component interface since it only applies if\n the layout manager supports it, need some sort of layoutOptions map for\n field level options that depend on the manager
org.kuali.rice.krad.uif.component.ComponentBase|componentModifiers|List={@code ComponentModifier} instances that should be invoked to\n initialize the component\n\n <p>\n These provide dynamic initialization behavior for the component and are\n configured through the components definition. Each initializer will get\n invoked by the initialize method.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|componentSecurity|ComponentSecurity=Security object that indicates what authorization (permissions) exist for the component
org.kuali.rice.krad.uif.component.ComponentBase|conditionalRefresh|String=When set if the condition is satisfied, the component will be refreshed.\n\n <p>The component MUST BE a container or field type. conditionalRefresh is\n defined in a limited Spring EL syntax. Only valid form property names,\n and, or, logical comparison operators (non-arithmetic), and the matches\n clause are allowed. String and regex values must use single quotes ('),\n booleans must be either true or false, numbers must be a valid double\n either negative or positive.\n\n <p>DO NOT use progressiveRender and conditionalRefresh on the same component\n unless it is known that the component will always be visible in all cases\n when a conditionalRefresh happens (ie conditionalRefresh has\n progressiveRender's condition anded with its own condition). <b>If a\n component should be refreshed every time it is shown, use the\n progressiveRenderAndRefresh option with this property instead.</b></p>
org.kuali.rice.krad.uif.component.ComponentBase|context|Map=Context map for the component\n\n <p>\n Any el statements configured for the components properties (e.g.\n title\="@{foo.property}") are evaluated using the el context map. This map\n will get populated with default objects like the model, view, and request\n from the {@code ViewHelperService}. Other components can push\n further objects into the context so that they are available for use with\n that component. For example, {@code Field} instances that are part\n of a collection line as receive the current line instance\n </p>\n\n <p>\n Context map also provides objects to methods that are invoked for\n {@code GeneratedField} instances\n </p>\n\n <p>\n The Map key gives the name of the variable that can be used within\n expressions, and the Map value gives the object instance for which\n expressions containing the variable should evaluate against\n </p>\n\n <p>\n NOTE\: Calling getContext().putAll() will skip updating any configured property replacers for the\n component. Instead you should call \#pushAllToContext\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|cssClasses|List=CSS style class(s) to be applied to the component\n\n <p>\n Declares style classes for the component. Multiple classes are specified\n with a space delimiter. This is used by the renderer to set the class\n attribute on the corresponding element. The class(s) declared must be\n available in the common style sheets or the style sheets specified for\n the view\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|dataAttributes|Map=Get the dataAttributes setup for this component - to be written to the html/jQuery data\n\n <p>The attributes that are complex objects (contain {}) they will be written through script.\n The attritubes that are simple (contain no objects) will be written directly to the html of the\n component using standard data-.\n Either way they can be access through .data() call in jQuery</p>
org.kuali.rice.krad.uif.component.ComponentBase|finalizeMethodAdditionalArguments|List=The List of Object instances that should be passed as arguments to the finalize method\n\n <p>\n These arguments are passed to the finalize method after the standard model and component\n arguments. They are passed in the order declared in the list\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|finalizeMethodInvoker|MethodInvokerConfig={@code MethodInvokerConfig} instance for the method that should be invoked\n for finalizing the component configuration\n\n <p>\n MethodInvoker can be configured to specify the class or object the method\n should be called on. For static method invocations, the targetClass\n property can be configured. For object invocations, that targetObject\n property can be configured\n </p>\n\n <p>\n If the component is selfRendered, the finalize method can return a string which\n will be set as the component's renderOutput. The selfRendered indicator will also\n be set to true on the component.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|finalizeMethodToCall|String=The name of the method that should be invoked for finalizing the component\n configuration (full method name, without parameters or return type)\n\n <p>\n Note the method can also be set with the finalizeMethodInvoker\n targetMethod property. If the method is on the configured\n {@code ViewHelperService}, only this property needs to be configured\n </p>\n\n <p>\n The model backing the view will be passed as the first argument method and then\n the {@code Component} instance as the second argument. If any additional method\n arguments are declared with the finalizeMethodAdditionalArguments, they will then\n be passed in the order declared in the list\n </p>\n\n <p>\n If the component is selfRendered, the finalize method can return a string which\n will be set as the component's renderOutput. The selfRendered indicator will also\n be set to true on the component.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|id|String=The unique id (within a given tree) for the component\n\n <p>\n The id will be used by renderers to set the HTML element id. This gives a way to find various elements\n for scripting. If the id is not given, a default will be generated by the framework\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|methodToCallOnRefresh|String=Name of a method on the controller that should be invoked as part of the component refresh and disclosure\n process\n\n <p>\n During the component refresh or disclosure process it might be necessary to perform other operations, such as\n preparing data or executing a business process. This allows the configuration of a method on the underlying\n controller that should be called for the component refresh action. In this method, the necessary logic can be\n performed and then the base component update method invoked to carry out the component refresh.\n </p>\n\n <p>\n Controller method to invoke must accept the form, binding result, request, and response arguments\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|onBlurScript|String=Script that should be executed when the component's onBlur event is fired
org.kuali.rice.krad.uif.component.ComponentBase|onChangeScript|String=Script that should be executed when the component's onChange event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onClickScript|String=Script that should be executed when the component's onClick event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onCloseScript|String=Script that should be executed when the component's onClose event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onDblClickScript|String=Script that should be executed when the component's onDblClick event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onDocumentReadyScript|String=Script to be run when the document ready event is triggered
org.kuali.rice.krad.uif.component.ComponentBase|onFocusScript|String=Script that should be executed when the component's onFocus event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onKeyDownScript|String=Script that should be executed when the component's onKeyDown event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onKeyPressScript|String=Script that should be executed when the component's onKeyPress event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onKeyUpScript|String=Script that should be executed when the component's onKeyUp event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onLoadScript|String=Script that should be executed when the component's onLoad event is fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseDownScript|String=Script that should be executed when the component's onMouseDown event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseMoveScript|String=Script that should be executed when the component's onMouseMove event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseOutScript|String=Script that should be executed when the component's onMouseOut event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseOverScript|String=Script that should be executed when the component's onMouseOver event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onMouseUpScript|String=Script that should be executed when the component's onMouseUp event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onSubmitScript|String=Script that should be executed when the component's onSubmit event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|onUnloadScript|String=Script that should be executed when the component's onUnload event is\n fired
org.kuali.rice.krad.uif.component.ComponentBase|order|int=Order of a component within a List of other components\n\n <p>Lower numbers are placed higher up in the list, while higher numbers are placed\n lower in the list</p>
org.kuali.rice.krad.uif.component.ComponentBase|progressiveRender|String=When set if the condition is satisfied, the component will be displayed. The component MUST BE a\n container or field type. progressiveRender is defined in a limited Spring EL syntax. Only valid\n form property names, and, or, logical comparison operators (non-arithmetic), and the matches\n clause are allowed. String and regex values must use single quotes ('), booleans must be either true or false,\n numbers must be a valid double, either negative or positive.\n\n <p>\n DO NOT use progressiveRender and a conditional refresh statement on the same component\n unless it is known that the component will always be visible in all cases when a conditional refresh happens\n (ie conditional refresh has progressiveRender's condition anded with its own condition).\n </p>\n\n <p>\n <b>If a component should be refreshed every time it is shown, use the progressiveRenderAndRefresh option\n with this property instead.</b>\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|propertyReplacers|List=gets a list of {@code PropertyReplacer} instances\n\n <p>They will be evaluated\n during the view lifecycle to conditionally set properties on the\n {@code Component} based on expression evaluations</p>
org.kuali.rice.krad.uif.component.ComponentBase|refreshTimer|int=Time in seconds that the component will be automatically refreshed\n\n <p>\n This will invoke the refresh process just like the conditionalRefresh and refreshWhenChangedPropertyNames.\n When using this property methodToCallOnRefresh and id should also be specified\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|refreshWhenChangedPropertyNames|List=Specifies a property by name that when its value changes will automatically perform\n a refresh on this component\n\n <p>\n This can be a comma\n separated list of multiple properties that require this component to be\n refreshed when any of them change. <Br>DO NOT use with progressiveRender\n unless it is know that progressiveRender condition will always be\n satisfied before one of these fields can be changed.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|renderedHtmlOutput|String=Rendering output for the component that will be sent as part of the\n response (can contain static text and HTML)
org.kuali.rice.krad.uif.component.ComponentBase|required|Boolean=Indicates whether the component is required\n\n <p>\n At the general component level required means there is some action the\n user needs to take within the component. For example, within a section it\n might mean the fields within the section should be completed. At a field\n level, it means the field should be completed. This provides the ability\n for the renderers to indicate the required action.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|rowSpan|int=Number of places the component should take up vertically in the container\n\n <p>\n All components belong to a {@code Container} and are placed using a\n {@code LayoutManager}. This property specifies how many places\n vertically the component should take up within the container. This is\n only applicable for table based layout managers. Default is 1\n </p>\n\n TODO\: this should not be on component interface since it only applies if\n the layout manager supports it, need some sort of layoutOptions map for\n field level options that depend on the manager
org.kuali.rice.krad.uif.component.ComponentBase|style|String=CSS style string to be applied to the component\n\n <p>\n Any style override or additions can be specified with this attribute.\n This is used by the renderer to set the style attribute on the\n corresponding element.\n </p>\n\n <p>\n e.g. 'color\: \#000000;text-decoration\: underline;'\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|templateName|String=
org.kuali.rice.krad.uif.component.ComponentBase|templateOptionsJSString|String=Builds a string from the underlying <code>Map</code> of template options\n that will export that options as a JavaScript Map for use in js and\n jQuery plugins
org.kuali.rice.krad.uif.component.ComponentBase|templateOptions|Map=The options that are passed through to the Component renderer\n\n <p>\n The Map key is the option name, with the Map value as the option value. See\n documentation on the particular widget render for available options.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|template|String=The path to the JSP file that should be called to render the component\n\n <p>\n The path should be relative to the web root. An attribute will be available to the component to use under the\n name given by the method {@code getComponentTypeName}. Based on the component type, additional attributes could\n be available for use. See the component documentation for more information on such attributes.\n </p>\n\n <p>\n e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|title|String=The component title\n\n <p>\n Depending on the component can be used in various ways. For example with a Container component the title is\n used to set the header text. For components like controls other other components that render an HTML element it\n is used to set the HTML title attribute.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|toolTip|Tooltip=The Tooltip widget that renders a tooltip with additional information about the element on\n specified trigger event
org.kuali.rice.krad.uif.component.ComponentBase|valign|String=Vertical alignment of the component within its container\n\n <p>\n All components belong to a <code>Container</code> and are placed using a\n <code>LayoutManager</code>. This property specifies how the component\n should be aligned vertically within the container. During the finalize\n phase the CSS vertical-align style will be created for the valign\n setting.\n </p>
org.kuali.rice.krad.uif.component.ComponentBase|width|String=Width the component should take up in the container\n\n <p>\n All components belong to a <code>Container</code> and are placed using a\n <code>LayoutManager</code>. This property specifies a width the component\n should take up in the Container. This is not applicable for all layout\n managers. During the finalize phase the CSS width style will be created\n for the width setting.\n </p>\n\n <p>\n e.g. '30%', '55px'\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity=Component security is used to flag permissions that exist in KIM for various component state (like edit and view)\n\n <p>\n In addition, properties such as additional role and permission details can be configured to use when\n checking the KIM permissions\n </p>\n\n <p>\n Security subclasses exist adding on flags apporiate for that component\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|additionalPermissionDetails|Map=Map of key value pairs that should be added as permission details when doing KIM permission checks for this\n component\n\n <p>\n Any details given here that will override details with the same key that were derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|additionalRoleQualifiers|Map=Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this\n component\n\n <p>\n Any qualifiers given here that will override qualifiers with the same key that were derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|componentAttribute|String=Component code that should be sent as permission detail when doing a permission check on this field\n\n <p>\n When the component code is a detail for a permission check, this property can be configured to override the\n component code derived by the system\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|idAttribute|String=Id that should be sent as permission detail when doing a permission check on this field\n\n <p>\n By default they system will send the component id as a permission detail, this property can be configured to\n send a different id for the permission check\n </p>
org.kuali.rice.krad.uif.component.ComponentSecurity|namespaceAttribute|String=Namespace code that should be sent as permission detail when doing a permission check on this field\n\n <p>\n When the namespace code is a detail for a permission check, this property can be configured to override the\n namespace derived by the system\n </p>
org.kuali.rice.krad.uif.component.MethodInvokerConfig=Extends <code>MethodInvoker</code> to add properties for specifying\n a method for invocation within the UIF
org.kuali.rice.krad.uif.component.MethodInvokerConfig|argumentTypes|Class=Declared argument types for the method to be invoked, if not set the types will\n be retrieved based on the target class and target name
org.kuali.rice.krad.uif.component.MethodInvokerConfig|staticMethod|String=Set a fully qualified static method name to invoke,\n e.g. "example.MyExampleClass.myExampleMethod".\n Convenient alternative to specifying targetClass and targetMethod.
org.kuali.rice.krad.uif.container.ActiveCollectionFilter=Collection filter that removes inactive lines from a collection whose line types\n implement the <code>Inactivatable</code> interface
org.kuali.rice.krad.uif.container.CollectionGroupSecurity=Collection Group security is used to flag that permissions exist for the associated {@link CollectionGroup}\n in KIM and should be checked to determine the associated group, line, and field state. In particular this adds\n the edit line and view line flags\n\n <p>\n In addition, properties such as additional role and permission details can be configured to use when\n checking the KIM permissions\n </p>
org.kuali.rice.krad.uif.container.ELCollectionFilter=Collection filter that evaluates a configured el expression against each line
org.kuali.rice.krad.uif.container.ELCollectionFilter|expression|String=Expression that will be evaluated for each line to determine whether the line should be filtered\n\n <p>\n If expression passes, the line will remain in the collection, otherwise be filtered out. The expression given\n should evaluate to a boolean\n </p>
org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter=Collection filter for maintenance groups that removes inactive lines if certain\n conditions are met
org.kuali.rice.krad.uif.container.MaintenanceActiveCollectionFilter|oldBindingObjectPath|String=Gives the binding path to the old data object for comparison, used to\n get the active status of the old object
org.kuali.rice.krad.uif.container.NodePrototype=
org.kuali.rice.krad.uif.container.NodePrototype|dataGroupPrototype|Group=
org.kuali.rice.krad.uif.container.NodePrototype|labelPrototype|Message=
org.kuali.rice.krad.uif.control.CheckboxControl=Represents a HTML Checkbox control. Typically used for boolean attributes (where the\n value is either on/off, true/false)
org.kuali.rice.krad.uif.control.CheckboxControl|checkboxLabel|String=Returns the label text for this checkbox
org.kuali.rice.krad.uif.control.CheckboxControl|inlineComponents|List=Gets the inlineComponents used by index in the checkboxLabel that has rich message component index tags
org.kuali.rice.krad.uif.control.CheckboxControl|richLabelMessage|Message=Gets the Message that represents the rich message content of the label if labelText is using rich message tags.\n <b>DO NOT set this\n property directly unless you need full control over the message structure.</b>
org.kuali.rice.krad.uif.control.CheckboxControl|value|String=The value that will be submitted when the checkbox control is checked\n\n <p>\n Value can be left blank, in which case the checkbox will submit a boolean value that\n will populate a boolean property. In cases where the checkbox needs to submit another value (for\n instance possibly in the checkbox group) the value can be set which will override the default.\n </p>
org.kuali.rice.krad.uif.control.ControlBase=Base class for all <code>Control</code> implementations
org.kuali.rice.krad.uif.control.ControlBase|disabledReason|String=If the control is disabled, gives a reason for why which will be displayed as a tooltip\n on the control
org.kuali.rice.krad.uif.control.ControlBase|disabledWhenChangedPropertyNames|List=Gets the property names of fields that when changed, will disable this component
org.kuali.rice.krad.uif.control.ControlBase|enabledWhenChangedPropertyNames|List=Gets the property names of fields that when changed, will enable this component
org.kuali.rice.krad.uif.control.ControlBase|tabIndex|int=Unique index of the control within the tab order\n\n <p>\n Tab index provides a way to set the order users will tab through the\n controls. The control with index 1 will receive focus when the page is\n rendered. Tabing from the field will then take the user to the control\n with index 2, then index 3, and so on.\n </p>
org.kuali.rice.krad.uif.control.FileControl=Represents a HTML File control, generally rendered as an input control with\n type 'file'. Allows user to upload a file to the application
org.kuali.rice.krad.uif.control.GroupControl=Represents a group control, which is a special control to handle\n the input of a KIM Group by group name
org.kuali.rice.krad.uif.control.GroupControl|groupIdPropertyName|String=The name of the property on the parent object that holds the group id
org.kuali.rice.krad.uif.control.GroupControl|namespaceCodePropertyName|String=The name of the property on the parent object that holds the group namespace
org.kuali.rice.krad.uif.control.HiddenControl=Represents a HTML Hidden control, generally rendered as an input control of\n type 'hidden'. This is used to hold a value that the user will not see but\n will be posted back with the form
org.kuali.rice.krad.uif.control.SpinnerControl=Text control that as decorated with a spinner widget (allowing the control value to be modified using the\n spinner)
org.kuali.rice.krad.uif.control.SpinnerControl|spinner|Spinner=Spinner widget that should decorate the control
org.kuali.rice.krad.uif.control.UifKeyValuesFinderBase=
org.kuali.rice.krad.uif.control.UserControl=Represents a user control, which is a special control to handle\n the input of a Person
org.kuali.rice.krad.uif.control.UserControl|personNamePropertyName|String=The name of the property on the parent object that holds the person name
org.kuali.rice.krad.uif.control.UserControl|personObjectPropertyName|String=The name of the property on the parent object that holds the person object
org.kuali.rice.krad.uif.control.UserControl|principalIdPropertyName|String=The name of the property on the parent object that holds the principal id
org.kuali.rice.krad.uif.element.ActionSecurity=Action field security adds the take action flags to the standard component security
org.kuali.rice.krad.uif.element.ContentElementBase=
org.kuali.rice.krad.uif.element.DataTable=Content element that renders a table using the {@link RichTable} widget configured with an Ajax (or Javascript)\n data source\n\n <p>\n Note this is different from the table layout manager in that it does not render nested components. The data is\n provided directly to the rich table widget which will create the table rows (unlike the table layout which creates\n the table from components then invokes the table plugin to decorate). Therefore this component just creates a table\n element tag and invokes the rich table script\n </p>\n\n <p>\n Nested HTML can be given through the rich table data. However generally this will be read-only data with possibly\n some inquiry links\n </p>
org.kuali.rice.krad.uif.element.DataTable|ajaxSource|String=
org.kuali.rice.krad.uif.element.DataTable|hiddenColumns|Set=
org.kuali.rice.krad.uif.element.DataTable|richTable|RichTable=Widget that will render the data table client side
org.kuali.rice.krad.uif.element.DataTable|sortableColumns|Set=
org.kuali.rice.krad.uif.element.FieldValidationMessages=ValidationMessages for logic and options specific to groups
org.kuali.rice.krad.uif.element.GroupValidationMessages=ValidationMessages for logic and options specific to groups
org.kuali.rice.krad.uif.element.Iframe=Content element that encloses an iframe
org.kuali.rice.krad.uif.element.Iframe|frameborder|String=The IFrame's frame border
org.kuali.rice.krad.uif.element.Iframe|height|String=The IFrame's height
org.kuali.rice.krad.uif.element.Iframe|source|String=The IFrame's source
org.kuali.rice.krad.uif.element.Label=Content element that renders a label\n\n <p>\n Contains options for adding a colon to the label along with a required message\n </p>
org.kuali.rice.krad.uif.element.Label|inlineComponents|List=Gets the inlineComponents used by index in a Label that has rich message component index tags in its labelText
org.kuali.rice.krad.uif.element.Label|labelForComponentId|String=Indicates the id for the component the label applies to\n <p>\n Used for setting the labelFor attribute of the corresponding HTML\n element. Note this gets set automatically by the framework during the\n initialize phase\n </p>
org.kuali.rice.krad.uif.element.Label|labelText|String=Text that will display as the label
org.kuali.rice.krad.uif.element.Label|requiredMessagePlacement|UifConstants.Position=Indicates where the required message field should be placed in relation\n to the label field, valid options are 'LEFT' and 'RIGHT'
org.kuali.rice.krad.uif.element.Label|requiredMessage|Message=<code>Message</code> instance that will display a required indicator\n\n <p>\n To indicate a field must have a value (required input) the required\n message field can be set to display an indicator or message along with\n the label. The message field also dictates the styling of the required\n message\n </p>
org.kuali.rice.krad.uif.element.Label|richLabelMessage|Message=Gets the Message that represents the rich message content of the label if labelText is using rich message tags.\n <b>DO NOT set this\n property directly unless you need full control over the message structure.</b>
org.kuali.rice.krad.uif.element.PageValidationMessages=ValidationMessages for logic and options specific to pages\n TODO this class is currently a placeholder for possible future functionality (ex. flatValidationMessages)
org.kuali.rice.krad.uif.element.Space=Content element that renders a non-breaking space HTML <code>&amp;nbsp;</code> tag
org.kuali.rice.krad.uif.element.ValidationMessages=Field that displays error, warning, and info messages for the keys that are\n matched. By default, an ValidationMessages will match on id and bindingPath (if this\n ValidationMessages is for an InputField), but can be set to match on\n additionalKeys and nested components keys (of the its parentComponent).\n\n In addition, there are a variety of options which can be toggled to effect\n the display of these messages during both client and server side validation\n display. See documentation on each get method for more details on the effect\n of each option.
org.kuali.rice.krad.uif.element.ValidationMessages|additionalKeysToMatch|List=AdditionalKeysToMatch is an additional list of keys outside of the\n default keys that will be matched when messages are returned after a form\n is submitted. These keys are only used for displaying messages generated\n by the server and have no effect on client side validation error display.
org.kuali.rice.krad.uif.element.ValidationMessages|errors|List=The list of error messages found for the keys that were matched on this\n ValidationMessages This is generated and cannot be set
org.kuali.rice.krad.uif.element.ValidationMessages|infos|List=The list of info messages found for the keys that were matched on this\n ValidationMessages This is generated and cannot be set
org.kuali.rice.krad.uif.element.ValidationMessages|warnings|List=The list of warning messages found for the keys that were matched on this\n ValidationMessages This is generated and cannot be set
org.kuali.rice.krad.uif.field.ActionField=Field that encloses an @{link org.kuali.rice.krad.uif.element.Action} element
org.kuali.rice.krad.uif.field.ActionField|actionEvent|String=
org.kuali.rice.krad.uif.field.ActionField|actionImagePlacement|String=
org.kuali.rice.krad.uif.field.ActionField|actionImage|Image=
org.kuali.rice.krad.uif.field.ActionField|actionLabel|String=
org.kuali.rice.krad.uif.field.ActionField|actionParameters|Map=
org.kuali.rice.krad.uif.field.ActionField|actionScript|String=
org.kuali.rice.krad.uif.field.ActionField|action|Action=Nested action component
org.kuali.rice.krad.uif.field.ActionField|disabledReason|String=
org.kuali.rice.krad.uif.field.ActionField|errorCallback|String=
org.kuali.rice.krad.uif.field.ActionField|focusOnIdAfterSubmit|String=
org.kuali.rice.krad.uif.field.ActionField|jumpToIdAfterSubmit|String=
org.kuali.rice.krad.uif.field.ActionField|jumpToNameAfterSubmit|String=
org.kuali.rice.krad.uif.field.ActionField|methodToCall|String=
org.kuali.rice.krad.uif.field.ActionField|navigateToPageId|String=
org.kuali.rice.krad.uif.field.ActionField|preSubmitCall|String=
org.kuali.rice.krad.uif.field.ActionField|successCallback|String=
org.kuali.rice.krad.uif.field.AttributeQuery=Holds configuration for executing a dynamic query on an <code>InputField</code> to\n pull data for updating the UI\n\n <p>\n There are two types of query types that can be configured and executed. The first is provided\n completely by the framework using the <code>LookupService</code> and will perform a query\n against the configured dataObjectClassName using the query parameters and return field mapping.\n The second type will invoke a method that will perform the query. This can be configured using the\n queryMethodToCall (if the method is on the view helper service), or using the queryMethodInvoker if\n the method is on another class or object.\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|additionalCriteria|Map=Fixed criteria that will be appended to the dynamic criteria generated\n for the query. Map key gives name of the property the criteria should\n apply to, and the map value is the value (literal) for the criteria. Standard\n lookup wildcards are allowed
org.kuali.rice.krad.uif.field.AttributeQuery|dataObjectClassName|String=Class name for the data object the query should be performed against
org.kuali.rice.krad.uif.field.AttributeQuery|queryFieldMapping|Map=Configures the query parameters by mapping fields in the view\n to properties on the data object class for the query\n\n <p>\n Each map entry configures one parameter for the query, where\n the map key is the field name to pull the value from, and the\n map value is the property name on the object the parameter should\n populate.\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|queryMethodArgumentFieldList|List=List of field names that should be passed as arguments to the query method\n\n <p>\n Each entry in the list maps to a method parameter, in the other contained within\n the list. The value for the field within the view will be pulled and passed\n to the query method as an argument\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|queryMethodInvokerConfig|MethodInvokerConfig=Configures the query method target class/object and method name\n\n <p>\n When the query method is not contained on the <code>ViewHelperService</code>, this\n can be configured for declaring the target class/object and method. The target class\n can be set in which case a new instance will be created and the given method invoked.\n Alternatively, the target object instance for the invocation can be given. Or finally\n a static method can be configured\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|queryMethodToCall|String=Configures the name of the method that should be invoked to perform\n the query\n\n <p>\n Should contain only the method name (no parameters or return type). If only\n the query method name is configured it is assumed to be on the <code>ViewHelperService</code>\n for the contained view.\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|returnFieldMapping|Map=Maps properties from the result object of the query to\n fields in the view\n\n <p>\n Each map entry configures one return mapping, where the map\n key is the field name for the field to populate, and the map\n values is the name of the property on the result object to\n pull the value from\n </p>
org.kuali.rice.krad.uif.field.AttributeQuery|returnMessageStyleClasses|String=CSS Style classes that should be applied to the return message.\n Multiple style classes should be delimited by a space
org.kuali.rice.krad.uif.field.AttributeQuery|returnMessageText|String=Message text to display along with the query result
org.kuali.rice.krad.uif.field.AttributeQuery|sortPropertyNames|List=List of property names to sort the query results by. The sort\n will be performed on each property in the order they are contained\n within the list. Each property must be a valid property of the\n return query object (the data object in case of the general query)
org.kuali.rice.krad.uif.field.DataFieldSecurity=Data field security adds attribute security to the standard component security\n\n <p>\n The {@link AttributeSecurity} can be configured for the field to indicate there is security at the data layer\n (configured by component (class) and property). If the field is backed by a data dictionary\n {@link org.kuali.rice.krad.datadictionary.AttributeDefinition} the attribute security can be configured there and\n will be picked up and inserted into the field security\n </p>
org.kuali.rice.krad.uif.field.DataFieldSecurity|attributeSecurity|AttributeSecurity=Attribute security instance configured or picked up for the field
org.kuali.rice.krad.uif.field.FieldSecurity=Field security adds the edit in line and view in line flags to the standard component security\n\n <p>\n These flags are only applicable when the field is part of a collection group. They indicate there is security\n on the field within the collection line\n </p>
org.kuali.rice.krad.uif.field.ImageField=Field that wraps an image content element.\n\n <p>\n Puts a <code>&lt;DIV&gt;</code> tag around an image element. This allows for labeling, styling, etc.\n </p>
org.kuali.rice.krad.uif.field.ImageField|altText|String=Provides alternate information for the image element\n\n <p>The altText property specifies an alternate text for an image. It is displayed by the browser\n if the image cannot be displayed.  This is especially important for accessibility, because screen\n readers can't understand images, but rather will read aloud the alternative text assigned to them.\n </p>
org.kuali.rice.krad.uif.field.ImageField|captionHeaderText|String=Gets the caption header text
org.kuali.rice.krad.uif.field.ImageField|captionHeader|Header=Gets the caption header
org.kuali.rice.krad.uif.field.ImageField|cutlineText|String=Gets the cutline text
org.kuali.rice.krad.uif.field.ImageField|cutline|Message=Gets the cutline
org.kuali.rice.krad.uif.field.ImageField|height|String=Gets the height of the image
org.kuali.rice.krad.uif.field.ImageField|image|Image=Retrieves the {@link Image} element wrapped by this field
org.kuali.rice.krad.uif.field.ImageField|source|String=Retrieves the URL the image wrapped by this field
org.kuali.rice.krad.uif.field.ImageField|width|String=Gets the width of the image
org.kuali.rice.krad.uif.field.LinkField=Field that encloses a link element
org.kuali.rice.krad.uif.field.LinkField|href|String=Returns the href text of the <code>Link<code/> field.
org.kuali.rice.krad.uif.field.LinkField|lightBox|LightBox=Returns the <code>LightBox</code> used to open the link in
org.kuali.rice.krad.uif.field.LinkField|linkText|String=Returns the label of the <code>Link<code/> field that will be used to render the label of the link.
org.kuali.rice.krad.uif.field.LinkField|link|Link=Returns the <code>Link<code/> field.
org.kuali.rice.krad.uif.field.LinkField|tar|String=Returns the target of the <code>Link<code/> field that will be used to specify where to open the href.
org.kuali.rice.krad.uif.field.LookupInputField=Custom <code>InputField</code> for search fields within a lookup view
org.kuali.rice.krad.uif.field.RemoteFieldsHolder=A placeholder in the configuration for a <code>Container</code> list of items that will be invoked to\n retrieve a list of {@link RemotableAttributeField} instances which will then be inserted into the containers\n list at the position of the holder\n\n <p>\n Since remotable fields are dynamic by nature, the individual fields cannot be configured initially with the\n container. Further more the properties for the field are constructed with code. This gives the ability to specify\n where that list of fields should be placed, along with configured on how to retrieve the remote fields.\n </p>\n\n <p>\n The fetching properties are used to configure what method to invoke that will return the list of remotable fields.\n Specifying the {@link \#getFetchingMethodToCall()} only assumes the method is on the view helper service for the\n contained view. For invoking other classes, such as services or static classes, use {@link\n \#getFetchingMethodInvoker()}\n </p>\n\n <p>\n The list of remotable fields should bind to a Map property on the model. The {@link \#getPropertyName()} and\n {@link \#getBindingInfo()} properties specify the path to this property. The property names configured on the\n returned fields are assumed to be keys in that above configured map, with the corresponding map value giving the\n actual model value for the remote field.\n </p>\n\n <p>\n e.g. configuration\n {@code\n <property name\="items">\n <list>\n <bean parent\="RemoteFieldsHolder" p\:propertyName\="remoteFieldValuesMap"\n p\:fetchingMethodToCall\="retrieveRemoteFields"/>\n ...\n }\n\n This example will invoke a method named 'retrieveRemoteFields' on the view helper service, which should return\n a list of {@link RemotableAttributeField} instances. The view, model instance, and parent container will be sent\n to the method as arguments.\n\n The returned fields will be translated to {@link InputField} instances that bind to a map property named\n 'remoteFieldValuesMap' on the model.\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|bindingInfo|BindingInfo=Can be used to for more complex binding paths\n\n <p>\n Generally not necessary to set on a field level, any default object path or binding prefixes set\n on the view or container will be inherited\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|fetchingMethodInvoker|MethodInvokerConfig=Configuration for the method to invoke for retrieving the list of remotable fields\n\n <p>\n Through the method invoker config, a service or static class can be configured along with the\n method name that will be invoked. The method name must accept the view, model object, and parent\n container as arguments, and return a list of {@link RemotableAttributeField} instances.\n </p>\n\n <p>\n Note the {@link org.kuali.rice.krad.uif.component.MethodInvokerConfig\#getTargetMethod()} property can\n be configured, or the {@link \#getFetchingMethodToCall()}. In the case of both configurations, the target\n method on the method invoker config will be used\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|fetchingMethodToCall|String=Name of the method to invoke for retrieving the list of remotable fields\n\n <p>\n When only the fetching method to call is configured it is assumed to be a valid method on the view\n helper service for the containing view. The method name must accept the view, model object, and parent\n container as arguments, and return a list of {@link RemotableAttributeField} instances.\n </p>\n\n <p>\n For invoking the method on classes other than the view helper service, see {@link \#getFetchingMethodInvoker()}\n </p>
org.kuali.rice.krad.uif.field.RemoteFieldsHolder|propertyName|String=Path to the Map property that the translated fields bind to\n\n <p>\n It is assumed this property points to a Map where the property names on the returned remotable fields\n are keys in that map, with the corresponding map value giving the model value for the field\n </p>
org.kuali.rice.krad.uif.field.SpaceField=Field that produces only a space\n\n <p>\n Can be used to aid in the layout of other fields, for instance in a grid. For\n example in a totals row generally the rows that are not totaled are blank in\n the total row.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager=Layout manager that works with {@code CollectionGroup} components and\n renders the collection as a Table\n\n <p>\n Based on the fields defined, the {@code TableLayoutManager} will\n dynamically create instances of the fields for each collection row. In\n addition, the manager can create standard fields like the action and sequence\n fields for each row. The manager supports options inherited from the\n {@code GridLayoutManager} such as rowSpan, colSpan, and cell width\n settings.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|actionColumnIndex|int=Indicates the index of the action column
org.kuali.rice.krad.uif.layout.TableLayoutManager|actionColumnPlacement|String=Indicates the actions column placement\n\n <p>\n Valid values are 'LEFT', 'RIGHT' or any valid number. The default is 'RIGHT' or '-1'. The column placement index\n takes all displayed columns, including sequence and selection columns, into account.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|actionFieldPrototype|FieldGroup={@code FieldGroup} instance to serve as a prototype for the actions\n column. For each collection line this instance is copied and adjusted as\n necessary. Note the actual actions for the group come from the collection\n groups actions List\n (org.kuali.rice.krad.uif.container.CollectionGroup.getActions()). The\n FieldGroup prototype is useful for setting styling of the actions column\n and for the layout of the action fields. Note also the label associated\n with the prototype is used for the action column header
org.kuali.rice.krad.uif.layout.TableLayoutManager|addLineGroup|Group=When {@link \#isSeparateAddLine()} is true, this group will be used to render the add line\n\n <p>\n This group can be used to configure how the add line will be rendered. For example the layout manager configured\n on the group will be used to rendered the add line fields. If the header (title) is not set on the group, it\n will be set from\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getAddLabel()}. In addition,\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getAddLineActions()} will be added to the group\n footer items.\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|columnCalculations|List=Gets the column calculations.  This is a list of ColumnCalcuationInfo that when set provides calculations\n to be performed on the columns they specify.  These calculations appear in the table's footer.  This feature is\n only available when using richTable functionality.
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupTotalLabelPrototype|Label=The groupTotal label to use when renderOnlyLeftTotalLabels is TRUE.  This label will appear in the left most\n column.
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupingPrefix|String=Get the groupingPrefix.  The groupingPrefix is used to prefix the generated title (not used when\n groupingTitle is set directly) when using groupingPropertyNames.
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupingPropertyNames|List=Gets the list of property names to use for grouping.\n\n <p>\n When this property is set, grouping for this\n collection will be enabled and the lines of the collection will be grouped by the propertyName(s) supplied.\n Supplying multiple property names will cause the grouping to be on multiple fields and ordered\n alphabetically on "propetyValue1, propertyValue2" (this is also how the group title will display for each\n group).\n The property names supplied must be relative to the line, so \#lp\n SHOULD NOT be used (it is assumed automatically).\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|groupingTitle|String=Get the groupingTitle.  The groupingTitle MUST contain a SpringEL expression to uniquely identify a\n group's line (ie it cannot be a static string because each group must be identified by some value).\n <b>This overrides groupingPropertyNames(if set) because it provides full control of grouping value used by\n the collection.  SpringEL defined here must use \#lp if referencing values of the line.</b>
org.kuali.rice.krad.uif.layout.TableLayoutManager|headerLabelPrototype|Label={@code Label} instance to use as a prototype for creating the\n tables header fields. For each header field the prototype will be copied\n and adjusted as necessary
org.kuali.rice.krad.uif.layout.TableLayoutManager|hiddenColumns|Set=
org.kuali.rice.krad.uif.layout.TableLayoutManager|numberOfDataColumns|int=
org.kuali.rice.krad.uif.layout.TableLayoutManager|pageTotalLabel|Label=The pageTotal label to use when renderOnlyLeftTotalLabels is TRUE for total.  This label will appear in the\n left most column.
org.kuali.rice.krad.uif.layout.TableLayoutManager|richTable|RichTable=Widget associated with the table to add functionality such as sorting,\n paging, and export
org.kuali.rice.krad.uif.layout.TableLayoutManager|rowDetailsGroup|Group=The row details info group to use when using a TableLayoutManager with the a richTable.\n\n <p>This group will be displayed when the user clicks the "Details" link/image on a row.\n This allows extra/long data to be hidden in table rows and then revealed during interaction\n with the table without the need to leave the page.  Allows for any group content.</p>\n\n <p>Does not currently work with javascript required content.</p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|rowDetailsLinkName|String=Name of the link for displaying row details in a TableLayoutManager CollectionGroup
org.kuali.rice.krad.uif.layout.TableLayoutManager|selectFieldPrototype|Field=Field instance that serves as a prototype for creating the select field on each line when\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#isIncludeLineSelectionField()} is true\n\n <p>\n This prototype can be used to set the control used for the select field (generally will be a checkbox control)\n in addition to styling and other setting. The binding path will be formed with using the\n {@link org.kuali.rice.krad.uif.container.CollectionGroup\#getLineSelectPropertyName()} or if not set the\n framework\n will use {@link org.kuali.rice.krad.web.form.UifFormBase\#getSelectedCollectionLines()}\n </p>
org.kuali.rice.krad.uif.layout.TableLayoutManager|sequenceFieldPrototype|Field={@code Field} instance to serve as a prototype for the\n sequence field. For each collection line this instance is copied and\n adjusted as necessary
org.kuali.rice.krad.uif.layout.TableLayoutManager|sequencePropertyName|String=Attribute name to use as sequence value. For each collection line the\n value of this field on the line will be retrieved and used as the\n sequence value
org.kuali.rice.krad.uif.layout.TableLayoutManager|sortableColumns|Set=
org.kuali.rice.krad.uif.layout.TableLayoutManager|subCollectionFieldGroupPrototype|FieldGroup=Field group instance that is used as a prototype for creating the\n sub-collection field groups. For each sub-collection a copy of the\n prototype is made and the list will be passed to the layout manager\n buildLine method
org.kuali.rice.krad.uif.layout.TableLayoutManager|totalLabel|Label=The total label to use when renderOnlyLeftTotalLabels is TRUE for total.\n This label will appear in the left most column.
org.kuali.rice.krad.uif.modifier.ComparableInfo=Provides configuration for comparing an object with another object\n\n <p>\n Used with a comparison view (such as in maintenance documents edit mode)\n where two objects with the same properties are compared. This class\n configures the object paths for the objects that will be compared, and has\n additional configuration for the generated comparison group\n </p>\n\n <p>\n All comparison objects must have the same fields and collection rows\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|bindingObjectPath|String=Returns the path (from the form) for the object to compare to\n\n <p>\n When a comparison view is rendered, a group will be rendered for each\n comparison object using the fields defined on the view. This gives the\n path to one of the comparison objects\n </p>\n\n <p>\n e.g. For maintenance documents the compare object paths would be\n document.newMaintainableObject.businessObject and\n document.oldMaintainableObject.businessObject\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|headerText|String=Text that should display on the header for the compare group\n\n <p>\n In the comparison view each compare group can be labeled, this gives the\n text that should be used for that label. For example in the maintenance\n view the compare record is labeled 'Old' to indicate it is the old\n version of the record\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|idSuffix|String=Specifies an id suffix to use for the generated comparison fields\n\n <p>\n For the given string, all components created for the comparison group\n will contain the string on their id. This can be helpful for scripting.\n If not given, the items will receive a default id suffix\n </p>
org.kuali.rice.krad.uif.modifier.ComparableInfo|order|int=Sets the order value that will be used to determine where the compare\n group should be placed in relation to the other compare groups\n\n <p>\n For example if the compare groups are being rendered from left to right\n in columns, a lower order value would be placed to the left of a compare\n group with a higher order value\n </p>
org.kuali.rice.krad.uif.modifier.LabelSeparateModifier=Pulls <code>Label</code> instances out of a contained field so they will\n be placed separately in the <code>LayoutManager</code>
org.kuali.rice.krad.uif.view.DocumentView=View type for KRAD documents\n\n <p>\n Provides commons configuration and default behavior applicable to documents\n in the KRAD module.\n </p>
org.kuali.rice.krad.uif.view.DocumentView|attachmentTypesValuesFinderClass|Class=Gets attachment types values finder classs
org.kuali.rice.krad.uif.view.DocumentView|documentClass|Class=Gets the document class
org.kuali.rice.krad.uif.view.History=History class used to keep track of views visited so they can be displayed in the ui\n as breadcrumbs - both as homeward path and history path interpretations
org.kuali.rice.krad.uif.view.HistoryEntry=A simple object that keeps track of various HistoryInformation\n\n TODO a variety of these settings are not used in the current implementation of breadcrumbs\n and history, they may be removed later if they prove unuseful in future changes
org.kuali.rice.krad.uif.view.HistoryEntry|formKey|String=
org.kuali.rice.krad.uif.view.HistoryEntry|pageId|String=The pageId of the page on the view
org.kuali.rice.krad.uif.view.HistoryEntry|title|String=The title of the view
org.kuali.rice.krad.uif.view.HistoryEntry|url|String=The url of this HistoryEntry
org.kuali.rice.krad.uif.view.HistoryEntry|viewId|String=The viewId of the view
org.kuali.rice.krad.uif.view.History|current|HistoryEntry=Gets the current view's HistoryEntry.\n This does not include the "&history\=" query parameter on its\n url variable.  For the HistoryEntry that includes history information to be passed\n on the url it is retrieving, getGeneratedCurrentBreadcrumb is used.
org.kuali.rice.krad.uif.view.History|historyEntries|List=Gets a list of the current HistoryEntries not including the current entry.\n This list does not include the "&history\=" query parameter on each HistoryEntry's\n url variable.  For HistoryEntries that include history information to be passed to the\n view they are retrieving, getGeneratedBreadcrumbs is used.
org.kuali.rice.krad.uif.view.History|homewardPath|List=Gets the predetermined homeward path for this view's history.\n This is set by the same property in the view's Breadcrumbs configuration.
org.kuali.rice.krad.uif.view.InquiryView=Type of <code>View</code> that provides a read-only display of a record of\n data (object instance)\n\n <p>\n The <code>InquiryView</code> provides the interface for the Inquiry\n framework. It works with the <code>Inquirable</code> service and inquiry\n controller. The view does render a form to support the configuration of\n actions to perform operations on the data.\n </p>\n\n <p>\n Inquiry views are primarily configured by the object class they are\n associated with. This provides the default dictionary information for the\n fields. If more than one inquiry view is needed for the same object class,\n the view name can be used to further identify an unique view\n </p>
org.kuali.rice.krad.uif.view.InquiryView|dataObjectClassName|Class=Class name for the object the inquiry applies to\n\n <p>\n The object class name is used to pick up a dictionary entry which will\n feed the attribute field definitions and other configuration. In addition\n it is used to configure the <code>Inquirable</code> which will carry out\n the inquiry action\n </p>
org.kuali.rice.krad.uif.view.LookupView=View type for Maintenance documents\n\n <p>\n Supports doing a search against a data object class or performing a more advanced query. The view\n type is primarily made up of two groups, the search (or criteria) group and the results group. Many\n options are supported on the view to enable/disable certain features, like what actions are available\n on the search results.\n </p>\n\n <p>\n Works in conjunction with <code>LookupableImpl</code> which customizes the view and carries out the\n business functionality\n </p>
org.kuali.rice.krad.uif.view.LookupView|criteriaFields|List=
org.kuali.rice.krad.uif.view.LookupView|criteriaGroup|Group=
org.kuali.rice.krad.uif.view.LookupView|dataObjectClassName|Class=Class name for the object the lookup applies to\n\n <p>\n The object class name is used to pick up a dictionary entry which will\n feed the attribute field definitions and other configuration. In addition\n it is to configure the <code>Lookupable</code> which will carry out the\n lookup action\n </p>
org.kuali.rice.krad.uif.view.LookupView|defaultSortAttributeNames|List=
org.kuali.rice.krad.uif.view.LookupView|maintenanceUrlMapping|String=String that maps to the maintenance controller for the maintenance document (if any) associated with the\n lookup data object class\n\n <p>\n Mapping will be used to build the maintenance action links (such as edit, copy, and new). If not given, the\n default maintenance mapping will be used\n </p>
org.kuali.rice.krad.uif.view.LookupView|resultFields|List=
org.kuali.rice.krad.uif.view.LookupView|resultSetLimit|Integer=Retrieves the maximum number of records that will be listed\n as a result of the lookup search
org.kuali.rice.krad.uif.view.LookupView|resultsActionsFieldGroup|FieldGroup=
org.kuali.rice.krad.uif.view.LookupView|resultsGroup|CollectionGroup=
org.kuali.rice.krad.uif.view.LookupView|resultsReturnField|Field=
org.kuali.rice.krad.uif.view.LookupView|returnTar|String=
org.kuali.rice.krad.uif.view.MaintenanceDocumentView=View type for Maintenance documents\n\n <p>\n Supports primary display for a new maintenance record, in which case the\n fields are display for populating the new record, and an edit maintenance\n record, which is a comparison view with the old record read-only on the left\n side and the new record (changed record) on the right side\n </p>\n\n <p>\n The <code>MaintenanceDocumentView</code> provides the interface for the maintenance\n framework. It works with the <code>Maintainable</code> service and\n maintenance controller.\n </p>\n\n <p>\n Maintenance views are primarily configured by the object class they are\n associated with. This provides the default dictionary information for the\n fields. If more than one maintenance view is needed for the same object\n class, the view name can be used to further identify an unique view\n </p>
org.kuali.rice.krad.uif.view.MaintenanceDocumentView|dataObjectClassName|Class=Class name for the object the maintenance document applies to\n\n <p>\n The object class name is used to pick up a dictionary entry which will\n feed the attribute field definitions and other configuration. In addition\n it is used to configure the <code>Maintainable</code> which will carry\n out the maintenance action\n </p>
org.kuali.rice.krad.uif.view.MaintenanceDocumentView|maintenanceAction|String=Indicates what maintenance action (new, edit, copy) was\n requested
org.kuali.rice.krad.uif.view.MaintenanceDocumentView|oldObjectBindingPath|String=Gives the binding path to the old object (record being edited) to display\n for comparison
org.kuali.rice.krad.uif.view.ViewAuthorizerBase=Implementation of {@link ViewAuthorizer} that verifies authorization with KIM permission checks\n\n <p>\n Each permission goes through one of the isAuthorized methods provided by\n {@link org.kuali.rice.krad.bo.DataObjectAuthorizer}, these in turn call {@link \#addPermissionDetails(Object, java.util.Map)}\n and {@link \#addRoleQualification(Object, java.util.Map)} for building the permission and role maps to send with\n the permission check. Subclasses can override these methods to add additional attributes\n </p>
org.kuali.rice.krad.uif.view.ViewAuthorizerBase|configurationService|ConfigurationService=
org.kuali.rice.krad.uif.view.ViewPresentationControllerBase=Implementation of {@link ViewPresentationController} that implements no logic by default
org.kuali.rice.krad.uif.widget.BlockUI=BlockUI element is used within the view element for managing element/page blocking attributes\n\n <p>\n Some basic options of the plugin are exposed through this class. Messages can be managed via\n Action elements. See the jquery BlockUI plugin for more details.\n </p>
org.kuali.rice.krad.uif.widget.BlockUI|blockingImageSource|String=Path to an image that will be rendered in the blocking overlay\n\n <p>\n If specified, the image will be picked up and rendered before the blocking message in\n the overlay. If not given just the message will be displayed\n </p>
org.kuali.rice.krad.uif.widget.BreadCrumbs=The breadcrumb widget contains various settings for setting up\n Breadcrumb/History support on the view
org.kuali.rice.krad.uif.widget.BreadCrumbs|homewardPathList|List=The homewardPath to be displayed on this representative of the logical\n "location" of the view within the site hierarchy, can be set to anything\n desired.
org.kuali.rice.krad.uif.widget.DatePicker=Used for rendering a calendar in the UI that can be used to selected dates\n for field values
org.kuali.rice.krad.uif.widget.Disclosure=Decorates a group with collapse/expand functionality
org.kuali.rice.krad.uif.widget.Disclosure|animationSpeed|int=Gives the speed for the open/close animation, a smaller int will result\n in a faster animation
org.kuali.rice.krad.uif.widget.Disclosure|collapseImageSrc|String=Path to the images that should be displayed to collapse the group
org.kuali.rice.krad.uif.widget.Disclosure|expandImageSrc|String=Path to the images that should be displayed to expand the group
org.kuali.rice.krad.uif.widget.Growls=Growls sets up settings for growls global to the current view and its pages\n\n <p>\n Some basic options of the plugin are exposed through this class, however additional options\n can be passed through setComponentOptions as usual. However, the header and theme option is set\n by the growl processing in PageGroup automatically. See the jquery jGrowl plugin for more details.\n </p>
org.kuali.rice.krad.uif.widget.Growls|position|String=The position for the growls to appear in the window\n There are five options available\: top-left, top-right, bottom-left, bottom-right, center.
org.kuali.rice.krad.uif.widget.Growls|timeShown|int=The time growls are shown in milliseconds
org.kuali.rice.krad.uif.widget.Help=Widget that renders help on a component\n\n <p>\n If help URL is specified then display help icon and/or if help summary is specified then display help tooltip.\n </p>
org.kuali.rice.krad.uif.widget.Help|externalHelpUrl|String=The external help Url\n\n <p>\n This should contain a valid URL.  When specified this URL takes precedence over the external help URL from\n the system parameters.\n </p>\n\n * @return Url of the external help
org.kuali.rice.krad.uif.widget.Help|helpAction|Action=HelpActionField is used for rendering external help
org.kuali.rice.krad.uif.widget.Help|helpDefinition|HelpDefinition=The help definition is used as the key to retrieve the external help Url from the parameter table of\n the database
org.kuali.rice.krad.uif.widget.Help|tooltipHelpContent|String=TooltipHelpContent
org.kuali.rice.krad.uif.widget.Inquiry=Widget for rendering an Inquiry link or DirectInquiry action field\n\n <p>\n The inquiry widget will render a button for the field value when\n that field is editable. When read only the widget will create a link on the display value.\n It points to the associated inquiry view for the field. The inquiry can be configured to point to a certain\n {@code InquiryView}, or the framework will attempt to associate the\n field with a inquiry based on its metadata (in particular its\n relationships in the model).\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|baseInquiryUrl|String=Returns the URL for the inquiry for which parameters will be added\n\n <p>\n The base URL includes the domain, context, and controller mapping for the inquiry invocation. Parameters are\n then added based on configuration to complete the URL. This is generally defaulted to the application URL and\n internal KRAD servlet mapping, but can be changed to invoke another application such as the Rice standalone\n server\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|dataObjectClassName|String=Full class name the inquiry should be provided for\n\n <p>\n This is passed on to the inquiry request for the data object the lookup should be rendered for. This is then\n used by the inquiry framework to select the lookup view (if more than one inquiry view exists for the same\n data object class name, the {@link \#getViewName()} property should be specified to select the view to render).\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|directInquiryAction|Action={@code Action} that will be rendered next to the field for a direct inquiry
org.kuali.rice.krad.uif.widget.Inquiry|inquiryLink|Link={@code Link} that will be rendered for an inquiry
org.kuali.rice.krad.uif.widget.Inquiry|inquiryParameters|Map=Map that determines what properties from a calling view will be sent to properties on the inquiry data object\n\n <p>\n When invoking an inquiry view, a query is done against the inquiries configured data object and the resulting\n record is display. The values for the properties configured within the inquiry parameters Map will be\n pulled and passed along as values for the inquiry data object properties (thus they form the criteria for\n the inquiry)\n </p>
org.kuali.rice.krad.uif.widget.Inquiry|viewName|String=When multiple target inquiry views exists for the same data object class, the view name can be set to\n determine which one to use\n\n <p>\n When creating multiple inquiry views for the same data object class, the view name can be specified for the\n different versions (for example 'simple' and 'advanced'). When multiple inquiry views exist the view name must\n be sent with the data object class for the request. Note the view id can be alternatively used to uniquely\n identify the inquiry view\n </p>
org.kuali.rice.krad.uif.widget.Reorderer=Allows client-side reordering of the group contents
org.kuali.rice.krad.uif.widget.Reorderer|movableStyleClass|String=Returns the style class for the item spans that will identify a movable element\n\n <p>\n Given style class will be used to build a jQuery selector that is then passed to the\n reorderer widget through the options\n </p>
org.kuali.rice.krad.uif.widget.Scrollpane=Decorates a group with scroll functionality
org.kuali.rice.krad.uif.widget.Scrollpane|height|String=Height the content should take up in the group\n\n <p>\n If the content size exceeds the height then a scroll bar will be shown.\n </p>\n <p>\n e.g. '30%' or '55px'\n </p>
org.kuali.rice.krad.uif.widget.Spinner=Widget that decorates a control transforming into a spinner\n\n <p>\n Spinners allow the incrementing or decrementing of the controls value with an arrow up and down icon on\n the right side of the control. How the value is incremented, min/max values, and so on can be configured\n through the {@link org.kuali.rice.krad.uif.component.Component\#getTemplateOptions()} property\n </p>
org.kuali.rice.krad.uif.widget.Suggest=Widget that provides dynamic select options to the user as they\n are entering the value (also known as auto-complete)\n\n <p>\n Widget is backed by an <code>AttributeQuery</code> that provides\n the configuration for executing a query server side that will retrieve\n the valid option values\n </p>
org.kuali.rice.krad.uif.widget.Suggest|sourcePropertyName|String=Name of the property on the query result object that provides\n the options for the suggest, values from this field will be\n collected and sent back on the result to provide as suggest options
org.kuali.rice.krad.uif.widget.Suggest|suggestOptions|List=When {@link \#isRetrieveAllSuggestions()} is true, this list provides the full list of suggestions\n\n <p>\n If a query method is configured that method will be invoked to populate this list, otherwise the\n list should be populated through configuration or the view helper\n </p>\n\n <p>\n The suggest options can either be a list of Strings, in which case the strings will be the suggested\n values. Or a list of objects. If the object does not have 'label' and 'value' properties, a custom render\n and select method must be provided\n </p>
org.kuali.rice.krad.uif.widget.Suggest|suggestQuery|AttributeQuery=Attribute query instance the will be executed to provide\n the suggest options
org.kuali.rice.krad.uif.widget.SyntaxHighlighter=Widget that renders text syntax highlighted\n\n <p>\n The widget renders a div with a header. In the div the source code text will be added in pre tags with the\n specified plugin class that is needed for the plugin to alter the text.\n </p>
org.kuali.rice.krad.uif.widget.Tabs=Widget used for configuring tab options, use componentOptions for most options.\n See http\://jqueryui.com/demos/tabs/ for usable options
org.kuali.rice.krad.uif.widget.Tree=Widget component for rendering a Tree
org.kuali.rice.krad.uif.widget.WidgetBase=Base class for Widgets\n\n <p>\n Sets the component type name for all widget components and provides default\n implementation of performFinalize\n </p>
